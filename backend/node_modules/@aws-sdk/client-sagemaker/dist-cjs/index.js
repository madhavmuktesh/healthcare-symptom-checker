'use strict';

var middlewareHostHeader = require('@aws-sdk/middleware-host-header');
var middlewareLogger = require('@aws-sdk/middleware-logger');
var middlewareRecursionDetection = require('@aws-sdk/middleware-recursion-detection');
var middlewareUserAgent = require('@aws-sdk/middleware-user-agent');
var configResolver = require('@smithy/config-resolver');
var core = require('@smithy/core');
var middlewareContentLength = require('@smithy/middleware-content-length');
var middlewareEndpoint = require('@smithy/middleware-endpoint');
var middlewareRetry = require('@smithy/middleware-retry');
var smithyClient = require('@smithy/smithy-client');
var httpAuthSchemeProvider = require('./auth/httpAuthSchemeProvider');
var runtimeConfig = require('./runtimeConfig');
var regionConfigResolver = require('@aws-sdk/region-config-resolver');
var protocolHttp = require('@smithy/protocol-http');
var middlewareSerde = require('@smithy/middleware-serde');
var core$1 = require('@aws-sdk/core');
var uuid = require('@smithy/uuid');
var utilWaiter = require('@smithy/util-waiter');

const resolveClientEndpointParameters = (options) => {
    return Object.assign(options, {
        useDualstackEndpoint: options.useDualstackEndpoint ?? false,
        useFipsEndpoint: options.useFipsEndpoint ?? false,
        defaultSigningName: "sagemaker",
    });
};
const commonParams = {
    UseFIPS: { type: "builtInParams", name: "useFipsEndpoint" },
    Endpoint: { type: "builtInParams", name: "endpoint" },
    Region: { type: "builtInParams", name: "region" },
    UseDualStack: { type: "builtInParams", name: "useDualstackEndpoint" },
};

const getHttpAuthExtensionConfiguration = (runtimeConfig) => {
    const _httpAuthSchemes = runtimeConfig.httpAuthSchemes;
    let _httpAuthSchemeProvider = runtimeConfig.httpAuthSchemeProvider;
    let _credentials = runtimeConfig.credentials;
    return {
        setHttpAuthScheme(httpAuthScheme) {
            const index = _httpAuthSchemes.findIndex((scheme) => scheme.schemeId === httpAuthScheme.schemeId);
            if (index === -1) {
                _httpAuthSchemes.push(httpAuthScheme);
            }
            else {
                _httpAuthSchemes.splice(index, 1, httpAuthScheme);
            }
        },
        httpAuthSchemes() {
            return _httpAuthSchemes;
        },
        setHttpAuthSchemeProvider(httpAuthSchemeProvider) {
            _httpAuthSchemeProvider = httpAuthSchemeProvider;
        },
        httpAuthSchemeProvider() {
            return _httpAuthSchemeProvider;
        },
        setCredentials(credentials) {
            _credentials = credentials;
        },
        credentials() {
            return _credentials;
        },
    };
};
const resolveHttpAuthRuntimeConfig = (config) => {
    return {
        httpAuthSchemes: config.httpAuthSchemes(),
        httpAuthSchemeProvider: config.httpAuthSchemeProvider(),
        credentials: config.credentials(),
    };
};

const resolveRuntimeExtensions = (runtimeConfig, extensions) => {
    const extensionConfiguration = Object.assign(regionConfigResolver.getAwsRegionExtensionConfiguration(runtimeConfig), smithyClient.getDefaultExtensionConfiguration(runtimeConfig), protocolHttp.getHttpHandlerExtensionConfiguration(runtimeConfig), getHttpAuthExtensionConfiguration(runtimeConfig));
    extensions.forEach((extension) => extension.configure(extensionConfiguration));
    return Object.assign(runtimeConfig, regionConfigResolver.resolveAwsRegionExtensionConfiguration(extensionConfiguration), smithyClient.resolveDefaultRuntimeConfig(extensionConfiguration), protocolHttp.resolveHttpHandlerRuntimeConfig(extensionConfiguration), resolveHttpAuthRuntimeConfig(extensionConfiguration));
};

class SageMakerClient extends smithyClient.Client {
    config;
    constructor(...[configuration]) {
        const _config_0 = runtimeConfig.getRuntimeConfig(configuration || {});
        super(_config_0);
        this.initConfig = _config_0;
        const _config_1 = resolveClientEndpointParameters(_config_0);
        const _config_2 = middlewareUserAgent.resolveUserAgentConfig(_config_1);
        const _config_3 = middlewareRetry.resolveRetryConfig(_config_2);
        const _config_4 = configResolver.resolveRegionConfig(_config_3);
        const _config_5 = middlewareHostHeader.resolveHostHeaderConfig(_config_4);
        const _config_6 = middlewareEndpoint.resolveEndpointConfig(_config_5);
        const _config_7 = httpAuthSchemeProvider.resolveHttpAuthSchemeConfig(_config_6);
        const _config_8 = resolveRuntimeExtensions(_config_7, configuration?.extensions || []);
        this.config = _config_8;
        this.middlewareStack.use(middlewareUserAgent.getUserAgentPlugin(this.config));
        this.middlewareStack.use(middlewareRetry.getRetryPlugin(this.config));
        this.middlewareStack.use(middlewareContentLength.getContentLengthPlugin(this.config));
        this.middlewareStack.use(middlewareHostHeader.getHostHeaderPlugin(this.config));
        this.middlewareStack.use(middlewareLogger.getLoggerPlugin(this.config));
        this.middlewareStack.use(middlewareRecursionDetection.getRecursionDetectionPlugin(this.config));
        this.middlewareStack.use(core.getHttpAuthSchemeEndpointRuleSetPlugin(this.config, {
            httpAuthSchemeParametersProvider: httpAuthSchemeProvider.defaultSageMakerHttpAuthSchemeParametersProvider,
            identityProviderConfigProvider: async (config) => new core.DefaultIdentityProviderConfig({
                "aws.auth#sigv4": config.credentials,
            }),
        }));
        this.middlewareStack.use(core.getHttpSigningPlugin(this.config));
    }
    destroy() {
        super.destroy();
    }
}

class SageMakerServiceException extends smithyClient.ServiceException {
    constructor(options) {
        super(options);
        Object.setPrototypeOf(this, SageMakerServiceException.prototype);
    }
}

const ActionStatus = {
    COMPLETED: "Completed",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
    UNKNOWN: "Unknown",
};
const ActivationState = {
    DISABLED: "Disabled",
    ENABLED: "Enabled",
};
const AssociationEdgeType = {
    ASSOCIATED_WITH: "AssociatedWith",
    CONTRIBUTED_TO: "ContributedTo",
    DERIVED_FROM: "DerivedFrom",
    PRODUCED: "Produced",
    SAME_AS: "SameAs",
};
class ResourceLimitExceeded extends SageMakerServiceException {
    name = "ResourceLimitExceeded";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceLimitExceeded",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceLimitExceeded.prototype);
        this.Message = opts.Message;
    }
}
class ResourceNotFound extends SageMakerServiceException {
    name = "ResourceNotFound";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceNotFound",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceNotFound.prototype);
        this.Message = opts.Message;
    }
}
const CompressionType = {
    GZIP: "Gzip",
    NONE: "None",
};
const AdditionalS3DataSourceDataType = {
    S3OBJECT: "S3Object",
    S3PREFIX: "S3Prefix",
};
const ModelCompressionType = {
    Gzip: "Gzip",
    None: "None",
};
const S3ModelDataType = {
    S3Object: "S3Object",
    S3Prefix: "S3Prefix",
};
const ProductionVariantInstanceType = {
    ML_C4_2XLARGE: "ml.c4.2xlarge",
    ML_C4_4XLARGE: "ml.c4.4xlarge",
    ML_C4_8XLARGE: "ml.c4.8xlarge",
    ML_C4_LARGE: "ml.c4.large",
    ML_C4_XLARGE: "ml.c4.xlarge",
    ML_C5D_18XLARGE: "ml.c5d.18xlarge",
    ML_C5D_2XLARGE: "ml.c5d.2xlarge",
    ML_C5D_4XLARGE: "ml.c5d.4xlarge",
    ML_C5D_9XLARGE: "ml.c5d.9xlarge",
    ML_C5D_LARGE: "ml.c5d.large",
    ML_C5D_XLARGE: "ml.c5d.xlarge",
    ML_C5_18XLARGE: "ml.c5.18xlarge",
    ML_C5_2XLARGE: "ml.c5.2xlarge",
    ML_C5_4XLARGE: "ml.c5.4xlarge",
    ML_C5_9XLARGE: "ml.c5.9xlarge",
    ML_C5_LARGE: "ml.c5.large",
    ML_C5_XLARGE: "ml.c5.xlarge",
    ML_C6GD_12XLARGE: "ml.c6gd.12xlarge",
    ML_C6GD_16XLARGE: "ml.c6gd.16xlarge",
    ML_C6GD_2XLARGE: "ml.c6gd.2xlarge",
    ML_C6GD_4XLARGE: "ml.c6gd.4xlarge",
    ML_C6GD_8XLARGE: "ml.c6gd.8xlarge",
    ML_C6GD_LARGE: "ml.c6gd.large",
    ML_C6GD_XLARGE: "ml.c6gd.xlarge",
    ML_C6GN_12XLARGE: "ml.c6gn.12xlarge",
    ML_C6GN_16XLARGE: "ml.c6gn.16xlarge",
    ML_C6GN_2XLARGE: "ml.c6gn.2xlarge",
    ML_C6GN_4XLARGE: "ml.c6gn.4xlarge",
    ML_C6GN_8XLARGE: "ml.c6gn.8xlarge",
    ML_C6GN_LARGE: "ml.c6gn.large",
    ML_C6GN_XLARGE: "ml.c6gn.xlarge",
    ML_C6G_12XLARGE: "ml.c6g.12xlarge",
    ML_C6G_16XLARGE: "ml.c6g.16xlarge",
    ML_C6G_2XLARGE: "ml.c6g.2xlarge",
    ML_C6G_4XLARGE: "ml.c6g.4xlarge",
    ML_C6G_8XLARGE: "ml.c6g.8xlarge",
    ML_C6G_LARGE: "ml.c6g.large",
    ML_C6G_XLARGE: "ml.c6g.xlarge",
    ML_C6IN_12XLARGE: "ml.c6in.12xlarge",
    ML_C6IN_16XLARGE: "ml.c6in.16xlarge",
    ML_C6IN_24XLARGE: "ml.c6in.24xlarge",
    ML_C6IN_2XLARGE: "ml.c6in.2xlarge",
    ML_C6IN_32XLARGE: "ml.c6in.32xlarge",
    ML_C6IN_4XLARGE: "ml.c6in.4xlarge",
    ML_C6IN_8XLARGE: "ml.c6in.8xlarge",
    ML_C6IN_LARGE: "ml.c6in.large",
    ML_C6IN_XLARGE: "ml.c6in.xlarge",
    ML_C6I_12XLARGE: "ml.c6i.12xlarge",
    ML_C6I_16XLARGE: "ml.c6i.16xlarge",
    ML_C6I_24XLARGE: "ml.c6i.24xlarge",
    ML_C6I_2XLARGE: "ml.c6i.2xlarge",
    ML_C6I_32XLARGE: "ml.c6i.32xlarge",
    ML_C6I_4XLARGE: "ml.c6i.4xlarge",
    ML_C6I_8XLARGE: "ml.c6i.8xlarge",
    ML_C6I_LARGE: "ml.c6i.large",
    ML_C6I_XLARGE: "ml.c6i.xlarge",
    ML_C7G_12XLARGE: "ml.c7g.12xlarge",
    ML_C7G_16XLARGE: "ml.c7g.16xlarge",
    ML_C7G_2XLARGE: "ml.c7g.2xlarge",
    ML_C7G_4XLARGE: "ml.c7g.4xlarge",
    ML_C7G_8XLARGE: "ml.c7g.8xlarge",
    ML_C7G_LARGE: "ml.c7g.large",
    ML_C7G_XLARGE: "ml.c7g.xlarge",
    ML_C7I_12XLARGE: "ml.c7i.12xlarge",
    ML_C7I_16XLARGE: "ml.c7i.16xlarge",
    ML_C7I_24XLARGE: "ml.c7i.24xlarge",
    ML_C7I_2XLARGE: "ml.c7i.2xlarge",
    ML_C7I_48XLARGE: "ml.c7i.48xlarge",
    ML_C7I_4XLARGE: "ml.c7i.4xlarge",
    ML_C7I_8XLARGE: "ml.c7i.8xlarge",
    ML_C7I_LARGE: "ml.c7i.large",
    ML_C7I_XLARGE: "ml.c7i.xlarge",
    ML_C8G_12XLARGE: "ml.c8g.12xlarge",
    ML_C8G_16XLARGE: "ml.c8g.16xlarge",
    ML_C8G_24XLARGE: "ml.c8g.24xlarge",
    ML_C8G_2XLARGE: "ml.c8g.2xlarge",
    ML_C8G_48XLARGE: "ml.c8g.48xlarge",
    ML_C8G_4XLARGE: "ml.c8g.4xlarge",
    ML_C8G_8XLARGE: "ml.c8g.8xlarge",
    ML_C8G_LARGE: "ml.c8g.large",
    ML_C8G_MEDIUM: "ml.c8g.medium",
    ML_C8G_XLARGE: "ml.c8g.xlarge",
    ML_DL1_24XLARGE: "ml.dl1.24xlarge",
    ML_G4DN_12XLARGE: "ml.g4dn.12xlarge",
    ML_G4DN_16XLARGE: "ml.g4dn.16xlarge",
    ML_G4DN_2XLARGE: "ml.g4dn.2xlarge",
    ML_G4DN_4XLARGE: "ml.g4dn.4xlarge",
    ML_G4DN_8XLARGE: "ml.g4dn.8xlarge",
    ML_G4DN_XLARGE: "ml.g4dn.xlarge",
    ML_G5_12XLARGE: "ml.g5.12xlarge",
    ML_G5_16XLARGE: "ml.g5.16xlarge",
    ML_G5_24XLARGE: "ml.g5.24xlarge",
    ML_G5_2XLARGE: "ml.g5.2xlarge",
    ML_G5_48XLARGE: "ml.g5.48xlarge",
    ML_G5_4XLARGE: "ml.g5.4xlarge",
    ML_G5_8XLARGE: "ml.g5.8xlarge",
    ML_G5_XLARGE: "ml.g5.xlarge",
    ML_G6E_12XLARGE: "ml.g6e.12xlarge",
    ML_G6E_16XLARGE: "ml.g6e.16xlarge",
    ML_G6E_24XLARGE: "ml.g6e.24xlarge",
    ML_G6E_2XLARGE: "ml.g6e.2xlarge",
    ML_G6E_48XLARGE: "ml.g6e.48xlarge",
    ML_G6E_4XLARGE: "ml.g6e.4xlarge",
    ML_G6E_8XLARGE: "ml.g6e.8xlarge",
    ML_G6E_XLARGE: "ml.g6e.xlarge",
    ML_G6_12XLARGE: "ml.g6.12xlarge",
    ML_G6_16XLARGE: "ml.g6.16xlarge",
    ML_G6_24XLARGE: "ml.g6.24xlarge",
    ML_G6_2XLARGE: "ml.g6.2xlarge",
    ML_G6_48XLARGE: "ml.g6.48xlarge",
    ML_G6_4XLARGE: "ml.g6.4xlarge",
    ML_G6_8XLARGE: "ml.g6.8xlarge",
    ML_G6_XLARGE: "ml.g6.xlarge",
    ML_INF1_24XLARGE: "ml.inf1.24xlarge",
    ML_INF1_2XLARGE: "ml.inf1.2xlarge",
    ML_INF1_6XLARGE: "ml.inf1.6xlarge",
    ML_INF1_XLARGE: "ml.inf1.xlarge",
    ML_INF2_24XLARGE: "ml.inf2.24xlarge",
    ML_INF2_48XLARGE: "ml.inf2.48xlarge",
    ML_INF2_8XLARGE: "ml.inf2.8xlarge",
    ML_INF2_XLARGE: "ml.inf2.xlarge",
    ML_M4_10XLARGE: "ml.m4.10xlarge",
    ML_M4_16XLARGE: "ml.m4.16xlarge",
    ML_M4_2XLARGE: "ml.m4.2xlarge",
    ML_M4_4XLARGE: "ml.m4.4xlarge",
    ML_M4_XLARGE: "ml.m4.xlarge",
    ML_M5D_12XLARGE: "ml.m5d.12xlarge",
    ML_M5D_24XLARGE: "ml.m5d.24xlarge",
    ML_M5D_2XLARGE: "ml.m5d.2xlarge",
    ML_M5D_4XLARGE: "ml.m5d.4xlarge",
    ML_M5D_LARGE: "ml.m5d.large",
    ML_M5D_XLARGE: "ml.m5d.xlarge",
    ML_M5_12XLARGE: "ml.m5.12xlarge",
    ML_M5_24XLARGE: "ml.m5.24xlarge",
    ML_M5_2XLARGE: "ml.m5.2xlarge",
    ML_M5_4XLARGE: "ml.m5.4xlarge",
    ML_M5_LARGE: "ml.m5.large",
    ML_M5_XLARGE: "ml.m5.xlarge",
    ML_M6GD_12XLARGE: "ml.m6gd.12xlarge",
    ML_M6GD_16XLARGE: "ml.m6gd.16xlarge",
    ML_M6GD_2XLARGE: "ml.m6gd.2xlarge",
    ML_M6GD_4XLARGE: "ml.m6gd.4xlarge",
    ML_M6GD_8XLARGE: "ml.m6gd.8xlarge",
    ML_M6GD_LARGE: "ml.m6gd.large",
    ML_M6GD_XLARGE: "ml.m6gd.xlarge",
    ML_M6G_12XLARGE: "ml.m6g.12xlarge",
    ML_M6G_16XLARGE: "ml.m6g.16xlarge",
    ML_M6G_2XLARGE: "ml.m6g.2xlarge",
    ML_M6G_4XLARGE: "ml.m6g.4xlarge",
    ML_M6G_8XLARGE: "ml.m6g.8xlarge",
    ML_M6G_LARGE: "ml.m6g.large",
    ML_M6G_XLARGE: "ml.m6g.xlarge",
    ML_M6I_12XLARGE: "ml.m6i.12xlarge",
    ML_M6I_16XLARGE: "ml.m6i.16xlarge",
    ML_M6I_24XLARGE: "ml.m6i.24xlarge",
    ML_M6I_2XLARGE: "ml.m6i.2xlarge",
    ML_M6I_32XLARGE: "ml.m6i.32xlarge",
    ML_M6I_4XLARGE: "ml.m6i.4xlarge",
    ML_M6I_8XLARGE: "ml.m6i.8xlarge",
    ML_M6I_LARGE: "ml.m6i.large",
    ML_M6I_XLARGE: "ml.m6i.xlarge",
    ML_M7I_12XLARGE: "ml.m7i.12xlarge",
    ML_M7I_16XLARGE: "ml.m7i.16xlarge",
    ML_M7I_24XLARGE: "ml.m7i.24xlarge",
    ML_M7I_2XLARGE: "ml.m7i.2xlarge",
    ML_M7I_48XLARGE: "ml.m7i.48xlarge",
    ML_M7I_4XLARGE: "ml.m7i.4xlarge",
    ML_M7I_8XLARGE: "ml.m7i.8xlarge",
    ML_M7I_LARGE: "ml.m7i.large",
    ML_M7I_XLARGE: "ml.m7i.xlarge",
    ML_M8G_12XLARGE: "ml.m8g.12xlarge",
    ML_M8G_16XLARGE: "ml.m8g.16xlarge",
    ML_M8G_24XLARGE: "ml.m8g.24xlarge",
    ML_M8G_2XLARGE: "ml.m8g.2xlarge",
    ML_M8G_48XLARGE: "ml.m8g.48xlarge",
    ML_M8G_4XLARGE: "ml.m8g.4xlarge",
    ML_M8G_8XLARGE: "ml.m8g.8xlarge",
    ML_M8G_LARGE: "ml.m8g.large",
    ML_M8G_MEDIUM: "ml.m8g.medium",
    ML_M8G_XLARGE: "ml.m8g.xlarge",
    ML_P2_16XLARGE: "ml.p2.16xlarge",
    ML_P2_8XLARGE: "ml.p2.8xlarge",
    ML_P2_XLARGE: "ml.p2.xlarge",
    ML_P3_16XLARGE: "ml.p3.16xlarge",
    ML_P3_2XLARGE: "ml.p3.2xlarge",
    ML_P3_8XLARGE: "ml.p3.8xlarge",
    ML_P4DE_24XLARGE: "ml.p4de.24xlarge",
    ML_P4D_24XLARGE: "ml.p4d.24xlarge",
    ML_P5EN_48XLARGE: "ml.p5en.48xlarge",
    ML_P5E_48XLARGE: "ml.p5e.48xlarge",
    ML_P5_48XLARGE: "ml.p5.48xlarge",
    ML_P5_4XLARGE: "ml.p5.4xlarge",
    ML_P6E_GB200_36XLARGE: "ml.p6e-gb200.36xlarge",
    ML_P6_B200_48XLARGE: "ml.p6-b200.48xlarge",
    ML_R5D_12XLARGE: "ml.r5d.12xlarge",
    ML_R5D_24XLARGE: "ml.r5d.24xlarge",
    ML_R5D_2XLARGE: "ml.r5d.2xlarge",
    ML_R5D_4XLARGE: "ml.r5d.4xlarge",
    ML_R5D_LARGE: "ml.r5d.large",
    ML_R5D_XLARGE: "ml.r5d.xlarge",
    ML_R5_12XLARGE: "ml.r5.12xlarge",
    ML_R5_24XLARGE: "ml.r5.24xlarge",
    ML_R5_2XLARGE: "ml.r5.2xlarge",
    ML_R5_4XLARGE: "ml.r5.4xlarge",
    ML_R5_LARGE: "ml.r5.large",
    ML_R5_XLARGE: "ml.r5.xlarge",
    ML_R6GD_12XLARGE: "ml.r6gd.12xlarge",
    ML_R6GD_16XLARGE: "ml.r6gd.16xlarge",
    ML_R6GD_2XLARGE: "ml.r6gd.2xlarge",
    ML_R6GD_4XLARGE: "ml.r6gd.4xlarge",
    ML_R6GD_8XLARGE: "ml.r6gd.8xlarge",
    ML_R6GD_LARGE: "ml.r6gd.large",
    ML_R6GD_XLARGE: "ml.r6gd.xlarge",
    ML_R6G_12XLARGE: "ml.r6g.12xlarge",
    ML_R6G_16XLARGE: "ml.r6g.16xlarge",
    ML_R6G_2XLARGE: "ml.r6g.2xlarge",
    ML_R6G_4XLARGE: "ml.r6g.4xlarge",
    ML_R6G_8XLARGE: "ml.r6g.8xlarge",
    ML_R6G_LARGE: "ml.r6g.large",
    ML_R6G_XLARGE: "ml.r6g.xlarge",
    ML_R6I_12XLARGE: "ml.r6i.12xlarge",
    ML_R6I_16XLARGE: "ml.r6i.16xlarge",
    ML_R6I_24XLARGE: "ml.r6i.24xlarge",
    ML_R6I_2XLARGE: "ml.r6i.2xlarge",
    ML_R6I_32XLARGE: "ml.r6i.32xlarge",
    ML_R6I_4XLARGE: "ml.r6i.4xlarge",
    ML_R6I_8XLARGE: "ml.r6i.8xlarge",
    ML_R6I_LARGE: "ml.r6i.large",
    ML_R6I_XLARGE: "ml.r6i.xlarge",
    ML_R7GD_12XLARGE: "ml.r7gd.12xlarge",
    ML_R7GD_16XLARGE: "ml.r7gd.16xlarge",
    ML_R7GD_2XLARGE: "ml.r7gd.2xlarge",
    ML_R7GD_4XLARGE: "ml.r7gd.4xlarge",
    ML_R7GD_8XLARGE: "ml.r7gd.8xlarge",
    ML_R7GD_LARGE: "ml.r7gd.large",
    ML_R7GD_MEDIUM: "ml.r7gd.medium",
    ML_R7GD_XLARGE: "ml.r7gd.xlarge",
    ML_R7I_12XLARGE: "ml.r7i.12xlarge",
    ML_R7I_16XLARGE: "ml.r7i.16xlarge",
    ML_R7I_24XLARGE: "ml.r7i.24xlarge",
    ML_R7I_2XLARGE: "ml.r7i.2xlarge",
    ML_R7I_48XLARGE: "ml.r7i.48xlarge",
    ML_R7I_4XLARGE: "ml.r7i.4xlarge",
    ML_R7I_8XLARGE: "ml.r7i.8xlarge",
    ML_R7I_LARGE: "ml.r7i.large",
    ML_R7I_XLARGE: "ml.r7i.xlarge",
    ML_R8G_12XLARGE: "ml.r8g.12xlarge",
    ML_R8G_16XLARGE: "ml.r8g.16xlarge",
    ML_R8G_24XLARGE: "ml.r8g.24xlarge",
    ML_R8G_2XLARGE: "ml.r8g.2xlarge",
    ML_R8G_48XLARGE: "ml.r8g.48xlarge",
    ML_R8G_4XLARGE: "ml.r8g.4xlarge",
    ML_R8G_8XLARGE: "ml.r8g.8xlarge",
    ML_R8G_LARGE: "ml.r8g.large",
    ML_R8G_MEDIUM: "ml.r8g.medium",
    ML_R8G_XLARGE: "ml.r8g.xlarge",
    ML_T2_2XLARGE: "ml.t2.2xlarge",
    ML_T2_LARGE: "ml.t2.large",
    ML_T2_MEDIUM: "ml.t2.medium",
    ML_T2_XLARGE: "ml.t2.xlarge",
    ML_TRN1N_32XLARGE: "ml.trn1n.32xlarge",
    ML_TRN1_2XLARGE: "ml.trn1.2xlarge",
    ML_TRN1_32XLARGE: "ml.trn1.32xlarge",
    ML_TRN2_48XLARGE: "ml.trn2.48xlarge",
};
const TransformInstanceType = {
    ML_C4_2XLARGE: "ml.c4.2xlarge",
    ML_C4_4XLARGE: "ml.c4.4xlarge",
    ML_C4_8XLARGE: "ml.c4.8xlarge",
    ML_C4_XLARGE: "ml.c4.xlarge",
    ML_C5_18XLARGE: "ml.c5.18xlarge",
    ML_C5_2XLARGE: "ml.c5.2xlarge",
    ML_C5_4XLARGE: "ml.c5.4xlarge",
    ML_C5_9XLARGE: "ml.c5.9xlarge",
    ML_C5_XLARGE: "ml.c5.xlarge",
    ML_C6I_12XLARGE: "ml.c6i.12xlarge",
    ML_C6I_16XLARGE: "ml.c6i.16xlarge",
    ML_C6I_24XLARGE: "ml.c6i.24xlarge",
    ML_C6I_2XLARGE: "ml.c6i.2xlarge",
    ML_C6I_32XLARGE: "ml.c6i.32xlarge",
    ML_C6I_4XLARGE: "ml.c6i.4xlarge",
    ML_C6I_8XLARGE: "ml.c6i.8xlarge",
    ML_C6I_LARGE: "ml.c6i.large",
    ML_C6I_XLARGE: "ml.c6i.xlarge",
    ML_C7I_12XLARGE: "ml.c7i.12xlarge",
    ML_C7I_16XLARGE: "ml.c7i.16xlarge",
    ML_C7I_24XLARGE: "ml.c7i.24xlarge",
    ML_C7I_2XLARGE: "ml.c7i.2xlarge",
    ML_C7I_48XLARGE: "ml.c7i.48xlarge",
    ML_C7I_4XLARGE: "ml.c7i.4xlarge",
    ML_C7I_8XLARGE: "ml.c7i.8xlarge",
    ML_C7I_LARGE: "ml.c7i.large",
    ML_C7I_XLARGE: "ml.c7i.xlarge",
    ML_G4DN_12XLARGE: "ml.g4dn.12xlarge",
    ML_G4DN_16XLARGE: "ml.g4dn.16xlarge",
    ML_G4DN_2XLARGE: "ml.g4dn.2xlarge",
    ML_G4DN_4XLARGE: "ml.g4dn.4xlarge",
    ML_G4DN_8XLARGE: "ml.g4dn.8xlarge",
    ML_G4DN_XLARGE: "ml.g4dn.xlarge",
    ML_G5_12XLARGE: "ml.g5.12xlarge",
    ML_G5_16XLARGE: "ml.g5.16xlarge",
    ML_G5_24XLARGE: "ml.g5.24xlarge",
    ML_G5_2XLARGE: "ml.g5.2xlarge",
    ML_G5_48XLARGE: "ml.g5.48xlarge",
    ML_G5_4XLARGE: "ml.g5.4xlarge",
    ML_G5_8XLARGE: "ml.g5.8xlarge",
    ML_G5_XLARGE: "ml.g5.xlarge",
    ML_INF2_24XLARGE: "ml.inf2.24xlarge",
    ML_INF2_48XLARGE: "ml.inf2.48xlarge",
    ML_INF2_8XLARGE: "ml.inf2.8xlarge",
    ML_INF2_XLARGE: "ml.inf2.xlarge",
    ML_M4_10XLARGE: "ml.m4.10xlarge",
    ML_M4_16XLARGE: "ml.m4.16xlarge",
    ML_M4_2XLARGE: "ml.m4.2xlarge",
    ML_M4_4XLARGE: "ml.m4.4xlarge",
    ML_M4_XLARGE: "ml.m4.xlarge",
    ML_M5_12XLARGE: "ml.m5.12xlarge",
    ML_M5_24XLARGE: "ml.m5.24xlarge",
    ML_M5_2XLARGE: "ml.m5.2xlarge",
    ML_M5_4XLARGE: "ml.m5.4xlarge",
    ML_M5_LARGE: "ml.m5.large",
    ML_M5_XLARGE: "ml.m5.xlarge",
    ML_M6I_12XLARGE: "ml.m6i.12xlarge",
    ML_M6I_16XLARGE: "ml.m6i.16xlarge",
    ML_M6I_24XLARGE: "ml.m6i.24xlarge",
    ML_M6I_2XLARGE: "ml.m6i.2xlarge",
    ML_M6I_32XLARGE: "ml.m6i.32xlarge",
    ML_M6I_4XLARGE: "ml.m6i.4xlarge",
    ML_M6I_8XLARGE: "ml.m6i.8xlarge",
    ML_M6I_LARGE: "ml.m6i.large",
    ML_M6I_XLARGE: "ml.m6i.xlarge",
    ML_M7I_12XLARGE: "ml.m7i.12xlarge",
    ML_M7I_16XLARGE: "ml.m7i.16xlarge",
    ML_M7I_24XLARGE: "ml.m7i.24xlarge",
    ML_M7I_2XLARGE: "ml.m7i.2xlarge",
    ML_M7I_48XLARGE: "ml.m7i.48xlarge",
    ML_M7I_4XLARGE: "ml.m7i.4xlarge",
    ML_M7I_8XLARGE: "ml.m7i.8xlarge",
    ML_M7I_LARGE: "ml.m7i.large",
    ML_M7I_XLARGE: "ml.m7i.xlarge",
    ML_P2_16XLARGE: "ml.p2.16xlarge",
    ML_P2_8XLARGE: "ml.p2.8xlarge",
    ML_P2_XLARGE: "ml.p2.xlarge",
    ML_P3_16XLARGE: "ml.p3.16xlarge",
    ML_P3_2XLARGE: "ml.p3.2xlarge",
    ML_P3_8XLARGE: "ml.p3.8xlarge",
    ML_R6I_12XLARGE: "ml.r6i.12xlarge",
    ML_R6I_16XLARGE: "ml.r6i.16xlarge",
    ML_R6I_24XLARGE: "ml.r6i.24xlarge",
    ML_R6I_2XLARGE: "ml.r6i.2xlarge",
    ML_R6I_32XLARGE: "ml.r6i.32xlarge",
    ML_R6I_4XLARGE: "ml.r6i.4xlarge",
    ML_R6I_8XLARGE: "ml.r6i.8xlarge",
    ML_R6I_LARGE: "ml.r6i.large",
    ML_R6I_XLARGE: "ml.r6i.xlarge",
    ML_R7I_12XLARGE: "ml.r7i.12xlarge",
    ML_R7I_16XLARGE: "ml.r7i.16xlarge",
    ML_R7I_24XLARGE: "ml.r7i.24xlarge",
    ML_R7I_2XLARGE: "ml.r7i.2xlarge",
    ML_R7I_48XLARGE: "ml.r7i.48xlarge",
    ML_R7I_4XLARGE: "ml.r7i.4xlarge",
    ML_R7I_8XLARGE: "ml.r7i.8xlarge",
    ML_R7I_LARGE: "ml.r7i.large",
    ML_R7I_XLARGE: "ml.r7i.xlarge",
    ML_TRN1_2XLARGE: "ml.trn1.2xlarge",
    ML_TRN1_32XLARGE: "ml.trn1.32xlarge",
};
const AggregationTransformationValue = {
    Avg: "avg",
    First: "first",
    Max: "max",
    Min: "min",
    Sum: "sum",
};
const AlgorithmSortBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
};
const TrainingRepositoryAccessMode = {
    PLATFORM: "Platform",
    VPC: "Vpc",
};
const TrainingInputMode = {
    FASTFILE: "FastFile",
    FILE: "File",
    PIPE: "Pipe",
};
const AlgorithmStatus = {
    COMPLETED: "Completed",
    DELETING: "Deleting",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    PENDING: "Pending",
};
const DetailedAlgorithmStatus = {
    COMPLETED: "Completed",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    NOT_STARTED: "NotStarted",
};
const FileSystemAccessMode = {
    RO: "ro",
    RW: "rw",
};
const FileSystemType = {
    EFS: "EFS",
    FSXLUSTRE: "FSxLustre",
};
const S3DataDistribution = {
    FULLY_REPLICATED: "FullyReplicated",
    SHARDED_BY_S3_KEY: "ShardedByS3Key",
};
const S3DataType = {
    AUGMENTED_MANIFEST_FILE: "AugmentedManifestFile",
    CONVERSE: "Converse",
    MANIFEST_FILE: "ManifestFile",
    S3_PREFIX: "S3Prefix",
};
const RecordWrapper = {
    NONE: "None",
    RECORDIO: "RecordIO",
};
const OutputCompressionType = {
    GZIP: "GZIP",
    NONE: "NONE",
};
const TrainingInstanceType = {
    ML_C4_2XLARGE: "ml.c4.2xlarge",
    ML_C4_4XLARGE: "ml.c4.4xlarge",
    ML_C4_8XLARGE: "ml.c4.8xlarge",
    ML_C4_XLARGE: "ml.c4.xlarge",
    ML_C5N_18XLARGE: "ml.c5n.18xlarge",
    ML_C5N_2XLARGE: "ml.c5n.2xlarge",
    ML_C5N_4XLARGE: "ml.c5n.4xlarge",
    ML_C5N_9XLARGE: "ml.c5n.9xlarge",
    ML_C5N_XLARGE: "ml.c5n.xlarge",
    ML_C5_18XLARGE: "ml.c5.18xlarge",
    ML_C5_2XLARGE: "ml.c5.2xlarge",
    ML_C5_4XLARGE: "ml.c5.4xlarge",
    ML_C5_9XLARGE: "ml.c5.9xlarge",
    ML_C5_XLARGE: "ml.c5.xlarge",
    ML_C6I_12XLARGE: "ml.c6i.12xlarge",
    ML_C6I_16XLARGE: "ml.c6i.16xlarge",
    ML_C6I_24XLARGE: "ml.c6i.24xlarge",
    ML_C6I_2XLARGE: "ml.c6i.2xlarge",
    ML_C6I_32XLARGE: "ml.c6i.32xlarge",
    ML_C6I_4XLARGE: "ml.c6i.4xlarge",
    ML_C6I_8XLARGE: "ml.c6i.8xlarge",
    ML_C6I_XLARGE: "ml.c6i.xlarge",
    ML_C7I_12XLARGE: "ml.c7i.12xlarge",
    ML_C7I_16XLARGE: "ml.c7i.16xlarge",
    ML_C7I_24XLARGE: "ml.c7i.24xlarge",
    ML_C7I_2XLARGE: "ml.c7i.2xlarge",
    ML_C7I_48XLARGE: "ml.c7i.48xlarge",
    ML_C7I_4XLARGE: "ml.c7i.4xlarge",
    ML_C7I_8XLARGE: "ml.c7i.8xlarge",
    ML_C7I_LARGE: "ml.c7i.large",
    ML_C7I_XLARGE: "ml.c7i.xlarge",
    ML_G4DN_12XLARGE: "ml.g4dn.12xlarge",
    ML_G4DN_16XLARGE: "ml.g4dn.16xlarge",
    ML_G4DN_2XLARGE: "ml.g4dn.2xlarge",
    ML_G4DN_4XLARGE: "ml.g4dn.4xlarge",
    ML_G4DN_8XLARGE: "ml.g4dn.8xlarge",
    ML_G4DN_XLARGE: "ml.g4dn.xlarge",
    ML_G5_12XLARGE: "ml.g5.12xlarge",
    ML_G5_16XLARGE: "ml.g5.16xlarge",
    ML_G5_24XLARGE: "ml.g5.24xlarge",
    ML_G5_2XLARGE: "ml.g5.2xlarge",
    ML_G5_48XLARGE: "ml.g5.48xlarge",
    ML_G5_4XLARGE: "ml.g5.4xlarge",
    ML_G5_8XLARGE: "ml.g5.8xlarge",
    ML_G5_XLARGE: "ml.g5.xlarge",
    ML_G6E_12XLARGE: "ml.g6e.12xlarge",
    ML_G6E_16XLARGE: "ml.g6e.16xlarge",
    ML_G6E_24XLARGE: "ml.g6e.24xlarge",
    ML_G6E_2XLARGE: "ml.g6e.2xlarge",
    ML_G6E_48XLARGE: "ml.g6e.48xlarge",
    ML_G6E_4XLARGE: "ml.g6e.4xlarge",
    ML_G6E_8XLARGE: "ml.g6e.8xlarge",
    ML_G6E_XLARGE: "ml.g6e.xlarge",
    ML_G6_12XLARGE: "ml.g6.12xlarge",
    ML_G6_16XLARGE: "ml.g6.16xlarge",
    ML_G6_24XLARGE: "ml.g6.24xlarge",
    ML_G6_2XLARGE: "ml.g6.2xlarge",
    ML_G6_48XLARGE: "ml.g6.48xlarge",
    ML_G6_4XLARGE: "ml.g6.4xlarge",
    ML_G6_8XLARGE: "ml.g6.8xlarge",
    ML_G6_XLARGE: "ml.g6.xlarge",
    ML_M4_10XLARGE: "ml.m4.10xlarge",
    ML_M4_16XLARGE: "ml.m4.16xlarge",
    ML_M4_2XLARGE: "ml.m4.2xlarge",
    ML_M4_4XLARGE: "ml.m4.4xlarge",
    ML_M4_XLARGE: "ml.m4.xlarge",
    ML_M5_12XLARGE: "ml.m5.12xlarge",
    ML_M5_24XLARGE: "ml.m5.24xlarge",
    ML_M5_2XLARGE: "ml.m5.2xlarge",
    ML_M5_4XLARGE: "ml.m5.4xlarge",
    ML_M5_LARGE: "ml.m5.large",
    ML_M5_XLARGE: "ml.m5.xlarge",
    ML_M6I_12XLARGE: "ml.m6i.12xlarge",
    ML_M6I_16XLARGE: "ml.m6i.16xlarge",
    ML_M6I_24XLARGE: "ml.m6i.24xlarge",
    ML_M6I_2XLARGE: "ml.m6i.2xlarge",
    ML_M6I_32XLARGE: "ml.m6i.32xlarge",
    ML_M6I_4XLARGE: "ml.m6i.4xlarge",
    ML_M6I_8XLARGE: "ml.m6i.8xlarge",
    ML_M6I_LARGE: "ml.m6i.large",
    ML_M6I_XLARGE: "ml.m6i.xlarge",
    ML_M7I_12XLARGE: "ml.m7i.12xlarge",
    ML_M7I_16XLARGE: "ml.m7i.16xlarge",
    ML_M7I_24XLARGE: "ml.m7i.24xlarge",
    ML_M7I_2XLARGE: "ml.m7i.2xlarge",
    ML_M7I_48XLARGE: "ml.m7i.48xlarge",
    ML_M7I_4XLARGE: "ml.m7i.4xlarge",
    ML_M7I_8XLARGE: "ml.m7i.8xlarge",
    ML_M7I_LARGE: "ml.m7i.large",
    ML_M7I_XLARGE: "ml.m7i.xlarge",
    ML_P2_16XLARGE: "ml.p2.16xlarge",
    ML_P2_8XLARGE: "ml.p2.8xlarge",
    ML_P2_XLARGE: "ml.p2.xlarge",
    ML_P3DN_24XLARGE: "ml.p3dn.24xlarge",
    ML_P3_16XLARGE: "ml.p3.16xlarge",
    ML_P3_2XLARGE: "ml.p3.2xlarge",
    ML_P3_8XLARGE: "ml.p3.8xlarge",
    ML_P4DE_24XLARGE: "ml.p4de.24xlarge",
    ML_P4D_24XLARGE: "ml.p4d.24xlarge",
    ML_P5EN_48XLARGE: "ml.p5en.48xlarge",
    ML_P5E_48XLARGE: "ml.p5e.48xlarge",
    ML_P5_48XLARGE: "ml.p5.48xlarge",
    ML_P5_4XLARGE: "ml.p5.4xlarge",
    ML_P6E_GB200_36XLARGE: "ml.p6e-gb200.36xlarge",
    ML_P6_B200_48XLARGE: "ml.p6-b200.48xlarge",
    ML_R5D_12XLARGE: "ml.r5d.12xlarge",
    ML_R5D_16XLARGE: "ml.r5d.16xlarge",
    ML_R5D_24XLARGE: "ml.r5d.24xlarge",
    ML_R5D_2XLARGE: "ml.r5d.2xlarge",
    ML_R5D_4XLARGE: "ml.r5d.4xlarge",
    ML_R5D_8XLARGE: "ml.r5d.8xlarge",
    ML_R5D_LARGE: "ml.r5d.large",
    ML_R5D_XLARGE: "ml.r5d.xlarge",
    ML_R5_12XLARGE: "ml.r5.12xlarge",
    ML_R5_16XLARGE: "ml.r5.16xlarge",
    ML_R5_24XLARGE: "ml.r5.24xlarge",
    ML_R5_2XLARGE: "ml.r5.2xlarge",
    ML_R5_4XLARGE: "ml.r5.4xlarge",
    ML_R5_8XLARGE: "ml.r5.8xlarge",
    ML_R5_LARGE: "ml.r5.large",
    ML_R5_XLARGE: "ml.r5.xlarge",
    ML_R7I_12XLARGE: "ml.r7i.12xlarge",
    ML_R7I_16XLARGE: "ml.r7i.16xlarge",
    ML_R7I_24XLARGE: "ml.r7i.24xlarge",
    ML_R7I_2XLARGE: "ml.r7i.2xlarge",
    ML_R7I_48XLARGE: "ml.r7i.48xlarge",
    ML_R7I_4XLARGE: "ml.r7i.4xlarge",
    ML_R7I_8XLARGE: "ml.r7i.8xlarge",
    ML_R7I_LARGE: "ml.r7i.large",
    ML_R7I_XLARGE: "ml.r7i.xlarge",
    ML_T3_2XLARGE: "ml.t3.2xlarge",
    ML_T3_LARGE: "ml.t3.large",
    ML_T3_MEDIUM: "ml.t3.medium",
    ML_T3_XLARGE: "ml.t3.xlarge",
    ML_TRN1N_32XLARGE: "ml.trn1n.32xlarge",
    ML_TRN1_2XLARGE: "ml.trn1.2xlarge",
    ML_TRN1_32XLARGE: "ml.trn1.32xlarge",
    ML_TRN2_48XLARGE: "ml.trn2.48xlarge",
};
const BatchStrategy = {
    MULTI_RECORD: "MultiRecord",
    SINGLE_RECORD: "SingleRecord",
};
const SplitType = {
    LINE: "Line",
    NONE: "None",
    RECORDIO: "RecordIO",
    TFRECORD: "TFRecord",
};
const AssemblyType = {
    LINE: "Line",
    NONE: "None",
};
const FeatureStatus = {
    Disabled: "DISABLED",
    Enabled: "ENABLED",
};
const AppType = {
    Canvas: "Canvas",
    CodeEditor: "CodeEditor",
    DetailedProfiler: "DetailedProfiler",
    JupyterLab: "JupyterLab",
    JupyterServer: "JupyterServer",
    KernelGateway: "KernelGateway",
    RSessionGateway: "RSessionGateway",
    RStudioServerPro: "RStudioServerPro",
    TensorBoard: "TensorBoard",
};
const AppInstanceType = {
    ML_C5_12XLARGE: "ml.c5.12xlarge",
    ML_C5_18XLARGE: "ml.c5.18xlarge",
    ML_C5_24XLARGE: "ml.c5.24xlarge",
    ML_C5_2XLARGE: "ml.c5.2xlarge",
    ML_C5_4XLARGE: "ml.c5.4xlarge",
    ML_C5_9XLARGE: "ml.c5.9xlarge",
    ML_C5_LARGE: "ml.c5.large",
    ML_C5_XLARGE: "ml.c5.xlarge",
    ML_C6ID_12XLARGE: "ml.c6id.12xlarge",
    ML_C6ID_16XLARGE: "ml.c6id.16xlarge",
    ML_C6ID_24XLARGE: "ml.c6id.24xlarge",
    ML_C6ID_2XLARGE: "ml.c6id.2xlarge",
    ML_C6ID_32XLARGE: "ml.c6id.32xlarge",
    ML_C6ID_4XLARGE: "ml.c6id.4xlarge",
    ML_C6ID_8XLARGE: "ml.c6id.8xlarge",
    ML_C6ID_LARGE: "ml.c6id.large",
    ML_C6ID_XLARGE: "ml.c6id.xlarge",
    ML_C6I_12XLARGE: "ml.c6i.12xlarge",
    ML_C6I_16XLARGE: "ml.c6i.16xlarge",
    ML_C6I_24XLARGE: "ml.c6i.24xlarge",
    ML_C6I_2XLARGE: "ml.c6i.2xlarge",
    ML_C6I_32XLARGE: "ml.c6i.32xlarge",
    ML_C6I_4XLARGE: "ml.c6i.4xlarge",
    ML_C6I_8XLARGE: "ml.c6i.8xlarge",
    ML_C6I_LARGE: "ml.c6i.large",
    ML_C6I_XLARGE: "ml.c6i.xlarge",
    ML_C7I_12XLARGE: "ml.c7i.12xlarge",
    ML_C7I_16XLARGE: "ml.c7i.16xlarge",
    ML_C7I_24XLARGE: "ml.c7i.24xlarge",
    ML_C7I_2XLARGE: "ml.c7i.2xlarge",
    ML_C7I_48XLARGE: "ml.c7i.48xlarge",
    ML_C7I_4XLARGE: "ml.c7i.4xlarge",
    ML_C7I_8XLARGE: "ml.c7i.8xlarge",
    ML_C7I_LARGE: "ml.c7i.large",
    ML_C7I_XLARGE: "ml.c7i.xlarge",
    ML_G4DN_12XLARGE: "ml.g4dn.12xlarge",
    ML_G4DN_16XLARGE: "ml.g4dn.16xlarge",
    ML_G4DN_2XLARGE: "ml.g4dn.2xlarge",
    ML_G4DN_4XLARGE: "ml.g4dn.4xlarge",
    ML_G4DN_8XLARGE: "ml.g4dn.8xlarge",
    ML_G4DN_XLARGE: "ml.g4dn.xlarge",
    ML_G5_12XLARGE: "ml.g5.12xlarge",
    ML_G5_16XLARGE: "ml.g5.16xlarge",
    ML_G5_24XLARGE: "ml.g5.24xlarge",
    ML_G5_2XLARGE: "ml.g5.2xlarge",
    ML_G5_48XLARGE: "ml.g5.48xlarge",
    ML_G5_4XLARGE: "ml.g5.4xlarge",
    ML_G5_8XLARGE: "ml.g5.8xlarge",
    ML_G5_XLARGE: "ml.g5.xlarge",
    ML_G6E_12XLARGE: "ml.g6e.12xlarge",
    ML_G6E_16XLARGE: "ml.g6e.16xlarge",
    ML_G6E_24XLARGE: "ml.g6e.24xlarge",
    ML_G6E_2XLARGE: "ml.g6e.2xlarge",
    ML_G6E_48XLARGE: "ml.g6e.48xlarge",
    ML_G6E_4XLARGE: "ml.g6e.4xlarge",
    ML_G6E_8XLARGE: "ml.g6e.8xlarge",
    ML_G6E_XLARGE: "ml.g6e.xlarge",
    ML_G6_12XLARGE: "ml.g6.12xlarge",
    ML_G6_16XLARGE: "ml.g6.16xlarge",
    ML_G6_24XLARGE: "ml.g6.24xlarge",
    ML_G6_2XLARGE: "ml.g6.2xlarge",
    ML_G6_48XLARGE: "ml.g6.48xlarge",
    ML_G6_4XLARGE: "ml.g6.4xlarge",
    ML_G6_8XLARGE: "ml.g6.8xlarge",
    ML_G6_XLARGE: "ml.g6.xlarge",
    ML_GEOSPATIAL_INTERACTIVE: "ml.geospatial.interactive",
    ML_M5D_12XLARGE: "ml.m5d.12xlarge",
    ML_M5D_16XLARGE: "ml.m5d.16xlarge",
    ML_M5D_24XLARGE: "ml.m5d.24xlarge",
    ML_M5D_2XLARGE: "ml.m5d.2xlarge",
    ML_M5D_4XLARGE: "ml.m5d.4xlarge",
    ML_M5D_8XLARGE: "ml.m5d.8xlarge",
    ML_M5D_LARGE: "ml.m5d.large",
    ML_M5D_XLARGE: "ml.m5d.xlarge",
    ML_M5_12XLARGE: "ml.m5.12xlarge",
    ML_M5_16XLARGE: "ml.m5.16xlarge",
    ML_M5_24XLARGE: "ml.m5.24xlarge",
    ML_M5_2XLARGE: "ml.m5.2xlarge",
    ML_M5_4XLARGE: "ml.m5.4xlarge",
    ML_M5_8XLARGE: "ml.m5.8xlarge",
    ML_M5_LARGE: "ml.m5.large",
    ML_M5_XLARGE: "ml.m5.xlarge",
    ML_M6ID_12XLARGE: "ml.m6id.12xlarge",
    ML_M6ID_16XLARGE: "ml.m6id.16xlarge",
    ML_M6ID_24XLARGE: "ml.m6id.24xlarge",
    ML_M6ID_2XLARGE: "ml.m6id.2xlarge",
    ML_M6ID_32XLARGE: "ml.m6id.32xlarge",
    ML_M6ID_4XLARGE: "ml.m6id.4xlarge",
    ML_M6ID_8XLARGE: "ml.m6id.8xlarge",
    ML_M6ID_LARGE: "ml.m6id.large",
    ML_M6ID_XLARGE: "ml.m6id.xlarge",
    ML_M6I_12XLARGE: "ml.m6i.12xlarge",
    ML_M6I_16XLARGE: "ml.m6i.16xlarge",
    ML_M6I_24XLARGE: "ml.m6i.24xlarge",
    ML_M6I_2XLARGE: "ml.m6i.2xlarge",
    ML_M6I_32XLARGE: "ml.m6i.32xlarge",
    ML_M6I_4XLARGE: "ml.m6i.4xlarge",
    ML_M6I_8XLARGE: "ml.m6i.8xlarge",
    ML_M6I_LARGE: "ml.m6i.large",
    ML_M6I_XLARGE: "ml.m6i.xlarge",
    ML_M7I_12XLARGE: "ml.m7i.12xlarge",
    ML_M7I_16XLARGE: "ml.m7i.16xlarge",
    ML_M7I_24XLARGE: "ml.m7i.24xlarge",
    ML_M7I_2XLARGE: "ml.m7i.2xlarge",
    ML_M7I_48XLARGE: "ml.m7i.48xlarge",
    ML_M7I_4XLARGE: "ml.m7i.4xlarge",
    ML_M7I_8XLARGE: "ml.m7i.8xlarge",
    ML_M7I_LARGE: "ml.m7i.large",
    ML_M7I_XLARGE: "ml.m7i.xlarge",
    ML_P3DN_24XLARGE: "ml.p3dn.24xlarge",
    ML_P3_16XLARGE: "ml.p3.16xlarge",
    ML_P3_2XLARGE: "ml.p3.2xlarge",
    ML_P3_8XLARGE: "ml.p3.8xlarge",
    ML_P4DE_24XLARGE: "ml.p4de.24xlarge",
    ML_P4D_24XLARGE: "ml.p4d.24xlarge",
    ML_P5EN_48XLARGE: "ml.p5en.48xlarge",
    ML_P5_48XLARGE: "ml.p5.48xlarge",
    ML_P6_B200_48XLARGE: "ml.p6-b200.48xlarge",
    ML_R5_12XLARGE: "ml.r5.12xlarge",
    ML_R5_16XLARGE: "ml.r5.16xlarge",
    ML_R5_24XLARGE: "ml.r5.24xlarge",
    ML_R5_2XLARGE: "ml.r5.2xlarge",
    ML_R5_4XLARGE: "ml.r5.4xlarge",
    ML_R5_8XLARGE: "ml.r5.8xlarge",
    ML_R5_LARGE: "ml.r5.large",
    ML_R5_XLARGE: "ml.r5.xlarge",
    ML_R6ID_12XLARGE: "ml.r6id.12xlarge",
    ML_R6ID_16XLARGE: "ml.r6id.16xlarge",
    ML_R6ID_24XLARGE: "ml.r6id.24xlarge",
    ML_R6ID_2XLARGE: "ml.r6id.2xlarge",
    ML_R6ID_32XLARGE: "ml.r6id.32xlarge",
    ML_R6ID_4XLARGE: "ml.r6id.4xlarge",
    ML_R6ID_8XLARGE: "ml.r6id.8xlarge",
    ML_R6ID_LARGE: "ml.r6id.large",
    ML_R6ID_XLARGE: "ml.r6id.xlarge",
    ML_R6I_12XLARGE: "ml.r6i.12xlarge",
    ML_R6I_16XLARGE: "ml.r6i.16xlarge",
    ML_R6I_24XLARGE: "ml.r6i.24xlarge",
    ML_R6I_2XLARGE: "ml.r6i.2xlarge",
    ML_R6I_32XLARGE: "ml.r6i.32xlarge",
    ML_R6I_4XLARGE: "ml.r6i.4xlarge",
    ML_R6I_8XLARGE: "ml.r6i.8xlarge",
    ML_R6I_LARGE: "ml.r6i.large",
    ML_R6I_XLARGE: "ml.r6i.xlarge",
    ML_R7I_12XLARGE: "ml.r7i.12xlarge",
    ML_R7I_16XLARGE: "ml.r7i.16xlarge",
    ML_R7I_24XLARGE: "ml.r7i.24xlarge",
    ML_R7I_2XLARGE: "ml.r7i.2xlarge",
    ML_R7I_48XLARGE: "ml.r7i.48xlarge",
    ML_R7I_4XLARGE: "ml.r7i.4xlarge",
    ML_R7I_8XLARGE: "ml.r7i.8xlarge",
    ML_R7I_LARGE: "ml.r7i.large",
    ML_R7I_XLARGE: "ml.r7i.xlarge",
    ML_T3_2XLARGE: "ml.t3.2xlarge",
    ML_T3_LARGE: "ml.t3.large",
    ML_T3_MEDIUM: "ml.t3.medium",
    ML_T3_MICRO: "ml.t3.micro",
    ML_T3_SMALL: "ml.t3.small",
    ML_T3_XLARGE: "ml.t3.xlarge",
    ML_TRN1N_32XLARGE: "ml.trn1n.32xlarge",
    ML_TRN1_2XLARGE: "ml.trn1.2xlarge",
    ML_TRN1_32XLARGE: "ml.trn1.32xlarge",
    SYSTEM: "system",
};
const AppStatus = {
    Deleted: "Deleted",
    Deleting: "Deleting",
    Failed: "Failed",
    InService: "InService",
    Pending: "Pending",
};
const AppImageConfigSortKey = {
    CreationTime: "CreationTime",
    LastModifiedTime: "LastModifiedTime",
    Name: "Name",
};
const LifecycleManagement = {
    Disabled: "DISABLED",
    Enabled: "ENABLED",
};
const AppNetworkAccessType = {
    PublicInternetOnly: "PublicInternetOnly",
    VpcOnly: "VpcOnly",
};
const AppSecurityGroupManagement = {
    Customer: "Customer",
    Service: "Service",
};
const AppSortKey = {
    CreationTime: "CreationTime",
};
const ArtifactSourceIdType = {
    CUSTOM: "Custom",
    MD5_HASH: "MD5Hash",
    S3_ETAG: "S3ETag",
    S3_VERSION: "S3Version",
};
const AsyncNotificationTopicTypes = {
    ERROR_NOTIFICATION_TOPIC: "ERROR_NOTIFICATION_TOPIC",
    SUCCESS_NOTIFICATION_TOPIC: "SUCCESS_NOTIFICATION_TOPIC",
};
const AthenaResultCompressionType = {
    GZIP: "GZIP",
    SNAPPY: "SNAPPY",
    ZLIB: "ZLIB",
};
const AthenaResultFormat = {
    AVRO: "AVRO",
    JSON: "JSON",
    ORC: "ORC",
    PARQUET: "PARQUET",
    TEXTFILE: "TEXTFILE",
};
const VolumeAttachmentStatus = {
    ATTACHED: "attached",
    ATTACHING: "attaching",
    BUSY: "busy",
    DETACHED: "detached",
    DETACHING: "detaching",
};
const AuthMode = {
    IAM: "IAM",
    SSO: "SSO",
};
const AutoMLAlgorithm = {
    ARIMA: "arima",
    CATBOOST: "catboost",
    CNN_QR: "cnn-qr",
    DEEPAR: "deepar",
    ETS: "ets",
    EXTRA_TREES: "extra-trees",
    FASTAI: "fastai",
    LIGHTGBM: "lightgbm",
    LINEAR_LEARNER: "linear-learner",
    MLP: "mlp",
    NN_TORCH: "nn-torch",
    NPTS: "npts",
    PROPHET: "prophet",
    RANDOMFOREST: "randomforest",
    XGBOOST: "xgboost",
};
const AutoMLMetricEnum = {
    ACCURACY: "Accuracy",
    AUC: "AUC",
    AVERAGE_WEIGHTED_QUANTILE_LOSS: "AverageWeightedQuantileLoss",
    BALANCED_ACCURACY: "BalancedAccuracy",
    F1: "F1",
    F1_MACRO: "F1macro",
    MAE: "MAE",
    MAPE: "MAPE",
    MASE: "MASE",
    MSE: "MSE",
    PRECISION: "Precision",
    PRECISION_MACRO: "PrecisionMacro",
    R2: "R2",
    RECALL: "Recall",
    RECALL_MACRO: "RecallMacro",
    RMSE: "RMSE",
    WAPE: "WAPE",
};
const MetricSetSource = {
    TEST: "Test",
    TRAIN: "Train",
    VALIDATION: "Validation",
};
const AutoMLMetricExtendedEnum = {
    ACCURACY: "Accuracy",
    AUC: "AUC",
    AVERAGE_WEIGHTED_QUANTILE_LOSS: "AverageWeightedQuantileLoss",
    BALANCED_ACCURACY: "BalancedAccuracy",
    F1: "F1",
    F1_MACRO: "F1macro",
    INFERENCE_LATENCY: "InferenceLatency",
    LogLoss: "LogLoss",
    MAE: "MAE",
    MAPE: "MAPE",
    MASE: "MASE",
    MSE: "MSE",
    PERPLEXITY: "Perplexity",
    PRECISION: "Precision",
    PRECISION_MACRO: "PrecisionMacro",
    R2: "R2",
    RECALL: "Recall",
    RECALL_MACRO: "RecallMacro",
    RMSE: "RMSE",
    ROUGE1: "Rouge1",
    ROUGE2: "Rouge2",
    ROUGEL: "RougeL",
    ROUGEL_SUM: "RougeLSum",
    TRAINING_LOSS: "TrainingLoss",
    VALIDATION_LOSS: "ValidationLoss",
    WAPE: "WAPE",
};
const CandidateStatus = {
    COMPLETED: "Completed",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
};
const CandidateStepType = {
    PROCESSING: "AWS::SageMaker::ProcessingJob",
    TRAINING: "AWS::SageMaker::TrainingJob",
    TRANSFORM: "AWS::SageMaker::TransformJob",
};
const AutoMLJobObjectiveType = {
    MAXIMIZE: "Maximize",
    MINIMIZE: "Minimize",
};
const AutoMLProcessingUnit = {
    CPU: "CPU",
    GPU: "GPU",
};
const ObjectiveStatus = {
    Failed: "Failed",
    Pending: "Pending",
    Succeeded: "Succeeded",
};
const AutoMLChannelType = {
    TRAINING: "training",
    VALIDATION: "validation",
};
const AutoMLS3DataType = {
    AUGMENTED_MANIFEST_FILE: "AugmentedManifestFile",
    MANIFEST_FILE: "ManifestFile",
    S3_PREFIX: "S3Prefix",
};
const AutoMLMode = {
    AUTO: "AUTO",
    ENSEMBLING: "ENSEMBLING",
    HYPERPARAMETER_TUNING: "HYPERPARAMETER_TUNING",
};
const AutoMLJobSecondaryStatus = {
    ANALYZING_DATA: "AnalyzingData",
    CANDIDATE_DEFINITIONS_GENERATED: "CandidateDefinitionsGenerated",
    COMPLETED: "Completed",
    DEPLOYING_MODEL: "DeployingModel",
    EXPLAINABILITY_ERROR: "ExplainabilityError",
    FAILED: "Failed",
    FEATURE_ENGINEERING: "FeatureEngineering",
    GENERATING_EXPLAINABILITY_REPORT: "GeneratingExplainabilityReport",
    GENERATING_MODEL_INSIGHTS_REPORT: "GeneratingModelInsightsReport",
    MAX_AUTO_ML_JOB_RUNTIME_REACHED: "MaxAutoMLJobRuntimeReached",
    MAX_CANDIDATES_REACHED: "MaxCandidatesReached",
    MODEL_DEPLOYMENT_ERROR: "ModelDeploymentError",
    MODEL_INSIGHTS_ERROR: "ModelInsightsError",
    MODEL_TUNING: "ModelTuning",
    PRE_TRAINING: "PreTraining",
    STARTING: "Starting",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
    TRAINING_MODELS: "TrainingModels",
};
const AutoMLJobStatus = {
    COMPLETED: "Completed",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
};
const ProblemType = {
    BINARY_CLASSIFICATION: "BinaryClassification",
    MULTICLASS_CLASSIFICATION: "MulticlassClassification",
    REGRESSION: "Regression",
};
const FillingType = {
    Backfill: "backfill",
    BackfillValue: "backfill_value",
    Frontfill: "frontfill",
    FrontfillValue: "frontfill_value",
    Futurefill: "futurefill",
    FuturefillValue: "futurefill_value",
    Middlefill: "middlefill",
    MiddlefillValue: "middlefill_value",
};
exports.AutoMLProblemTypeConfig = void 0;
(function (AutoMLProblemTypeConfig) {
    AutoMLProblemTypeConfig.visit = (value, visitor) => {
        if (value.ImageClassificationJobConfig !== undefined)
            return visitor.ImageClassificationJobConfig(value.ImageClassificationJobConfig);
        if (value.TextClassificationJobConfig !== undefined)
            return visitor.TextClassificationJobConfig(value.TextClassificationJobConfig);
        if (value.TimeSeriesForecastingJobConfig !== undefined)
            return visitor.TimeSeriesForecastingJobConfig(value.TimeSeriesForecastingJobConfig);
        if (value.TabularJobConfig !== undefined)
            return visitor.TabularJobConfig(value.TabularJobConfig);
        if (value.TextGenerationJobConfig !== undefined)
            return visitor.TextGenerationJobConfig(value.TextGenerationJobConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.AutoMLProblemTypeConfig || (exports.AutoMLProblemTypeConfig = {}));
const AutoMLProblemTypeConfigName = {
    IMAGE_CLASSIFICATION: "ImageClassification",
    TABULAR: "Tabular",
    TEXT_CLASSIFICATION: "TextClassification",
    TEXT_GENERATION: "TextGeneration",
    TIMESERIES_FORECASTING: "TimeSeriesForecasting",
};
exports.AutoMLProblemTypeResolvedAttributes = void 0;
(function (AutoMLProblemTypeResolvedAttributes) {
    AutoMLProblemTypeResolvedAttributes.visit = (value, visitor) => {
        if (value.TabularResolvedAttributes !== undefined)
            return visitor.TabularResolvedAttributes(value.TabularResolvedAttributes);
        if (value.TextGenerationResolvedAttributes !== undefined)
            return visitor.TextGenerationResolvedAttributes(value.TextGenerationResolvedAttributes);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.AutoMLProblemTypeResolvedAttributes || (exports.AutoMLProblemTypeResolvedAttributes = {}));
const AutoMLSortBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
    STATUS: "Status",
};
const AutoMLSortOrder = {
    ASCENDING: "Ascending",
    DESCENDING: "Descending",
};
const AutoMountHomeEFS = {
    DEFAULT_AS_DOMAIN: "DefaultAsDomain",
    DISABLED: "Disabled",
    ENABLED: "Enabled",
};
const AutotuneMode = {
    ENABLED: "Enabled",
};
const AwsManagedHumanLoopRequestSource = {
    REKOGNITION_DETECT_MODERATION_LABELS_IMAGE_V3: "AWS/Rekognition/DetectModerationLabels/Image/V3",
    TEXTRACT_ANALYZE_DOCUMENT_FORMS_V1: "AWS/Textract/AnalyzeDocument/Forms/V1",
};
const BatchAddClusterNodesErrorCode = {
    INSTANCE_GROUP_NOT_FOUND: "InstanceGroupNotFound",
    INVALID_INSTANCE_GROUP_STATUS: "InvalidInstanceGroupStatus",
};
const ClusterInstanceStatus = {
    DEEP_HEALTH_CHECK_IN_PROGRESS: "DeepHealthCheckInProgress",
    FAILURE: "Failure",
    NOT_FOUND: "NotFound",
    PENDING: "Pending",
    RUNNING: "Running",
    SHUTTING_DOWN: "ShuttingDown",
    SYSTEM_UPDATING: "SystemUpdating",
};
const BatchDeleteClusterNodesErrorCode = {
    INVALID_NODE_STATUS: "InvalidNodeStatus",
    NODE_ID_IN_USE: "NodeIdInUse",
    NODE_ID_NOT_FOUND: "NodeIdNotFound",
};
const ModelApprovalStatus = {
    APPROVED: "Approved",
    PENDING_MANUAL_APPROVAL: "PendingManualApproval",
    REJECTED: "Rejected",
};
const ModelPackageStatus = {
    COMPLETED: "Completed",
    DELETING: "Deleting",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    PENDING: "Pending",
};
const ProcessingS3DataDistributionType = {
    FULLYREPLICATED: "FullyReplicated",
    SHARDEDBYS3KEY: "ShardedByS3Key",
};
const ProcessingS3InputMode = {
    FILE: "File",
    PIPE: "Pipe",
};
const CapacitySizeType = {
    CAPACITY_PERCENT: "CAPACITY_PERCENT",
    INSTANCE_COUNT: "INSTANCE_COUNT",
};
const TrafficRoutingConfigType = {
    ALL_AT_ONCE: "ALL_AT_ONCE",
    CANARY: "CANARY",
    LINEAR: "LINEAR",
};
const BooleanOperator = {
    AND: "And",
    OR: "Or",
};
const CandidateSortBy = {
    CreationTime: "CreationTime",
    FinalObjectiveMetricValue: "FinalObjectiveMetricValue",
    Status: "Status",
};
const DataSourceName = {
    SalesforceGenie: "SalesforceGenie",
    Snowflake: "Snowflake",
};
const CapacityReservationType = {
    CRG: "CRG",
    ODCR: "ODCR",
};
const CapacityReservationPreference = {
    CAPACITY_RESERVATIONS_ONLY: "capacity-reservations-only",
};
const NodeUnavailabilityType = {
    CAPACITY_PERCENTAGE: "CAPACITY_PERCENTAGE",
    INSTANCE_COUNT: "INSTANCE_COUNT",
};
const CaptureMode = {
    INPUT: "Input",
    INPUT_AND_OUTPUT: "InputAndOutput",
    OUTPUT: "Output",
};
const CaptureStatus = {
    STARTED: "Started",
    STOPPED: "Stopped",
};
const ClarifyFeatureType = {
    CATEGORICAL: "categorical",
    NUMERICAL: "numerical",
    TEXT: "text",
};
const ClarifyTextGranularity = {
    PARAGRAPH: "paragraph",
    SENTENCE: "sentence",
    TOKEN: "token",
};
const ClarifyTextLanguage = {
    AFRIKAANS: "af",
    ALBANIAN: "sq",
    ARABIC: "ar",
    ARMENIAN: "hy",
    BASQUE: "eu",
    BENGALI: "bn",
    BULGARIAN: "bg",
    CATALAN: "ca",
    CHINESE: "zh",
    CROATIAN: "hr",
    CZECH: "cs",
    DANISH: "da",
    DUTCH: "nl",
    ENGLISH: "en",
    ESTONIAN: "et",
    FINNISH: "fi",
    FRENCH: "fr",
    GERMAN: "de",
    GREEK: "el",
    GUJARATI: "gu",
    HEBREW: "he",
    HINDI: "hi",
    HUNGARIAN: "hu",
    ICELANDIC: "is",
    INDONESIAN: "id",
    IRISH: "ga",
    ITALIAN: "it",
    KANNADA: "kn",
    KYRGYZ: "ky",
    LATVIAN: "lv",
    LIGURIAN: "lij",
    LITHUANIAN: "lt",
    LUXEMBOURGISH: "lb",
    MACEDONIAN: "mk",
    MALAYALAM: "ml",
    MARATHI: "mr",
    MULTI_LANGUAGE: "xx",
    NEPALI: "ne",
    NORWEGIAN_BOKMAL: "nb",
    PERSIAN: "fa",
    POLISH: "pl",
    PORTUGUESE: "pt",
    ROMANIAN: "ro",
    RUSSIAN: "ru",
    SANSKRIT: "sa",
    SERBIAN: "sr",
    SETSWANA: "tn",
    SINHALA: "si",
    SLOVAK: "sk",
    SLOVENIAN: "sl",
    SPANISH: "es",
    SWEDISH: "sv",
    TAGALOG: "tl",
    TAMIL: "ta",
    TATAR: "tt",
    TELUGU: "te",
    TURKISH: "tr",
    UKRAINIAN: "uk",
    URDU: "ur",
    YORUBA: "yo",
};
const ClusterAutoScalerType = {
    KARPENTER: "Karpenter",
};
const ClusterAutoScalingMode = {
    DISABLE: "Disable",
    ENABLE: "Enable",
};
const ClusterAutoScalingStatus = {
    CREATING: "Creating",
    DELETING: "Deleting",
    FAILED: "Failed",
    INSERVICE: "InService",
};
const ClusterConfigMode = {
    DISABLE: "Disable",
    ENABLE: "Enable",
};
exports.EventMetadata = void 0;
(function (EventMetadata) {
    EventMetadata.visit = (value, visitor) => {
        if (value.Cluster !== undefined)
            return visitor.Cluster(value.Cluster);
        if (value.InstanceGroup !== undefined)
            return visitor.InstanceGroup(value.InstanceGroup);
        if (value.InstanceGroupScaling !== undefined)
            return visitor.InstanceGroupScaling(value.InstanceGroupScaling);
        if (value.Instance !== undefined)
            return visitor.Instance(value.Instance);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.EventMetadata || (exports.EventMetadata = {}));
const ClusterEventResourceType = {
    CLUSTER: "Cluster",
    INSTANCE: "Instance",
    INSTANCE_GROUP: "InstanceGroup",
};
exports.ClusterInstanceStorageConfig = void 0;
(function (ClusterInstanceStorageConfig) {
    ClusterInstanceStorageConfig.visit = (value, visitor) => {
        if (value.EbsVolumeConfig !== undefined)
            return visitor.EbsVolumeConfig(value.EbsVolumeConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.ClusterInstanceStorageConfig || (exports.ClusterInstanceStorageConfig = {}));
const ClusterInstanceType = {
    ML_C5N_18XLARGE: "ml.c5n.18xlarge",
    ML_C5N_2XLARGE: "ml.c5n.2xlarge",
    ML_C5N_4XLARGE: "ml.c5n.4xlarge",
    ML_C5N_9XLARGE: "ml.c5n.9xlarge",
    ML_C5N_LARGE: "ml.c5n.large",
    ML_C5_12XLARGE: "ml.c5.12xlarge",
    ML_C5_18XLARGE: "ml.c5.18xlarge",
    ML_C5_24XLARGE: "ml.c5.24xlarge",
    ML_C5_2XLARGE: "ml.c5.2xlarge",
    ML_C5_4XLARGE: "ml.c5.4xlarge",
    ML_C5_9XLARGE: "ml.c5.9xlarge",
    ML_C5_LARGE: "ml.c5.large",
    ML_C5_XLARGE: "ml.c5.xlarge",
    ML_C6I_12XLARGE: "ml.c6i.12xlarge",
    ML_C6I_16XLARGE: "ml.c6i.16xlarge",
    ML_C6I_24XLARGE: "ml.c6i.24xlarge",
    ML_C6I_2XLARGE: "ml.c6i.2xlarge",
    ML_C6I_32XLARGE: "ml.c6i.32xlarge",
    ML_C6I_4XLARGE: "ml.c6i.4xlarge",
    ML_C6I_8XLARGE: "ml.c6i.8xlarge",
    ML_C6I_LARGE: "ml.c6i.large",
    ML_C6I_XLARGE: "ml.c6i.xlarge",
    ML_G5_12XLARGE: "ml.g5.12xlarge",
    ML_G5_16XLARGE: "ml.g5.16xlarge",
    ML_G5_24XLARGE: "ml.g5.24xlarge",
    ML_G5_2XLARGE: "ml.g5.2xlarge",
    ML_G5_48XLARGE: "ml.g5.48xlarge",
    ML_G5_4XLARGE: "ml.g5.4xlarge",
    ML_G5_8XLARGE: "ml.g5.8xlarge",
    ML_G5_XLARGE: "ml.g5.xlarge",
    ML_G6E_12XLARGE: "ml.g6e.12xlarge",
    ML_G6E_16XLARGE: "ml.g6e.16xlarge",
    ML_G6E_24XLARGE: "ml.g6e.24xlarge",
    ML_G6E_2XLARGE: "ml.g6e.2xlarge",
    ML_G6E_48XLARGE: "ml.g6e.48xlarge",
    ML_G6E_4XLARGE: "ml.g6e.4xlarge",
    ML_G6E_8XLARGE: "ml.g6e.8xlarge",
    ML_G6E_XLARGE: "ml.g6e.xlarge",
    ML_G6_12XLARGE: "ml.g6.12xlarge",
    ML_G6_16XLARGE: "ml.g6.16xlarge",
    ML_G6_24XLARGE: "ml.g6.24xlarge",
    ML_G6_2XLARGE: "ml.g6.2xlarge",
    ML_G6_48XLARGE: "ml.g6.48xlarge",
    ML_G6_4XLARGE: "ml.g6.4xlarge",
    ML_G6_8XLARGE: "ml.g6.8xlarge",
    ML_G6_XLARGE: "ml.g6.xlarge",
    ML_GR6_4XLARGE: "ml.gr6.4xlarge",
    ML_GR6_8XLARGE: "ml.gr6.8xlarge",
    ML_I3EN_12XLARGE: "ml.i3en.12xlarge",
    ML_I3EN_24XLARGE: "ml.i3en.24xlarge",
    ML_I3EN_2XLARGE: "ml.i3en.2xlarge",
    ML_I3EN_3XLARGE: "ml.i3en.3xlarge",
    ML_I3EN_6XLARGE: "ml.i3en.6xlarge",
    ML_I3EN_LARGE: "ml.i3en.large",
    ML_I3EN_XLARGE: "ml.i3en.xlarge",
    ML_M5_12XLARGE: "ml.m5.12xlarge",
    ML_M5_16XLARGE: "ml.m5.16xlarge",
    ML_M5_24XLARGE: "ml.m5.24xlarge",
    ML_M5_2XLARGE: "ml.m5.2xlarge",
    ML_M5_4XLARGE: "ml.m5.4xlarge",
    ML_M5_8XLARGE: "ml.m5.8xlarge",
    ML_M5_LARGE: "ml.m5.large",
    ML_M5_XLARGE: "ml.m5.xlarge",
    ML_M6I_12XLARGE: "ml.m6i.12xlarge",
    ML_M6I_16XLARGE: "ml.m6i.16xlarge",
    ML_M6I_24XLARGE: "ml.m6i.24xlarge",
    ML_M6I_2XLARGE: "ml.m6i.2xlarge",
    ML_M6I_32XLARGE: "ml.m6i.32xlarge",
    ML_M6I_4XLARGE: "ml.m6i.4xlarge",
    ML_M6I_8XLARGE: "ml.m6i.8xlarge",
    ML_M6I_LARGE: "ml.m6i.large",
    ML_M6I_XLARGE: "ml.m6i.xlarge",
    ML_M7I_12XLARGE: "ml.m7i.12xlarge",
    ML_M7I_16XLARGE: "ml.m7i.16xlarge",
    ML_M7I_24XLARGE: "ml.m7i.24xlarge",
    ML_M7I_2XLARGE: "ml.m7i.2xlarge",
    ML_M7I_48XLARGE: "ml.m7i.48xlarge",
    ML_M7I_4XLARGE: "ml.m7i.4xlarge",
    ML_M7I_8XLARGE: "ml.m7i.8xlarge",
    ML_M7I_LARGE: "ml.m7i.large",
    ML_M7I_XLARGE: "ml.m7i.xlarge",
    ML_P4DE_24XLARGE: "ml.p4de.24xlarge",
    ML_P4D_24XLARGE: "ml.p4d.24xlarge",
    ML_P5EN_48XLARGE: "ml.p5en.48xlarge",
    ML_P5E_48XLARGE: "ml.p5e.48xlarge",
    ML_P5_48XLARGE: "ml.p5.48xlarge",
    ML_P6E_GB200_36XLARGE: "ml.p6e-gb200.36xlarge",
    ML_P6_B200_48XLARGE: "ml.p6-b200.48xlarge",
    ML_R6I_12XLARGE: "ml.r6i.12xlarge",
    ML_R6I_16XLARGE: "ml.r6i.16xlarge",
    ML_R6I_24XLARGE: "ml.r6i.24xlarge",
    ML_R6I_2XLARGE: "ml.r6i.2xlarge",
    ML_R6I_32XLARGE: "ml.r6i.32xlarge",
    ML_R6I_4XLARGE: "ml.r6i.4xlarge",
    ML_R6I_8XLARGE: "ml.r6i.8xlarge",
    ML_R6I_LARGE: "ml.r6i.large",
    ML_R6I_XLARGE: "ml.r6i.xlarge",
    ML_R7I_12XLARGE: "ml.r7i.12xlarge",
    ML_R7I_16XLARGE: "ml.r7i.16xlarge",
    ML_R7I_24XLARGE: "ml.r7i.24xlarge",
    ML_R7I_2XLARGE: "ml.r7i.2xlarge",
    ML_R7I_48XLARGE: "ml.r7i.48xlarge",
    ML_R7I_4XLARGE: "ml.r7i.4xlarge",
    ML_R7I_8XLARGE: "ml.r7i.8xlarge",
    ML_R7I_LARGE: "ml.r7i.large",
    ML_R7I_XLARGE: "ml.r7i.xlarge",
    ML_T3_2XLARGE: "ml.t3.2xlarge",
    ML_T3_LARGE: "ml.t3.large",
    ML_T3_MEDIUM: "ml.t3.medium",
    ML_T3_XLARGE: "ml.t3.xlarge",
    ML_TRN1N_32XLARGE: "ml.trn1n.32xlarge",
    ML_TRN1_32XLARGE: "ml.trn1.32xlarge",
    ML_TRN2_48XLARGE: "ml.trn2.48xlarge",
};
const DeepHealthCheckType = {
    INSTANCE_CONNECTIVITY: "InstanceConnectivity",
    INSTANCE_STRESS: "InstanceStress",
};
const InstanceGroupStatus = {
    CREATING: "Creating",
    DEGRADED: "Degraded",
    DELETING: "Deleting",
    FAILED: "Failed",
    INSERVICE: "InService",
    SYSTEMUPDATING: "SystemUpdating",
    UPDATING: "Updating",
};
const ClusterNodeProvisioningMode = {
    CONTINUOUS: "Continuous",
};
const ClusterNodeRecovery = {
    AUTOMATIC: "Automatic",
    NONE: "None",
};

const SchedulerResourceStatus = {
    CREATED: "Created",
    CREATE_FAILED: "CreateFailed",
    CREATE_ROLLBACK_FAILED: "CreateRollbackFailed",
    CREATING: "Creating",
    DELETED: "Deleted",
    DELETE_FAILED: "DeleteFailed",
    DELETE_ROLLBACK_FAILED: "DeleteRollbackFailed",
    DELETING: "Deleting",
    UPDATED: "Updated",
    UPDATE_FAILED: "UpdateFailed",
    UPDATE_ROLLBACK_FAILED: "UpdateRollbackFailed",
    UPDATING: "Updating",
};
const ClusterSortBy = {
    CREATION_TIME: "CREATION_TIME",
    NAME: "NAME",
};
const ClusterStatus = {
    CREATING: "Creating",
    DELETING: "Deleting",
    FAILED: "Failed",
    INSERVICE: "InService",
    ROLLINGBACK: "RollingBack",
    SYSTEMUPDATING: "SystemUpdating",
    UPDATING: "Updating",
};
const CodeRepositorySortBy = {
    CREATION_TIME: "CreationTime",
    LAST_MODIFIED_TIME: "LastModifiedTime",
    NAME: "Name",
};
const CodeRepositorySortOrder = {
    ASCENDING: "Ascending",
    DESCENDING: "Descending",
};
exports.CollectionConfig = void 0;
(function (CollectionConfig) {
    CollectionConfig.visit = (value, visitor) => {
        if (value.VectorConfig !== undefined)
            return visitor.VectorConfig(value.VectorConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.CollectionConfig || (exports.CollectionConfig = {}));
const CollectionType = {
    LIST: "List",
    SET: "Set",
    VECTOR: "Vector",
};
const CompilationJobStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    INPROGRESS: "INPROGRESS",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
const TargetDevice = {
    AISAGE: "aisage",
    AMBA_CV2: "amba_cv2",
    AMBA_CV22: "amba_cv22",
    AMBA_CV25: "amba_cv25",
    COREML: "coreml",
    DEEPLENS: "deeplens",
    IMX8MPLUS: "imx8mplus",
    IMX8QM: "imx8qm",
    JACINTO_TDA4VM: "jacinto_tda4vm",
    JETSON_NANO: "jetson_nano",
    JETSON_TX1: "jetson_tx1",
    JETSON_TX2: "jetson_tx2",
    JETSON_XAVIER: "jetson_xavier",
    LAMBDA: "lambda",
    ML_C4: "ml_c4",
    ML_C5: "ml_c5",
    ML_C6G: "ml_c6g",
    ML_EIA2: "ml_eia2",
    ML_G4DN: "ml_g4dn",
    ML_INF1: "ml_inf1",
    ML_INF2: "ml_inf2",
    ML_M4: "ml_m4",
    ML_M5: "ml_m5",
    ML_M6G: "ml_m6g",
    ML_P2: "ml_p2",
    ML_P3: "ml_p3",
    ML_TRN1: "ml_trn1",
    QCS603: "qcs603",
    QCS605: "qcs605",
    RASP3B: "rasp3b",
    RASP4B: "rasp4b",
    RK3288: "rk3288",
    RK3399: "rk3399",
    SBE_C: "sbe_c",
    SITARA_AM57X: "sitara_am57x",
    X86_WIN32: "x86_win32",
    X86_WIN64: "x86_win64",
};
const TargetPlatformAccelerator = {
    INTEL_GRAPHICS: "INTEL_GRAPHICS",
    MALI: "MALI",
    NNA: "NNA",
    NVIDIA: "NVIDIA",
};
const TargetPlatformArch = {
    ARM64: "ARM64",
    ARM_EABI: "ARM_EABI",
    ARM_EABIHF: "ARM_EABIHF",
    X86: "X86",
    X86_64: "X86_64",
};
const TargetPlatformOs = {
    ANDROID: "ANDROID",
    LINUX: "LINUX",
};
const CompleteOnConvergence = {
    DISABLED: "Disabled",
    ENABLED: "Enabled",
};
const PreemptTeamTasks = {
    LOWERPRIORITY: "LowerPriority",
    NEVER: "Never",
};
const ResourceSharingStrategy = {
    DONTLEND: "DontLend",
    LEND: "Lend",
    LENDANDBORROW: "LendAndBorrow",
};
const ConditionOutcome = {
    FALSE: "False",
    TRUE: "True",
};
class ConflictException extends SageMakerServiceException {
    name = "ConflictException";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ConflictException",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ConflictException.prototype);
        this.Message = opts.Message;
    }
}
const RepositoryAccessMode = {
    PLATFORM: "Platform",
    VPC: "Vpc",
};
const ContainerMode = {
    MULTI_MODEL: "MultiModel",
    SINGLE_MODEL: "SingleModel",
};
const ModelCacheSetting = {
    DISABLED: "Disabled",
    ENABLED: "Enabled",
};
const ContentClassifier = {
    FREE_OF_ADULT_CONTENT: "FreeOfAdultContent",
    FREE_OF_PERSONALLY_IDENTIFIABLE_INFORMATION: "FreeOfPersonallyIdentifiableInformation",
};
const HyperParameterScalingType = {
    AUTO: "Auto",
    LINEAR: "Linear",
    LOGARITHMIC: "Logarithmic",
    REVERSE_LOGARITHMIC: "ReverseLogarithmic",
};
const ParameterType = {
    CATEGORICAL: "Categorical",
    CONTINUOUS: "Continuous",
    FREE_TEXT: "FreeText",
    INTEGER: "Integer",
};
const HyperParameterTuningJobObjectiveType = {
    MAXIMIZE: "Maximize",
    MINIMIZE: "Minimize",
};
class ResourceInUse extends SageMakerServiceException {
    name = "ResourceInUse";
    $fault = "client";
    Message;
    constructor(opts) {
        super({
            name: "ResourceInUse",
            $fault: "client",
            ...opts,
        });
        Object.setPrototypeOf(this, ResourceInUse.prototype);
        this.Message = opts.Message;
    }
}
const FairShare = {
    DISABLED: "Disabled",
    ENABLED: "Enabled",
};
const Framework = {
    DARKNET: "DARKNET",
    KERAS: "KERAS",
    MXNET: "MXNET",
    ONNX: "ONNX",
    PYTORCH: "PYTORCH",
    SKLEARN: "SKLEARN",
    TENSORFLOW: "TENSORFLOW",
    TFLITE: "TFLITE",
    XGBOOST: "XGBOOST",
};
const ProcessingS3UploadMode = {
    CONTINUOUS: "Continuous",
    END_OF_JOB: "EndOfJob",
};
const ProcessingInstanceType = {
    ML_C4_2XLARGE: "ml.c4.2xlarge",
    ML_C4_4XLARGE: "ml.c4.4xlarge",
    ML_C4_8XLARGE: "ml.c4.8xlarge",
    ML_C4_XLARGE: "ml.c4.xlarge",
    ML_C5_18XLARGE: "ml.c5.18xlarge",
    ML_C5_2XLARGE: "ml.c5.2xlarge",
    ML_C5_4XLARGE: "ml.c5.4xlarge",
    ML_C5_9XLARGE: "ml.c5.9xlarge",
    ML_C5_XLARGE: "ml.c5.xlarge",
    ML_C6I_12XLARGE: "ml.c6i.12xlarge",
    ML_C6I_16XLARGE: "ml.c6i.16xlarge",
    ML_C6I_24XLARGE: "ml.c6i.24xlarge",
    ML_C6I_2XLARGE: "ml.c6i.2xlarge",
    ML_C6I_32XLARGE: "ml.c6i.32xlarge",
    ML_C6I_4XLARGE: "ml.c6i.4xlarge",
    ML_C6I_8XLARGE: "ml.c6i.8xlarge",
    ML_C6I_XLARGE: "ml.c6i.xlarge",
    ML_C7I_12XLARGE: "ml.c7i.12xlarge",
    ML_C7I_16XLARGE: "ml.c7i.16xlarge",
    ML_C7I_24XLARGE: "ml.c7i.24xlarge",
    ML_C7I_2XLARGE: "ml.c7i.2xlarge",
    ML_C7I_48XLARGE: "ml.c7i.48xlarge",
    ML_C7I_4XLARGE: "ml.c7i.4xlarge",
    ML_C7I_8XLARGE: "ml.c7i.8xlarge",
    ML_C7I_LARGE: "ml.c7i.large",
    ML_C7I_XLARGE: "ml.c7i.xlarge",
    ML_G4DN_12XLARGE: "ml.g4dn.12xlarge",
    ML_G4DN_16XLARGE: "ml.g4dn.16xlarge",
    ML_G4DN_2XLARGE: "ml.g4dn.2xlarge",
    ML_G4DN_4XLARGE: "ml.g4dn.4xlarge",
    ML_G4DN_8XLARGE: "ml.g4dn.8xlarge",
    ML_G4DN_XLARGE: "ml.g4dn.xlarge",
    ML_G5_12XLARGE: "ml.g5.12xlarge",
    ML_G5_16XLARGE: "ml.g5.16xlarge",
    ML_G5_24XLARGE: "ml.g5.24xlarge",
    ML_G5_2XLARGE: "ml.g5.2xlarge",
    ML_G5_48XLARGE: "ml.g5.48xlarge",
    ML_G5_4XLARGE: "ml.g5.4xlarge",
    ML_G5_8XLARGE: "ml.g5.8xlarge",
    ML_G5_XLARGE: "ml.g5.xlarge",
    ML_G6E_12XLARGE: "ml.g6e.12xlarge",
    ML_G6E_16XLARGE: "ml.g6e.16xlarge",
    ML_G6E_24XLARGE: "ml.g6e.24xlarge",
    ML_G6E_2XLARGE: "ml.g6e.2xlarge",
    ML_G6E_48XLARGE: "ml.g6e.48xlarge",
    ML_G6E_4XLARGE: "ml.g6e.4xlarge",
    ML_G6E_8XLARGE: "ml.g6e.8xlarge",
    ML_G6E_XLARGE: "ml.g6e.xlarge",
    ML_G6_12XLARGE: "ml.g6.12xlarge",
    ML_G6_16XLARGE: "ml.g6.16xlarge",
    ML_G6_24XLARGE: "ml.g6.24xlarge",
    ML_G6_2XLARGE: "ml.g6.2xlarge",
    ML_G6_48XLARGE: "ml.g6.48xlarge",
    ML_G6_4XLARGE: "ml.g6.4xlarge",
    ML_G6_8XLARGE: "ml.g6.8xlarge",
    ML_G6_XLARGE: "ml.g6.xlarge",
    ML_M4_10XLARGE: "ml.m4.10xlarge",
    ML_M4_16XLARGE: "ml.m4.16xlarge",
    ML_M4_2XLARGE: "ml.m4.2xlarge",
    ML_M4_4XLARGE: "ml.m4.4xlarge",
    ML_M4_XLARGE: "ml.m4.xlarge",
    ML_M5_12XLARGE: "ml.m5.12xlarge",
    ML_M5_24XLARGE: "ml.m5.24xlarge",
    ML_M5_2XLARGE: "ml.m5.2xlarge",
    ML_M5_4XLARGE: "ml.m5.4xlarge",
    ML_M5_LARGE: "ml.m5.large",
    ML_M5_XLARGE: "ml.m5.xlarge",
    ML_M6I_12XLARGE: "ml.m6i.12xlarge",
    ML_M6I_16XLARGE: "ml.m6i.16xlarge",
    ML_M6I_24XLARGE: "ml.m6i.24xlarge",
    ML_M6I_2XLARGE: "ml.m6i.2xlarge",
    ML_M6I_32XLARGE: "ml.m6i.32xlarge",
    ML_M6I_4XLARGE: "ml.m6i.4xlarge",
    ML_M6I_8XLARGE: "ml.m6i.8xlarge",
    ML_M6I_LARGE: "ml.m6i.large",
    ML_M6I_XLARGE: "ml.m6i.xlarge",
    ML_M7I_12XLARGE: "ml.m7i.12xlarge",
    ML_M7I_16XLARGE: "ml.m7i.16xlarge",
    ML_M7I_24XLARGE: "ml.m7i.24xlarge",
    ML_M7I_2XLARGE: "ml.m7i.2xlarge",
    ML_M7I_48XLARGE: "ml.m7i.48xlarge",
    ML_M7I_4XLARGE: "ml.m7i.4xlarge",
    ML_M7I_8XLARGE: "ml.m7i.8xlarge",
    ML_M7I_LARGE: "ml.m7i.large",
    ML_M7I_XLARGE: "ml.m7i.xlarge",
    ML_P2_16XLARGE: "ml.p2.16xlarge",
    ML_P2_8XLARGE: "ml.p2.8xlarge",
    ML_P2_XLARGE: "ml.p2.xlarge",
    ML_P3_16XLARGE: "ml.p3.16xlarge",
    ML_P3_2XLARGE: "ml.p3.2xlarge",
    ML_P3_8XLARGE: "ml.p3.8xlarge",
    ML_P5_4XLARGE: "ml.p5.4xlarge",
    ML_R5D_12XLARGE: "ml.r5d.12xlarge",
    ML_R5D_16XLARGE: "ml.r5d.16xlarge",
    ML_R5D_24XLARGE: "ml.r5d.24xlarge",
    ML_R5D_2XLARGE: "ml.r5d.2xlarge",
    ML_R5D_4XLARGE: "ml.r5d.4xlarge",
    ML_R5D_8XLARGE: "ml.r5d.8xlarge",
    ML_R5D_LARGE: "ml.r5d.large",
    ML_R5D_XLARGE: "ml.r5d.xlarge",
    ML_R5_12XLARGE: "ml.r5.12xlarge",
    ML_R5_16XLARGE: "ml.r5.16xlarge",
    ML_R5_24XLARGE: "ml.r5.24xlarge",
    ML_R5_2XLARGE: "ml.r5.2xlarge",
    ML_R5_4XLARGE: "ml.r5.4xlarge",
    ML_R5_8XLARGE: "ml.r5.8xlarge",
    ML_R5_LARGE: "ml.r5.large",
    ML_R5_XLARGE: "ml.r5.xlarge",
    ML_R7I_12XLARGE: "ml.r7i.12xlarge",
    ML_R7I_16XLARGE: "ml.r7i.16xlarge",
    ML_R7I_24XLARGE: "ml.r7i.24xlarge",
    ML_R7I_2XLARGE: "ml.r7i.2xlarge",
    ML_R7I_48XLARGE: "ml.r7i.48xlarge",
    ML_R7I_4XLARGE: "ml.r7i.4xlarge",
    ML_R7I_8XLARGE: "ml.r7i.8xlarge",
    ML_R7I_LARGE: "ml.r7i.large",
    ML_R7I_XLARGE: "ml.r7i.xlarge",
    ML_T3_2XLARGE: "ml.t3.2xlarge",
    ML_T3_LARGE: "ml.t3.large",
    ML_T3_MEDIUM: "ml.t3.medium",
    ML_T3_XLARGE: "ml.t3.xlarge",
};
const EdgePresetDeploymentType = {
    GreengrassV2Component: "GreengrassV2Component",
};
exports.CustomFileSystemConfig = void 0;
(function (CustomFileSystemConfig) {
    CustomFileSystemConfig.visit = (value, visitor) => {
        if (value.EFSFileSystemConfig !== undefined)
            return visitor.EFSFileSystemConfig(value.EFSFileSystemConfig);
        if (value.FSxLustreFileSystemConfig !== undefined)
            return visitor.FSxLustreFileSystemConfig(value.FSxLustreFileSystemConfig);
        if (value.S3FileSystemConfig !== undefined)
            return visitor.S3FileSystemConfig(value.S3FileSystemConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.CustomFileSystemConfig || (exports.CustomFileSystemConfig = {}));
const RStudioServerProAccessStatus = {
    Disabled: "DISABLED",
    Enabled: "ENABLED",
};
const RStudioServerProUserGroup = {
    Admin: "R_STUDIO_ADMIN",
    User: "R_STUDIO_USER",
};
const NotebookOutputOption = {
    Allowed: "Allowed",
    Disabled: "Disabled",
};
const StudioWebPortal = {
    Disabled: "DISABLED",
    Enabled: "ENABLED",
};
const MlTools = {
    AUTO_ML: "AutoMl",
    COMET: "Comet",
    DATA_WRANGLER: "DataWrangler",
    DEEPCHECKS_LLM_EVALUATION: "DeepchecksLLMEvaluation",
    EMR_CLUSTERS: "EmrClusters",
    ENDPOINTS: "Endpoints",
    EXPERIMENTS: "Experiments",
    FEATURE_STORE: "FeatureStore",
    FIDDLER: "Fiddler",
    HYPER_POD_CLUSTERS: "HyperPodClusters",
    INFERENCE_OPTIMIZATION: "InferenceOptimization",
    INFERENCE_RECOMMENDER: "InferenceRecommender",
    JUMP_START: "JumpStart",
    LAKERA_GUARD: "LakeraGuard",
    MODELS: "Models",
    MODEL_EVALUATION: "ModelEvaluation",
    PERFORMANCE_EVALUATION: "PerformanceEvaluation",
    PIPELINES: "Pipelines",
    PROJECTS: "Projects",
    TRAINING: "Training",
};
const SageMakerImageName = {
    sagemaker_distribution: "sagemaker_distribution",
};
const ExecutionRoleIdentityConfig = {
    DISABLED: "DISABLED",
    USER_PROFILE_NAME: "USER_PROFILE_NAME",
};
const IPAddressType = {
    DUALSTACK: "dualstack",
    IPV4: "ipv4",
};
const TagPropagation = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const FailureHandlingPolicy = {
    DoNothing: "DO_NOTHING",
    RollbackOnFailure: "ROLLBACK_ON_FAILURE",
};
const DeviceSubsetType = {
    NameContains: "NAMECONTAINS",
    Percentage: "PERCENTAGE",
    Selection: "SELECTION",
};
const ProductionVariantAcceleratorType = {
    ML_EIA1_LARGE: "ml.eia1.large",
    ML_EIA1_MEDIUM: "ml.eia1.medium",
    ML_EIA1_XLARGE: "ml.eia1.xlarge",
    ML_EIA2_LARGE: "ml.eia2.large",
    ML_EIA2_MEDIUM: "ml.eia2.medium",
    ML_EIA2_XLARGE: "ml.eia2.xlarge",
};
const ProductionVariantInferenceAmiVersion = {
    AL2_GPU_2: "al2-ami-sagemaker-inference-gpu-2",
    AL2_GPU_2_1: "al2-ami-sagemaker-inference-gpu-2-1",
    AL2_GPU_3_1: "al2-ami-sagemaker-inference-gpu-3-1",
    AL2_NEURON_2: "al2-ami-sagemaker-inference-neuron-2",
};
const ManagedInstanceScalingStatus = {
    DISABLED: "DISABLED",
    ENABLED: "ENABLED",
};
const RoutingStrategy = {
    LEAST_OUTSTANDING_REQUESTS: "LEAST_OUTSTANDING_REQUESTS",
    RANDOM: "RANDOM",
};
const FeatureType = {
    FRACTIONAL: "Fractional",
    INTEGRAL: "Integral",
    STRING: "String",
};
const TableFormat = {
    DEFAULT: "Default",
    GLUE: "Glue",
    ICEBERG: "Iceberg",
};
const StorageType = {
    IN_MEMORY: "InMemory",
    STANDARD: "Standard",
};
const TtlDurationUnit = {
    DAYS: "Days",
    HOURS: "Hours",
    MINUTES: "Minutes",
    SECONDS: "Seconds",
    WEEKS: "Weeks",
};
const ThroughputMode = {
    ON_DEMAND: "OnDemand",
    PROVISIONED: "Provisioned",
};
const HubContentType = {
    MODEL: "Model",
    MODEL_REFERENCE: "ModelReference",
    NOTEBOOK: "Notebook",
};
const HyperParameterTuningJobStrategyType = {
    BAYESIAN: "Bayesian",
    GRID: "Grid",
    HYPERBAND: "Hyperband",
    RANDOM: "Random",
};
const TrainingJobEarlyStoppingType = {
    AUTO: "Auto",
    OFF: "Off",
};
const HyperParameterTuningAllocationStrategy = {
    PRIORITIZED: "Prioritized",
};
const HyperParameterTuningJobWarmStartType = {
    IDENTICAL_DATA_AND_ALGORITHM: "IdenticalDataAndAlgorithm",
    TRANSFER_LEARNING: "TransferLearning",
};
const JobType = {
    INFERENCE: "INFERENCE",
    NOTEBOOK_KERNEL: "NOTEBOOK_KERNEL",
    TRAINING: "TRAINING",
};
const Processor = {
    CPU: "CPU",
    GPU: "GPU",
};
const VendorGuidance = {
    ARCHIVED: "ARCHIVED",
    NOT_PROVIDED: "NOT_PROVIDED",
    STABLE: "STABLE",
    TO_BE_ARCHIVED: "TO_BE_ARCHIVED",
};
const ModelInfrastructureType = {
    REAL_TIME_INFERENCE: "RealTimeInference",
};
const _InstanceType = {
    ML_C4_2XLARGE: "ml.c4.2xlarge",
    ML_C4_4XLARGE: "ml.c4.4xlarge",
    ML_C4_8XLARGE: "ml.c4.8xlarge",
    ML_C4_XLARGE: "ml.c4.xlarge",
    ML_C5D_18XLARGE: "ml.c5d.18xlarge",
    ML_C5D_2XLARGE: "ml.c5d.2xlarge",
    ML_C5D_4XLARGE: "ml.c5d.4xlarge",
    ML_C5D_9XLARGE: "ml.c5d.9xlarge",
    ML_C5D_XLARGE: "ml.c5d.xlarge",
    ML_C5_18XLARGE: "ml.c5.18xlarge",
    ML_C5_2XLARGE: "ml.c5.2xlarge",
    ML_C5_4XLARGE: "ml.c5.4xlarge",
    ML_C5_9XLARGE: "ml.c5.9xlarge",
    ML_C5_XLARGE: "ml.c5.xlarge",
    ML_C6ID_12XLARGE: "ml.c6id.12xlarge",
    ML_C6ID_16XLARGE: "ml.c6id.16xlarge",
    ML_C6ID_24XLARGE: "ml.c6id.24xlarge",
    ML_C6ID_2XLARGE: "ml.c6id.2xlarge",
    ML_C6ID_32XLARGE: "ml.c6id.32xlarge",
    ML_C6ID_4XLARGE: "ml.c6id.4xlarge",
    ML_C6ID_8XLARGE: "ml.c6id.8xlarge",
    ML_C6ID_LARGE: "ml.c6id.large",
    ML_C6ID_XLARGE: "ml.c6id.xlarge",
    ML_C6I_12XLARGE: "ml.c6i.12xlarge",
    ML_C6I_16XLARGE: "ml.c6i.16xlarge",
    ML_C6I_24XLARGE: "ml.c6i.24xlarge",
    ML_C6I_2XLARGE: "ml.c6i.2xlarge",
    ML_C6I_32XLARGE: "ml.c6i.32xlarge",
    ML_C6I_4XLARGE: "ml.c6i.4xlarge",
    ML_C6I_8XLARGE: "ml.c6i.8xlarge",
    ML_C6I_LARGE: "ml.c6i.large",
    ML_C6I_XLARGE: "ml.c6i.xlarge",
    ML_C7I_12XLARGE: "ml.c7i.12xlarge",
    ML_C7I_16XLARGE: "ml.c7i.16xlarge",
    ML_C7I_24XLARGE: "ml.c7i.24xlarge",
    ML_C7I_2XLARGE: "ml.c7i.2xlarge",
    ML_C7I_48XLARGE: "ml.c7i.48xlarge",
    ML_C7I_4XLARGE: "ml.c7i.4xlarge",
    ML_C7I_8XLARGE: "ml.c7i.8xlarge",
    ML_C7I_LARGE: "ml.c7i.large",
    ML_C7I_XLARGE: "ml.c7i.xlarge",
    ML_G4DN_12XLARGE: "ml.g4dn.12xlarge",
    ML_G4DN_16XLARGE: "ml.g4dn.16xlarge",
    ML_G4DN_2XLARGE: "ml.g4dn.2xlarge",
    ML_G4DN_4XLARGE: "ml.g4dn.4xlarge",
    ML_G4DN_8XLARGE: "ml.g4dn.8xlarge",
    ML_G4DN_XLARGE: "ml.g4dn.xlarge",
    ML_G5_12XLARGE: "ml.g5.12xlarge",
    ML_G5_16XLARGE: "ml.g5.16xlarge",
    ML_G5_24XLARGE: "ml.g5.24xlarge",
    ML_G5_2XLARGE: "ml.g5.2xlarge",
    ML_G5_48XLARGE: "ml.g5.48xlarge",
    ML_G5_4XLARGE: "ml.g5.4xlarge",
    ML_G5_8XLARGE: "ml.g5.8xlarge",
    ML_G5_XLARGE: "ml.g5.xlarge",
    ML_G6_12XLARGE: "ml.g6.12xlarge",
    ML_G6_16XLARGE: "ml.g6.16xlarge",
    ML_G6_24XLARGE: "ml.g6.24xlarge",
    ML_G6_2XLARGE: "ml.g6.2xlarge",
    ML_G6_48XLARGE: "ml.g6.48xlarge",
    ML_G6_4XLARGE: "ml.g6.4xlarge",
    ML_G6_8XLARGE: "ml.g6.8xlarge",
    ML_G6_XLARGE: "ml.g6.xlarge",
    ML_INF1_24XLARGE: "ml.inf1.24xlarge",
    ML_INF1_2XLARGE: "ml.inf1.2xlarge",
    ML_INF1_6XLARGE: "ml.inf1.6xlarge",
    ML_INF1_XLARGE: "ml.inf1.xlarge",
    ML_INF2_24XLARGE: "ml.inf2.24xlarge",
    ML_INF2_48XLARGE: "ml.inf2.48xlarge",
    ML_INF2_8XLARGE: "ml.inf2.8xlarge",
    ML_INF2_XLARGE: "ml.inf2.xlarge",
    ML_M4_10XLARGE: "ml.m4.10xlarge",
    ML_M4_16XLARGE: "ml.m4.16xlarge",
    ML_M4_2XLARGE: "ml.m4.2xlarge",
    ML_M4_4XLARGE: "ml.m4.4xlarge",
    ML_M4_XLARGE: "ml.m4.xlarge",
    ML_M5D_12XLARGE: "ml.m5d.12xlarge",
    ML_M5D_16XLARGE: "ml.m5d.16xlarge",
    ML_M5D_24XLARGE: "ml.m5d.24xlarge",
    ML_M5D_2XLARGE: "ml.m5d.2xlarge",
    ML_M5D_4XLARGE: "ml.m5d.4xlarge",
    ML_M5D_8XLARGE: "ml.m5d.8xlarge",
    ML_M5D_LARGE: "ml.m5d.large",
    ML_M5D_XLARGE: "ml.m5d.xlarge",
    ML_M5_12XLARGE: "ml.m5.12xlarge",
    ML_M5_24XLARGE: "ml.m5.24xlarge",
    ML_M5_2XLARGE: "ml.m5.2xlarge",
    ML_M5_4XLARGE: "ml.m5.4xlarge",
    ML_M5_XLARGE: "ml.m5.xlarge",
    ML_M6ID_12XLARGE: "ml.m6id.12xlarge",
    ML_M6ID_16XLARGE: "ml.m6id.16xlarge",
    ML_M6ID_24XLARGE: "ml.m6id.24xlarge",
    ML_M6ID_2XLARGE: "ml.m6id.2xlarge",
    ML_M6ID_32XLARGE: "ml.m6id.32xlarge",
    ML_M6ID_4XLARGE: "ml.m6id.4xlarge",
    ML_M6ID_8XLARGE: "ml.m6id.8xlarge",
    ML_M6ID_LARGE: "ml.m6id.large",
    ML_M6ID_XLARGE: "ml.m6id.xlarge",
    ML_M6I_12XLARGE: "ml.m6i.12xlarge",
    ML_M6I_16XLARGE: "ml.m6i.16xlarge",
    ML_M6I_24XLARGE: "ml.m6i.24xlarge",
    ML_M6I_2XLARGE: "ml.m6i.2xlarge",
    ML_M6I_32XLARGE: "ml.m6i.32xlarge",
    ML_M6I_4XLARGE: "ml.m6i.4xlarge",
    ML_M6I_8XLARGE: "ml.m6i.8xlarge",
    ML_M6I_LARGE: "ml.m6i.large",
    ML_M6I_XLARGE: "ml.m6i.xlarge",
    ML_M7I_12XLARGE: "ml.m7i.12xlarge",
    ML_M7I_16XLARGE: "ml.m7i.16xlarge",
    ML_M7I_24XLARGE: "ml.m7i.24xlarge",
    ML_M7I_2XLARGE: "ml.m7i.2xlarge",
    ML_M7I_48XLARGE: "ml.m7i.48xlarge",
    ML_M7I_4XLARGE: "ml.m7i.4xlarge",
    ML_M7I_8XLARGE: "ml.m7i.8xlarge",
    ML_M7I_LARGE: "ml.m7i.large",
    ML_M7I_XLARGE: "ml.m7i.xlarge",
    ML_P2_16XLARGE: "ml.p2.16xlarge",
    ML_P2_8XLARGE: "ml.p2.8xlarge",
    ML_P2_XLARGE: "ml.p2.xlarge",
    ML_P3DN_24XLARGE: "ml.p3dn.24xlarge",
    ML_P3_16XLARGE: "ml.p3.16xlarge",
    ML_P3_2XLARGE: "ml.p3.2xlarge",
    ML_P3_8XLARGE: "ml.p3.8xlarge",
    ML_P4DE_24XLARGE: "ml.p4de.24xlarge",
    ML_P4D_24XLARGE: "ml.p4d.24xlarge",
    ML_P5_48XLARGE: "ml.p5.48xlarge",
    ML_P6_B200_48XLARGE: "ml.p6-b200.48xlarge",
    ML_R5_12XLARGE: "ml.r5.12xlarge",
    ML_R5_16XLARGE: "ml.r5.16xlarge",
    ML_R5_24XLARGE: "ml.r5.24xlarge",
    ML_R5_2XLARGE: "ml.r5.2xlarge",
    ML_R5_4XLARGE: "ml.r5.4xlarge",
    ML_R5_8XLARGE: "ml.r5.8xlarge",
    ML_R5_LARGE: "ml.r5.large",
    ML_R5_XLARGE: "ml.r5.xlarge",
    ML_R6ID_12XLARGE: "ml.r6id.12xlarge",
    ML_R6ID_16XLARGE: "ml.r6id.16xlarge",
    ML_R6ID_24XLARGE: "ml.r6id.24xlarge",
    ML_R6ID_2XLARGE: "ml.r6id.2xlarge",
    ML_R6ID_32XLARGE: "ml.r6id.32xlarge",
    ML_R6ID_4XLARGE: "ml.r6id.4xlarge",
    ML_R6ID_8XLARGE: "ml.r6id.8xlarge",
    ML_R6ID_LARGE: "ml.r6id.large",
    ML_R6ID_XLARGE: "ml.r6id.xlarge",
    ML_R6I_12XLARGE: "ml.r6i.12xlarge",
    ML_R6I_16XLARGE: "ml.r6i.16xlarge",
    ML_R6I_24XLARGE: "ml.r6i.24xlarge",
    ML_R6I_2XLARGE: "ml.r6i.2xlarge",
    ML_R6I_32XLARGE: "ml.r6i.32xlarge",
    ML_R6I_4XLARGE: "ml.r6i.4xlarge",
    ML_R6I_8XLARGE: "ml.r6i.8xlarge",
    ML_R6I_LARGE: "ml.r6i.large",
    ML_R6I_XLARGE: "ml.r6i.xlarge",
    ML_R7I_12XLARGE: "ml.r7i.12xlarge",
    ML_R7I_16XLARGE: "ml.r7i.16xlarge",
    ML_R7I_24XLARGE: "ml.r7i.24xlarge",
    ML_R7I_2XLARGE: "ml.r7i.2xlarge",
    ML_R7I_48XLARGE: "ml.r7i.48xlarge",
    ML_R7I_4XLARGE: "ml.r7i.4xlarge",
    ML_R7I_8XLARGE: "ml.r7i.8xlarge",
    ML_R7I_LARGE: "ml.r7i.large",
    ML_R7I_XLARGE: "ml.r7i.xlarge",
    ML_T2_2XLARGE: "ml.t2.2xlarge",
    ML_T2_LARGE: "ml.t2.large",
    ML_T2_MEDIUM: "ml.t2.medium",
    ML_T2_XLARGE: "ml.t2.xlarge",
    ML_T3_2XLARGE: "ml.t3.2xlarge",
    ML_T3_LARGE: "ml.t3.large",
    ML_T3_MEDIUM: "ml.t3.medium",
    ML_T3_XLARGE: "ml.t3.xlarge",
    ML_TRN1N_32XLARGE: "ml.trn1n.32xlarge",
    ML_TRN1_2XLARGE: "ml.trn1.2xlarge",
    ML_TRN1_32XLARGE: "ml.trn1.32xlarge",
};
const InferenceExperimentType = {
    SHADOW_MODE: "ShadowMode",
};
const RecommendationJobSupportedEndpointType = {
    REALTIME: "RealTime",
    SERVERLESS: "Serverless",
};
const TrafficType = {
    PHASES: "PHASES",
    STAIRS: "STAIRS",
};
const RecommendationJobType = {
    ADVANCED: "Advanced",
    DEFAULT: "Default",
};
const FlatInvocations = {
    CONTINUE: "Continue",
    STOP: "Stop",
};

const TrackingServerSize = {
    L: "Large",
    M: "Medium",
    S: "Small",
};
const InferenceExecutionMode = {
    DIRECT: "Direct",
    SERIAL: "Serial",
};
const ModelCardStatus = {
    APPROVED: "Approved",
    ARCHIVED: "Archived",
    DRAFT: "Draft",
    PENDINGREVIEW: "PendingReview",
};
const SkipModelValidation = {
    ALL: "All",
    NONE: "None",
};
const MonitoringProblemType = {
    BINARY_CLASSIFICATION: "BinaryClassification",
    MULTICLASS_CLASSIFICATION: "MulticlassClassification",
    REGRESSION: "Regression",
};
const MonitoringType = {
    DATA_QUALITY: "DataQuality",
    MODEL_BIAS: "ModelBias",
    MODEL_EXPLAINABILITY: "ModelExplainability",
    MODEL_QUALITY: "ModelQuality",
};
const NotebookInstanceAcceleratorType = {
    ML_EIA1_LARGE: "ml.eia1.large",
    ML_EIA1_MEDIUM: "ml.eia1.medium",
    ML_EIA1_XLARGE: "ml.eia1.xlarge",
    ML_EIA2_LARGE: "ml.eia2.large",
    ML_EIA2_MEDIUM: "ml.eia2.medium",
    ML_EIA2_XLARGE: "ml.eia2.xlarge",
};
const DirectInternetAccess = {
    DISABLED: "Disabled",
    ENABLED: "Enabled",
};
const RootAccess = {
    DISABLED: "Disabled",
    ENABLED: "Enabled",
};
const OptimizationJobDeploymentInstanceType = {
    ML_G5_12XLARGE: "ml.g5.12xlarge",
    ML_G5_16XLARGE: "ml.g5.16xlarge",
    ML_G5_24XLARGE: "ml.g5.24xlarge",
    ML_G5_2XLARGE: "ml.g5.2xlarge",
    ML_G5_48XLARGE: "ml.g5.48xlarge",
    ML_G5_4XLARGE: "ml.g5.4xlarge",
    ML_G5_8XLARGE: "ml.g5.8xlarge",
    ML_G5_XLARGE: "ml.g5.xlarge",
    ML_G6E_12XLARGE: "ml.g6e.12xlarge",
    ML_G6E_16XLARGE: "ml.g6e.16xlarge",
    ML_G6E_24XLARGE: "ml.g6e.24xlarge",
    ML_G6E_2XLARGE: "ml.g6e.2xlarge",
    ML_G6E_48XLARGE: "ml.g6e.48xlarge",
    ML_G6E_4XLARGE: "ml.g6e.4xlarge",
    ML_G6E_8XLARGE: "ml.g6e.8xlarge",
    ML_G6E_XLARGE: "ml.g6e.xlarge",
    ML_G6_12XLARGE: "ml.g6.12xlarge",
    ML_G6_16XLARGE: "ml.g6.16xlarge",
    ML_G6_24XLARGE: "ml.g6.24xlarge",
    ML_G6_2XLARGE: "ml.g6.2xlarge",
    ML_G6_48XLARGE: "ml.g6.48xlarge",
    ML_G6_4XLARGE: "ml.g6.4xlarge",
    ML_G6_8XLARGE: "ml.g6.8xlarge",
    ML_G6_XLARGE: "ml.g6.xlarge",
    ML_INF2_24XLARGE: "ml.inf2.24xlarge",
    ML_INF2_48XLARGE: "ml.inf2.48xlarge",
    ML_INF2_8XLARGE: "ml.inf2.8xlarge",
    ML_INF2_XLARGE: "ml.inf2.xlarge",
    ML_P4DE_24XLARGE: "ml.p4de.24xlarge",
    ML_P4D_24XLARGE: "ml.p4d.24xlarge",
    ML_P5_48XLARGE: "ml.p5.48xlarge",
    ML_TRN1N_32XLARGE: "ml.trn1n.32xlarge",
    ML_TRN1_2XLARGE: "ml.trn1.2xlarge",
    ML_TRN1_32XLARGE: "ml.trn1.32xlarge",
};
exports.OptimizationConfig = void 0;
(function (OptimizationConfig) {
    OptimizationConfig.visit = (value, visitor) => {
        if (value.ModelQuantizationConfig !== undefined)
            return visitor.ModelQuantizationConfig(value.ModelQuantizationConfig);
        if (value.ModelCompilationConfig !== undefined)
            return visitor.ModelCompilationConfig(value.ModelCompilationConfig);
        if (value.ModelShardingConfig !== undefined)
            return visitor.ModelShardingConfig(value.ModelShardingConfig);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.OptimizationConfig || (exports.OptimizationConfig = {}));
const PartnerAppAuthType = {
    IAM: "IAM",
};
const PartnerAppType = {
    COMET: "comet",
    DEEPCHECKS_LLM_EVALUATION: "deepchecks-llm-evaluation",
    FIDDLER: "fiddler",
    LAKERA_GUARD: "lakera-guard",
};
const DataDistributionType = {
    FULLYREPLICATED: "FullyReplicated",
    SHARDEDBYS3KEY: "ShardedByS3Key",
};
const InputMode = {
    FILE: "File",
    PIPE: "Pipe",
};
const RedshiftResultCompressionType = {
    BZIP2: "BZIP2",
    GZIP: "GZIP",
    NONE: "None",
    SNAPPY: "SNAPPY",
    ZSTD: "ZSTD",
};
const RedshiftResultFormat = {
    CSV: "CSV",
    PARQUET: "PARQUET",
};
const ProcessingS3CompressionType = {
    GZIP: "Gzip",
    NONE: "None",
};
const ProcessingS3DataType = {
    MANIFEST_FILE: "ManifestFile",
    S3_PREFIX: "S3Prefix",
};
exports.CustomFileSystem = void 0;
(function (CustomFileSystem) {
    CustomFileSystem.visit = (value, visitor) => {
        if (value.EFSFileSystem !== undefined)
            return visitor.EFSFileSystem(value.EFSFileSystem);
        if (value.FSxLustreFileSystem !== undefined)
            return visitor.FSxLustreFileSystem(value.FSxLustreFileSystem);
        if (value.S3FileSystem !== undefined)
            return visitor.S3FileSystem(value.S3FileSystem);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.CustomFileSystem || (exports.CustomFileSystem = {}));
const SharingType = {
    Private: "Private",
    Shared: "Shared",
};
const StudioLifecycleConfigAppType = {
    CodeEditor: "CodeEditor",
    JupyterLab: "JupyterLab",
    JupyterServer: "JupyterServer",
    KernelGateway: "KernelGateway",
};
const JoinSource = {
    INPUT: "Input",
    NONE: "None",
};
exports.TrialComponentParameterValue = void 0;
(function (TrialComponentParameterValue) {
    TrialComponentParameterValue.visit = (value, visitor) => {
        if (value.StringValue !== undefined)
            return visitor.StringValue(value.StringValue);
        if (value.NumberValue !== undefined)
            return visitor.NumberValue(value.NumberValue);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.TrialComponentParameterValue || (exports.TrialComponentParameterValue = {}));
const TrialComponentPrimaryStatus = {
    COMPLETED: "Completed",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
};
const WorkforceIpAddressType = {
    dualstack: "dualstack",
    ipv4: "ipv4",
};
const EnabledOrDisabled = {
    Disabled: "Disabled",
    Enabled: "Enabled",
};
const CrossAccountFilterOption = {
    CROSS_ACCOUNT: "CrossAccount",
    SAME_ACCOUNT: "SameAccount",
};
const Statistic = {
    AVERAGE: "Average",
    MAXIMUM: "Maximum",
    MINIMUM: "Minimum",
    SAMPLE_COUNT: "SampleCount",
    SUM: "Sum",
};
const RuleEvaluationStatus = {
    ERROR: "Error",
    IN_PROGRESS: "InProgress",
    ISSUES_FOUND: "IssuesFound",
    NO_ISSUES_FOUND: "NoIssuesFound",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
};
const RetentionType = {
    Delete: "Delete",
    Retain: "Retain",
};
const RecommendationStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    NOT_APPLICABLE: "NOT_APPLICABLE",
};
const StageStatus = {
    Creating: "CREATING",
    Deployed: "DEPLOYED",
    Failed: "FAILED",
    InProgress: "INPROGRESS",
    ReadyToDeploy: "READYTODEPLOY",
    Starting: "STARTING",
    Stopped: "STOPPED",
    Stopping: "STOPPING",
};
const CreateModelCardRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithyClient.SENSITIVE_STRING }),
});
const ModelPackageModelCardFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ModelCardContent && { ModelCardContent: smithyClient.SENSITIVE_STRING }),
});
const CreateModelPackageInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ModelCard && { ModelCard: ModelPackageModelCardFilterSensitiveLog(obj.ModelCard) }),
});
const OidcConfigFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ClientSecret && { ClientSecret: smithyClient.SENSITIVE_STRING }),
});
const CreateWorkforceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OidcConfig && { OidcConfig: OidcConfigFilterSensitiveLog(obj.OidcConfig) }),
});

const se_AddAssociationCommand = async (input, context) => {
    const headers = sharedHeaders("AddAssociation");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AddTagsCommand = async (input, context) => {
    const headers = sharedHeaders("AddTags");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AssociateTrialComponentCommand = async (input, context) => {
    const headers = sharedHeaders("AssociateTrialComponent");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_AttachClusterNodeVolumeCommand = async (input, context) => {
    const headers = sharedHeaders("AttachClusterNodeVolume");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchAddClusterNodesCommand = async (input, context) => {
    const headers = sharedHeaders("BatchAddClusterNodes");
    let body;
    body = JSON.stringify(se_BatchAddClusterNodesRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchDeleteClusterNodesCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDeleteClusterNodes");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_BatchDescribeModelPackageCommand = async (input, context) => {
    const headers = sharedHeaders("BatchDescribeModelPackage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateActionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAction");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateAlgorithmCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAlgorithm");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateAppCommand = async (input, context) => {
    const headers = sharedHeaders("CreateApp");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateAppImageConfigCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAppImageConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateArtifactCommand = async (input, context) => {
    const headers = sharedHeaders("CreateArtifact");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateAutoMLJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateAutoMLJob");
    let body;
    body = JSON.stringify(se_CreateAutoMLJobRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateAutoMLJobV2Command = async (input, context) => {
    const headers = sharedHeaders("CreateAutoMLJobV2");
    let body;
    body = JSON.stringify(se_CreateAutoMLJobV2Request(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateClusterCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCluster");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateClusterSchedulerConfigCommand = async (input, context) => {
    const headers = sharedHeaders("CreateClusterSchedulerConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateCodeRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCodeRepository");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateCompilationJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateCompilationJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateComputeQuotaCommand = async (input, context) => {
    const headers = sharedHeaders("CreateComputeQuota");
    let body;
    body = JSON.stringify(se_CreateComputeQuotaRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateContextCommand = async (input, context) => {
    const headers = sharedHeaders("CreateContext");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateDataQualityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDataQualityJobDefinition");
    let body;
    body = JSON.stringify(se_CreateDataQualityJobDefinitionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateDeviceFleetCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDeviceFleet");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateDomainCommand = async (input, context) => {
    const headers = sharedHeaders("CreateDomain");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateEdgeDeploymentPlanCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEdgeDeploymentPlan");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateEdgeDeploymentStageCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEdgeDeploymentStage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateEdgePackagingJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEdgePackagingJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEndpoint");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateEndpointConfigCommand = async (input, context) => {
    const headers = sharedHeaders("CreateEndpointConfig");
    let body;
    body = JSON.stringify(se_CreateEndpointConfigInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateExperiment");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateFeatureGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFeatureGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateFlowDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateFlowDefinition");
    let body;
    body = JSON.stringify(se_CreateFlowDefinitionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateHubCommand = async (input, context) => {
    const headers = sharedHeaders("CreateHub");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateHubContentPresignedUrlsCommand = async (input, context) => {
    const headers = sharedHeaders("CreateHubContentPresignedUrls");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateHubContentReferenceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateHubContentReference");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateHumanTaskUiCommand = async (input, context) => {
    const headers = sharedHeaders("CreateHumanTaskUi");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateHyperParameterTuningJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateHyperParameterTuningJob");
    let body;
    body = JSON.stringify(se_CreateHyperParameterTuningJobRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateImageCommand = async (input, context) => {
    const headers = sharedHeaders("CreateImage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateImageVersionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateImageVersion");
    let body;
    body = JSON.stringify(se_CreateImageVersionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateInferenceComponentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateInferenceComponent");
    let body;
    body = JSON.stringify(se_CreateInferenceComponentInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateInferenceExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateInferenceExperiment");
    let body;
    body = JSON.stringify(se_CreateInferenceExperimentRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateInferenceRecommendationsJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateInferenceRecommendationsJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateLabelingJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateLabelingJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateMlflowTrackingServerCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMlflowTrackingServer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateModelCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModel");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateModelBiasJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelBiasJobDefinition");
    let body;
    body = JSON.stringify(se_CreateModelBiasJobDefinitionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateModelCardCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelCard");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateModelCardExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelCardExportJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateModelExplainabilityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelExplainabilityJobDefinition");
    let body;
    body = JSON.stringify(se_CreateModelExplainabilityJobDefinitionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateModelPackageCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelPackage");
    let body;
    body = JSON.stringify(se_CreateModelPackageInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateModelPackageGroupCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelPackageGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateModelQualityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("CreateModelQualityJobDefinition");
    let body;
    body = JSON.stringify(se_CreateModelQualityJobDefinitionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateMonitoringScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("CreateMonitoringSchedule");
    let body;
    body = JSON.stringify(se_CreateMonitoringScheduleRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateNotebookInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateNotebookInstance");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateNotebookInstanceLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("CreateNotebookInstanceLifecycleConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateOptimizationJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateOptimizationJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePartnerAppCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePartnerApp");
    let body;
    body = JSON.stringify(se_CreatePartnerAppRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePartnerAppPresignedUrlCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePartnerAppPresignedUrl");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePipelineCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePipeline");
    let body;
    body = JSON.stringify(se_CreatePipelineRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePresignedDomainUrlCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePresignedDomainUrl");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePresignedMlflowTrackingServerUrlCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePresignedMlflowTrackingServerUrl");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreatePresignedNotebookInstanceUrlCommand = async (input, context) => {
    const headers = sharedHeaders("CreatePresignedNotebookInstanceUrl");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateProcessingJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateProcessingJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("CreateProject");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateSpaceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateSpace");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateStudioLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("CreateStudioLifecycleConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTrainingJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTrainingJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTrainingPlanCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTrainingPlan");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTransformJobCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTransformJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTrialCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTrial");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateTrialComponentCommand = async (input, context) => {
    const headers = sharedHeaders("CreateTrialComponent");
    let body;
    body = JSON.stringify(se_CreateTrialComponentRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateUserProfileCommand = async (input, context) => {
    const headers = sharedHeaders("CreateUserProfile");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateWorkforceCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWorkforce");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_CreateWorkteamCommand = async (input, context) => {
    const headers = sharedHeaders("CreateWorkteam");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteActionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAction");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAlgorithmCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAlgorithm");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAppCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteApp");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAppImageConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAppImageConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteArtifactCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteArtifact");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteAssociationCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteAssociation");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteClusterCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCluster");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteClusterSchedulerConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteClusterSchedulerConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteCodeRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCodeRepository");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteCompilationJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteCompilationJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteComputeQuotaCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteComputeQuota");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteContextCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteContext");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDataQualityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDataQualityJobDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDeviceFleetCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDeviceFleet");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteDomain");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteEdgeDeploymentPlanCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEdgeDeploymentPlan");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteEdgeDeploymentStageCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEdgeDeploymentStage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEndpoint");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteEndpointConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteEndpointConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteExperiment");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteFeatureGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFeatureGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteFlowDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteFlowDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteHubCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteHub");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteHubContentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteHubContent");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteHubContentReferenceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteHubContentReference");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteHumanTaskUiCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteHumanTaskUi");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteHyperParameterTuningJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteHyperParameterTuningJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteImageCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteImage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteImageVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteImageVersion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteInferenceComponentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteInferenceComponent");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteInferenceExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteInferenceExperiment");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteMlflowTrackingServerCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMlflowTrackingServer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteModelCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModel");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteModelBiasJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelBiasJobDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteModelCardCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelCard");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteModelExplainabilityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelExplainabilityJobDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteModelPackageCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelPackage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteModelPackageGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelPackageGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteModelPackageGroupPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelPackageGroupPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteModelQualityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteModelQualityJobDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteMonitoringScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteMonitoringSchedule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteNotebookInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteNotebookInstance");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteNotebookInstanceLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteNotebookInstanceLifecycleConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteOptimizationJobCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteOptimizationJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeletePartnerAppCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePartnerApp");
    let body;
    body = JSON.stringify(se_DeletePartnerAppRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeletePipelineCommand = async (input, context) => {
    const headers = sharedHeaders("DeletePipeline");
    let body;
    body = JSON.stringify(se_DeletePipelineRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteProjectCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteProject");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteSpaceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteSpace");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteStudioLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteStudioLifecycleConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTagsCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTags");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTrialCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTrial");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteTrialComponentCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteTrialComponent");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteUserProfileCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteUserProfile");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteWorkforceCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWorkforce");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeleteWorkteamCommand = async (input, context) => {
    const headers = sharedHeaders("DeleteWorkteam");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DeregisterDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("DeregisterDevices");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeActionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAction");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAlgorithmCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAlgorithm");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAppCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeApp");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAppImageConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAppImageConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeArtifactCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeArtifact");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAutoMLJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeAutoMLJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeAutoMLJobV2Command = async (input, context) => {
    const headers = sharedHeaders("DescribeAutoMLJobV2");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeClusterCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCluster");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeClusterEventCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeClusterEvent");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeClusterNodeCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeClusterNode");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeClusterSchedulerConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeClusterSchedulerConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCodeRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCodeRepository");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeCompilationJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeCompilationJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeComputeQuotaCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeComputeQuota");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeContextCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeContext");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDataQualityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDataQualityJobDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDeviceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDevice");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDeviceFleetCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDeviceFleet");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeDomainCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeDomain");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeEdgeDeploymentPlanCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEdgeDeploymentPlan");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeEdgePackagingJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEdgePackagingJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEndpoint");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeEndpointConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeEndpointConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeExperiment");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFeatureGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFeatureGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFeatureMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFeatureMetadata");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeFlowDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeFlowDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeHubCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeHub");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeHubContentCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeHubContent");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeHumanTaskUiCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeHumanTaskUi");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeHyperParameterTuningJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeHyperParameterTuningJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeImageCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeImageVersionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeImageVersion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInferenceComponentCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInferenceComponent");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInferenceExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInferenceExperiment");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeInferenceRecommendationsJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeInferenceRecommendationsJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLabelingJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeLabelingJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeLineageGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeLineageGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMlflowTrackingServerCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMlflowTrackingServer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeModelCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModel");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeModelBiasJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelBiasJobDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeModelCardCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelCard");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeModelCardExportJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelCardExportJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeModelExplainabilityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelExplainabilityJobDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeModelPackageCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelPackage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeModelPackageGroupCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelPackageGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeModelQualityJobDefinitionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeModelQualityJobDefinition");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeMonitoringScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeMonitoringSchedule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeNotebookInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeNotebookInstance");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeNotebookInstanceLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeNotebookInstanceLifecycleConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeOptimizationJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeOptimizationJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePartnerAppCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePartnerApp");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePipelineCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePipeline");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePipelineDefinitionForExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePipelineDefinitionForExecution");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribePipelineExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("DescribePipelineExecution");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeProcessingJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeProcessingJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeProjectCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeProject");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeReservedCapacityCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeReservedCapacity");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSpaceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSpace");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeStudioLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeStudioLifecycleConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeSubscribedWorkteamCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeSubscribedWorkteam");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTrainingJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTrainingJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTrainingPlanCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTrainingPlan");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTransformJobCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTransformJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTrialCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTrial");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeTrialComponentCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeTrialComponent");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeUserProfileCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeUserProfile");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeWorkforceCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkforce");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DescribeWorkteamCommand = async (input, context) => {
    const headers = sharedHeaders("DescribeWorkteam");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DetachClusterNodeVolumeCommand = async (input, context) => {
    const headers = sharedHeaders("DetachClusterNodeVolume");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisableSagemakerServicecatalogPortfolioCommand = async (input, context) => {
    const headers = sharedHeaders("DisableSagemakerServicecatalogPortfolio");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_DisassociateTrialComponentCommand = async (input, context) => {
    const headers = sharedHeaders("DisassociateTrialComponent");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_EnableSagemakerServicecatalogPortfolioCommand = async (input, context) => {
    const headers = sharedHeaders("EnableSagemakerServicecatalogPortfolio");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetDeviceFleetReportCommand = async (input, context) => {
    const headers = sharedHeaders("GetDeviceFleetReport");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetLineageGroupPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetLineageGroupPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetModelPackageGroupPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("GetModelPackageGroupPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSagemakerServicecatalogPortfolioStatusCommand = async (input, context) => {
    const headers = sharedHeaders("GetSagemakerServicecatalogPortfolioStatus");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetScalingConfigurationRecommendationCommand = async (input, context) => {
    const headers = sharedHeaders("GetScalingConfigurationRecommendation");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_GetSearchSuggestionsCommand = async (input, context) => {
    const headers = sharedHeaders("GetSearchSuggestions");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ImportHubContentCommand = async (input, context) => {
    const headers = sharedHeaders("ImportHubContent");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListActionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListActions");
    let body;
    body = JSON.stringify(se_ListActionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAlgorithmsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAlgorithms");
    let body;
    body = JSON.stringify(se_ListAlgorithmsInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAliasesCommand = async (input, context) => {
    const headers = sharedHeaders("ListAliases");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAppImageConfigsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAppImageConfigs");
    let body;
    body = JSON.stringify(se_ListAppImageConfigsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAppsCommand = async (input, context) => {
    const headers = sharedHeaders("ListApps");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListArtifactsCommand = async (input, context) => {
    const headers = sharedHeaders("ListArtifacts");
    let body;
    body = JSON.stringify(se_ListArtifactsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAssociationsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAssociations");
    let body;
    body = JSON.stringify(se_ListAssociationsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListAutoMLJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListAutoMLJobs");
    let body;
    body = JSON.stringify(se_ListAutoMLJobsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListCandidatesForAutoMLJobCommand = async (input, context) => {
    const headers = sharedHeaders("ListCandidatesForAutoMLJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListClusterEventsCommand = async (input, context) => {
    const headers = sharedHeaders("ListClusterEvents");
    let body;
    body = JSON.stringify(se_ListClusterEventsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListClusterNodesCommand = async (input, context) => {
    const headers = sharedHeaders("ListClusterNodes");
    let body;
    body = JSON.stringify(se_ListClusterNodesRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListClustersCommand = async (input, context) => {
    const headers = sharedHeaders("ListClusters");
    let body;
    body = JSON.stringify(se_ListClustersRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListClusterSchedulerConfigsCommand = async (input, context) => {
    const headers = sharedHeaders("ListClusterSchedulerConfigs");
    let body;
    body = JSON.stringify(se_ListClusterSchedulerConfigsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListCodeRepositoriesCommand = async (input, context) => {
    const headers = sharedHeaders("ListCodeRepositories");
    let body;
    body = JSON.stringify(se_ListCodeRepositoriesInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListCompilationJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListCompilationJobs");
    let body;
    body = JSON.stringify(se_ListCompilationJobsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListComputeQuotasCommand = async (input, context) => {
    const headers = sharedHeaders("ListComputeQuotas");
    let body;
    body = JSON.stringify(se_ListComputeQuotasRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListContextsCommand = async (input, context) => {
    const headers = sharedHeaders("ListContexts");
    let body;
    body = JSON.stringify(se_ListContextsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDataQualityJobDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDataQualityJobDefinitions");
    let body;
    body = JSON.stringify(se_ListDataQualityJobDefinitionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDeviceFleetsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDeviceFleets");
    let body;
    body = JSON.stringify(se_ListDeviceFleetsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("ListDevices");
    let body;
    body = JSON.stringify(se_ListDevicesRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListDomainsCommand = async (input, context) => {
    const headers = sharedHeaders("ListDomains");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListEdgeDeploymentPlansCommand = async (input, context) => {
    const headers = sharedHeaders("ListEdgeDeploymentPlans");
    let body;
    body = JSON.stringify(se_ListEdgeDeploymentPlansRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListEdgePackagingJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEdgePackagingJobs");
    let body;
    body = JSON.stringify(se_ListEdgePackagingJobsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListEndpointConfigsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEndpointConfigs");
    let body;
    body = JSON.stringify(se_ListEndpointConfigsInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListEndpointsCommand = async (input, context) => {
    const headers = sharedHeaders("ListEndpoints");
    let body;
    body = JSON.stringify(se_ListEndpointsInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListExperimentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListExperiments");
    let body;
    body = JSON.stringify(se_ListExperimentsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListFeatureGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFeatureGroups");
    let body;
    body = JSON.stringify(se_ListFeatureGroupsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListFlowDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListFlowDefinitions");
    let body;
    body = JSON.stringify(se_ListFlowDefinitionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListHubContentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListHubContents");
    let body;
    body = JSON.stringify(se_ListHubContentsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListHubContentVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListHubContentVersions");
    let body;
    body = JSON.stringify(se_ListHubContentVersionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListHubsCommand = async (input, context) => {
    const headers = sharedHeaders("ListHubs");
    let body;
    body = JSON.stringify(se_ListHubsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListHumanTaskUisCommand = async (input, context) => {
    const headers = sharedHeaders("ListHumanTaskUis");
    let body;
    body = JSON.stringify(se_ListHumanTaskUisRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListHyperParameterTuningJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListHyperParameterTuningJobs");
    let body;
    body = JSON.stringify(se_ListHyperParameterTuningJobsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListImagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListImages");
    let body;
    body = JSON.stringify(se_ListImagesRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListImageVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListImageVersions");
    let body;
    body = JSON.stringify(se_ListImageVersionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListInferenceComponentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListInferenceComponents");
    let body;
    body = JSON.stringify(se_ListInferenceComponentsInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListInferenceExperimentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListInferenceExperiments");
    let body;
    body = JSON.stringify(se_ListInferenceExperimentsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListInferenceRecommendationsJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListInferenceRecommendationsJobs");
    let body;
    body = JSON.stringify(se_ListInferenceRecommendationsJobsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListInferenceRecommendationsJobStepsCommand = async (input, context) => {
    const headers = sharedHeaders("ListInferenceRecommendationsJobSteps");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListLabelingJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListLabelingJobs");
    let body;
    body = JSON.stringify(se_ListLabelingJobsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListLabelingJobsForWorkteamCommand = async (input, context) => {
    const headers = sharedHeaders("ListLabelingJobsForWorkteam");
    let body;
    body = JSON.stringify(se_ListLabelingJobsForWorkteamRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListLineageGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListLineageGroups");
    let body;
    body = JSON.stringify(se_ListLineageGroupsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListMlflowTrackingServersCommand = async (input, context) => {
    const headers = sharedHeaders("ListMlflowTrackingServers");
    let body;
    body = JSON.stringify(se_ListMlflowTrackingServersRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListModelBiasJobDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelBiasJobDefinitions");
    let body;
    body = JSON.stringify(se_ListModelBiasJobDefinitionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListModelCardExportJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelCardExportJobs");
    let body;
    body = JSON.stringify(se_ListModelCardExportJobsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListModelCardsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelCards");
    let body;
    body = JSON.stringify(se_ListModelCardsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListModelCardVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelCardVersions");
    let body;
    body = JSON.stringify(se_ListModelCardVersionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListModelExplainabilityJobDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelExplainabilityJobDefinitions");
    let body;
    body = JSON.stringify(se_ListModelExplainabilityJobDefinitionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListModelMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelMetadata");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListModelPackageGroupsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelPackageGroups");
    let body;
    body = JSON.stringify(se_ListModelPackageGroupsInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListModelPackagesCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelPackages");
    let body;
    body = JSON.stringify(se_ListModelPackagesInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListModelQualityJobDefinitionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModelQualityJobDefinitions");
    let body;
    body = JSON.stringify(se_ListModelQualityJobDefinitionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListModelsCommand = async (input, context) => {
    const headers = sharedHeaders("ListModels");
    let body;
    body = JSON.stringify(se_ListModelsInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListMonitoringAlertHistoryCommand = async (input, context) => {
    const headers = sharedHeaders("ListMonitoringAlertHistory");
    let body;
    body = JSON.stringify(se_ListMonitoringAlertHistoryRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListMonitoringAlertsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMonitoringAlerts");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListMonitoringExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListMonitoringExecutions");
    let body;
    body = JSON.stringify(se_ListMonitoringExecutionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListMonitoringSchedulesCommand = async (input, context) => {
    const headers = sharedHeaders("ListMonitoringSchedules");
    let body;
    body = JSON.stringify(se_ListMonitoringSchedulesRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListNotebookInstanceLifecycleConfigsCommand = async (input, context) => {
    const headers = sharedHeaders("ListNotebookInstanceLifecycleConfigs");
    let body;
    body = JSON.stringify(se_ListNotebookInstanceLifecycleConfigsInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListNotebookInstancesCommand = async (input, context) => {
    const headers = sharedHeaders("ListNotebookInstances");
    let body;
    body = JSON.stringify(se_ListNotebookInstancesInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListOptimizationJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListOptimizationJobs");
    let body;
    body = JSON.stringify(se_ListOptimizationJobsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPartnerAppsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPartnerApps");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPipelineExecutionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPipelineExecutions");
    let body;
    body = JSON.stringify(se_ListPipelineExecutionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPipelineExecutionStepsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPipelineExecutionSteps");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPipelineParametersForExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("ListPipelineParametersForExecution");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPipelinesCommand = async (input, context) => {
    const headers = sharedHeaders("ListPipelines");
    let body;
    body = JSON.stringify(se_ListPipelinesRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListPipelineVersionsCommand = async (input, context) => {
    const headers = sharedHeaders("ListPipelineVersions");
    let body;
    body = JSON.stringify(se_ListPipelineVersionsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListProcessingJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListProcessingJobs");
    let body;
    body = JSON.stringify(se_ListProcessingJobsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListProjectsCommand = async (input, context) => {
    const headers = sharedHeaders("ListProjects");
    let body;
    body = JSON.stringify(se_ListProjectsInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListResourceCatalogsCommand = async (input, context) => {
    const headers = sharedHeaders("ListResourceCatalogs");
    let body;
    body = JSON.stringify(se_ListResourceCatalogsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSpacesCommand = async (input, context) => {
    const headers = sharedHeaders("ListSpaces");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStageDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("ListStageDevices");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListStudioLifecycleConfigsCommand = async (input, context) => {
    const headers = sharedHeaders("ListStudioLifecycleConfigs");
    let body;
    body = JSON.stringify(se_ListStudioLifecycleConfigsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListSubscribedWorkteamsCommand = async (input, context) => {
    const headers = sharedHeaders("ListSubscribedWorkteams");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTagsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTags");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTrainingJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTrainingJobs");
    let body;
    body = JSON.stringify(se_ListTrainingJobsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTrainingJobsForHyperParameterTuningJobCommand = async (input, context) => {
    const headers = sharedHeaders("ListTrainingJobsForHyperParameterTuningJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTrainingPlansCommand = async (input, context) => {
    const headers = sharedHeaders("ListTrainingPlans");
    let body;
    body = JSON.stringify(se_ListTrainingPlansRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTransformJobsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTransformJobs");
    let body;
    body = JSON.stringify(se_ListTransformJobsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTrialComponentsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTrialComponents");
    let body;
    body = JSON.stringify(se_ListTrialComponentsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListTrialsCommand = async (input, context) => {
    const headers = sharedHeaders("ListTrials");
    let body;
    body = JSON.stringify(se_ListTrialsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUltraServersByReservedCapacityCommand = async (input, context) => {
    const headers = sharedHeaders("ListUltraServersByReservedCapacity");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListUserProfilesCommand = async (input, context) => {
    const headers = sharedHeaders("ListUserProfiles");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListWorkforcesCommand = async (input, context) => {
    const headers = sharedHeaders("ListWorkforces");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_ListWorkteamsCommand = async (input, context) => {
    const headers = sharedHeaders("ListWorkteams");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_PutModelPackageGroupPolicyCommand = async (input, context) => {
    const headers = sharedHeaders("PutModelPackageGroupPolicy");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_QueryLineageCommand = async (input, context) => {
    const headers = sharedHeaders("QueryLineage");
    let body;
    body = JSON.stringify(se_QueryLineageRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RegisterDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("RegisterDevices");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RenderUiTemplateCommand = async (input, context) => {
    const headers = sharedHeaders("RenderUiTemplate");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_RetryPipelineExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("RetryPipelineExecution");
    let body;
    body = JSON.stringify(se_RetryPipelineExecutionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SearchCommand = async (input, context) => {
    const headers = sharedHeaders("Search");
    let body;
    body = JSON.stringify(se_SearchRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SearchTrainingPlanOfferingsCommand = async (input, context) => {
    const headers = sharedHeaders("SearchTrainingPlanOfferings");
    let body;
    body = JSON.stringify(se_SearchTrainingPlanOfferingsRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SendPipelineExecutionStepFailureCommand = async (input, context) => {
    const headers = sharedHeaders("SendPipelineExecutionStepFailure");
    let body;
    body = JSON.stringify(se_SendPipelineExecutionStepFailureRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_SendPipelineExecutionStepSuccessCommand = async (input, context) => {
    const headers = sharedHeaders("SendPipelineExecutionStepSuccess");
    let body;
    body = JSON.stringify(se_SendPipelineExecutionStepSuccessRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartEdgeDeploymentStageCommand = async (input, context) => {
    const headers = sharedHeaders("StartEdgeDeploymentStage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartInferenceExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("StartInferenceExperiment");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartMlflowTrackingServerCommand = async (input, context) => {
    const headers = sharedHeaders("StartMlflowTrackingServer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartMonitoringScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("StartMonitoringSchedule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartNotebookInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("StartNotebookInstance");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartPipelineExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StartPipelineExecution");
    let body;
    body = JSON.stringify(se_StartPipelineExecutionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StartSessionCommand = async (input, context) => {
    const headers = sharedHeaders("StartSession");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopAutoMLJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopAutoMLJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopCompilationJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopCompilationJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopEdgeDeploymentStageCommand = async (input, context) => {
    const headers = sharedHeaders("StopEdgeDeploymentStage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopEdgePackagingJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopEdgePackagingJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopHyperParameterTuningJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopHyperParameterTuningJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopInferenceExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("StopInferenceExperiment");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopInferenceRecommendationsJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopInferenceRecommendationsJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopLabelingJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopLabelingJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopMlflowTrackingServerCommand = async (input, context) => {
    const headers = sharedHeaders("StopMlflowTrackingServer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopMonitoringScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("StopMonitoringSchedule");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopNotebookInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("StopNotebookInstance");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopOptimizationJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopOptimizationJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopPipelineExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("StopPipelineExecution");
    let body;
    body = JSON.stringify(se_StopPipelineExecutionRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopProcessingJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopProcessingJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopTrainingJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopTrainingJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_StopTransformJobCommand = async (input, context) => {
    const headers = sharedHeaders("StopTransformJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateActionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAction");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateAppImageConfigCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateAppImageConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateArtifactCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateArtifact");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateClusterCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCluster");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateClusterSchedulerConfigCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateClusterSchedulerConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateClusterSoftwareCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateClusterSoftware");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateCodeRepositoryCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateCodeRepository");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateComputeQuotaCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateComputeQuota");
    let body;
    body = JSON.stringify(se_UpdateComputeQuotaRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateContextCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateContext");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateDeviceFleetCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDeviceFleet");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateDevicesCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDevices");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateDomainCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateDomain");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateEndpointCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEndpoint");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateEndpointWeightsAndCapacitiesCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateEndpointWeightsAndCapacities");
    let body;
    body = JSON.stringify(se_UpdateEndpointWeightsAndCapacitiesInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateExperiment");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateFeatureGroupCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFeatureGroup");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateFeatureMetadataCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateFeatureMetadata");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateHubCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateHub");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateHubContentCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateHubContent");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateHubContentReferenceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateHubContentReference");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateImageCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateImage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateImageVersionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateImageVersion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateInferenceComponentCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateInferenceComponent");
    let body;
    body = JSON.stringify(se_UpdateInferenceComponentInput(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateInferenceComponentRuntimeConfigCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateInferenceComponentRuntimeConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateInferenceExperimentCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateInferenceExperiment");
    let body;
    body = JSON.stringify(se_UpdateInferenceExperimentRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateMlflowTrackingServerCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMlflowTrackingServer");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateModelCardCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateModelCard");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateModelPackageCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateModelPackage");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateMonitoringAlertCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMonitoringAlert");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateMonitoringScheduleCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateMonitoringSchedule");
    let body;
    body = JSON.stringify(se_UpdateMonitoringScheduleRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateNotebookInstanceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateNotebookInstance");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateNotebookInstanceLifecycleConfigCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateNotebookInstanceLifecycleConfig");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdatePartnerAppCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePartnerApp");
    let body;
    body = JSON.stringify(se_UpdatePartnerAppRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdatePipelineCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePipeline");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdatePipelineExecutionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePipelineExecution");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdatePipelineVersionCommand = async (input, context) => {
    const headers = sharedHeaders("UpdatePipelineVersion");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateProjectCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateProject");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateSpaceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateSpace");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateTrainingJobCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTrainingJob");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateTrialCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTrial");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateTrialComponentCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateTrialComponent");
    let body;
    body = JSON.stringify(se_UpdateTrialComponentRequest(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateUserProfileCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateUserProfile");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateWorkforceCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateWorkforce");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const se_UpdateWorkteamCommand = async (input, context) => {
    const headers = sharedHeaders("UpdateWorkteam");
    let body;
    body = JSON.stringify(smithyClient._json(input));
    return buildHttpRpcRequest(context, headers, "/", undefined, body);
};
const de_AddAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AddAssociationResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AddTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AddTagsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AssociateTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AssociateTrialComponentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_AttachClusterNodeVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_AttachClusterNodeVolumeResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchAddClusterNodesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_BatchAddClusterNodesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchDeleteClusterNodesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_BatchDeleteClusterNodesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_BatchDescribeModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_BatchDescribeModelPackageOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateActionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAlgorithmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateAlgorithmOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateAppResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAppImageConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateAppImageConfigResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateArtifactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateArtifactResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAutoMLJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateAutoMLJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateAutoMLJobV2Command = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateAutoMLJobV2Response(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateClusterResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateClusterSchedulerConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateClusterSchedulerConfigResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCodeRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateCodeRepositoryOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateCompilationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateCompilationJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateComputeQuotaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateComputeQuotaResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateContextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateContextResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDataQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateDataQualityJobDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateDeviceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateDomainResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateEdgeDeploymentPlanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateEdgeDeploymentPlanResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateEdgeDeploymentStageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateEdgePackagingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_CreateEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateEndpointOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateEndpointConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateEndpointConfigOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateExperimentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFeatureGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateFeatureGroupResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateFlowDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateFlowDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateHubCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateHubResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateHubContentPresignedUrlsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateHubContentPresignedUrlsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateHubContentReferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateHubContentReferenceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateHumanTaskUiCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateHumanTaskUiResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateHyperParameterTuningJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateHyperParameterTuningJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateImageResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateImageVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateImageVersionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateInferenceComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateInferenceComponentOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateInferenceExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateInferenceExperimentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateInferenceRecommendationsJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateInferenceRecommendationsJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateLabelingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateLabelingJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateMlflowTrackingServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateMlflowTrackingServerResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateModelOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelBiasJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateModelBiasJobDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelCardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateModelCardResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelCardExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateModelCardExportJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelExplainabilityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateModelExplainabilityJobDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateModelPackageOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelPackageGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateModelPackageGroupOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateModelQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateModelQualityJobDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateMonitoringScheduleResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateNotebookInstanceOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateNotebookInstanceLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateNotebookInstanceLifecycleConfigOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateOptimizationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateOptimizationJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePartnerAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreatePartnerAppResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePartnerAppPresignedUrlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreatePartnerAppPresignedUrlResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreatePipelineResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePresignedDomainUrlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreatePresignedDomainUrlResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePresignedMlflowTrackingServerUrlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreatePresignedMlflowTrackingServerUrlResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreatePresignedNotebookInstanceUrlCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreatePresignedNotebookInstanceUrlOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateProcessingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateProcessingJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateProjectOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateSpaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateSpaceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateStudioLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateStudioLifecycleConfigResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrainingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateTrainingJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrainingPlanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateTrainingPlanResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTransformJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateTransformJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateTrialResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateTrialComponentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateUserProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateUserProfileResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateWorkforceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateWorkforceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CreateWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_CreateWorkteamResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteActionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteAlgorithmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteAppImageConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteArtifactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteArtifactResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteAssociationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteAssociationResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteClusterResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteClusterSchedulerConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteCodeRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteCompilationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteComputeQuotaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteContextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteContextResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteDataQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteDeviceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteEdgeDeploymentPlanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteEdgeDeploymentStageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteEndpointConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteExperimentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteFeatureGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteFlowDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteFlowDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteHubCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteHubContentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteHubContentReferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteHumanTaskUiCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteHumanTaskUiResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteHyperParameterTuningJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteImageResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteImageVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteImageVersionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteInferenceComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteInferenceExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteInferenceExperimentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteMlflowTrackingServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteMlflowTrackingServerResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelBiasJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelCardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelExplainabilityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelPackageGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelPackageGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteModelQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteNotebookInstanceLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteOptimizationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeletePartnerAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeletePartnerAppResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeletePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeletePipelineResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteSpaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteStudioLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteTagsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTrialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteTrialResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteTrialComponentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteUserProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DeleteWorkforceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteWorkforceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeleteWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DeleteWorkteamResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DeregisterDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_DescribeActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeActionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAlgorithmCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeAlgorithmOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeAppResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAppImageConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeAppImageConfigResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeArtifactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeArtifactResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAutoMLJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeAutoMLJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeAutoMLJobV2Command = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeAutoMLJobV2Response(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeClusterResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClusterEventCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeClusterEventResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClusterNodeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeClusterNodeResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeClusterSchedulerConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeClusterSchedulerConfigResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCodeRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeCodeRepositoryOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeCompilationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeCompilationJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeComputeQuotaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeComputeQuotaResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeContextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeContextResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDataQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeDataQualityJobDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDeviceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeDeviceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDeviceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeDeviceFleetResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeDomainResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEdgeDeploymentPlanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeEdgeDeploymentPlanResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEdgePackagingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeEdgePackagingJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeEndpointOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeEndpointConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeEndpointConfigOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeExperimentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFeatureGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeFeatureGroupResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFeatureMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeFeatureMetadataResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeFlowDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeFlowDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHubCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeHubResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHubContentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeHubContentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHumanTaskUiCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeHumanTaskUiResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeHyperParameterTuningJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeHyperParameterTuningJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeImageResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeImageVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeImageVersionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInferenceComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeInferenceComponentOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInferenceExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeInferenceExperimentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeInferenceRecommendationsJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeInferenceRecommendationsJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLabelingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeLabelingJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeLineageGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeLineageGroupResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMlflowTrackingServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeMlflowTrackingServerResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelBiasJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelBiasJobDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelCardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelCardResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelCardExportJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelCardExportJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelExplainabilityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelExplainabilityJobDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelPackageOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelPackageGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelPackageGroupOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeModelQualityJobDefinitionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeModelQualityJobDefinitionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeMonitoringScheduleResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeNotebookInstanceOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeNotebookInstanceLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeNotebookInstanceLifecycleConfigOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeOptimizationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeOptimizationJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePartnerAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribePartnerAppResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribePipelineResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePipelineDefinitionForExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribePipelineDefinitionForExecutionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribePipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribePipelineExecutionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeProcessingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeProcessingJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeProjectOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeReservedCapacityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeReservedCapacityResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSpaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeSpaceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeStudioLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeStudioLifecycleConfigResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeSubscribedWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeSubscribedWorkteamResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrainingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrainingJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrainingPlanCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrainingPlanResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTransformJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeTransformJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrialResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeTrialComponentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeUserProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeUserProfileResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeWorkforceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeWorkforceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DescribeWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DescribeWorkteamResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DetachClusterNodeVolumeCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DetachClusterNodeVolumeResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisableSagemakerServicecatalogPortfolioCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DisableSagemakerServicecatalogPortfolioOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_DisassociateTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_DisassociateTrialComponentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_EnableSagemakerServicecatalogPortfolioCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_EnableSagemakerServicecatalogPortfolioOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetDeviceFleetReportCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetDeviceFleetReportResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetLineageGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetLineageGroupPolicyResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetModelPackageGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetModelPackageGroupPolicyOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSagemakerServicecatalogPortfolioStatusCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetSagemakerServicecatalogPortfolioStatusOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetScalingConfigurationRecommendationCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetScalingConfigurationRecommendationResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_GetSearchSuggestionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_GetSearchSuggestionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ImportHubContentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ImportHubContentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListActionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListActionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAlgorithmsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListAlgorithmsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAliasesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListAliasesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAppImageConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListAppImageConfigsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAppsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListAppsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListArtifactsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListArtifactsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAssociationsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListAssociationsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListAutoMLJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListAutoMLJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListCandidatesForAutoMLJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListCandidatesForAutoMLJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListClusterEventsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListClusterEventsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListClusterNodesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListClusterNodesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListClustersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListClustersResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListClusterSchedulerConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListClusterSchedulerConfigsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListCodeRepositoriesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListCodeRepositoriesOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListCompilationJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListCompilationJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListComputeQuotasCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListComputeQuotasResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListContextsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListContextsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDataQualityJobDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListDataQualityJobDefinitionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDeviceFleetsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListDeviceFleetsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListDevicesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListDomainsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListDomainsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEdgeDeploymentPlansCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListEdgeDeploymentPlansResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEdgePackagingJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListEdgePackagingJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEndpointConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListEndpointConfigsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListEndpointsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListEndpointsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListExperimentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListExperimentsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListFeatureGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListFeatureGroupsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListFlowDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListFlowDefinitionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListHubContentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListHubContentsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListHubContentVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListHubContentVersionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListHubsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListHubsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListHumanTaskUisCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListHumanTaskUisResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListHyperParameterTuningJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListHyperParameterTuningJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListImagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListImagesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListImageVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListImageVersionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListInferenceComponentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListInferenceComponentsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListInferenceExperimentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListInferenceExperimentsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListInferenceRecommendationsJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListInferenceRecommendationsJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListInferenceRecommendationsJobStepsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListInferenceRecommendationsJobStepsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListLabelingJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListLabelingJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListLabelingJobsForWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListLabelingJobsForWorkteamResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListLineageGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListLineageGroupsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMlflowTrackingServersCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListMlflowTrackingServersResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelBiasJobDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListModelBiasJobDefinitionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelCardExportJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListModelCardExportJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelCardsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListModelCardsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelCardVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListModelCardVersionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelExplainabilityJobDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListModelExplainabilityJobDefinitionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListModelMetadataResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelPackageGroupsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListModelPackageGroupsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelPackagesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListModelPackagesOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelQualityJobDefinitionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListModelQualityJobDefinitionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListModelsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListModelsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMonitoringAlertHistoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListMonitoringAlertHistoryResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMonitoringAlertsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListMonitoringAlertsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMonitoringExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListMonitoringExecutionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListMonitoringSchedulesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListMonitoringSchedulesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListNotebookInstanceLifecycleConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListNotebookInstanceLifecycleConfigsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListNotebookInstancesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListNotebookInstancesOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListOptimizationJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListOptimizationJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPartnerAppsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListPartnerAppsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPipelineExecutionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListPipelineExecutionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPipelineExecutionStepsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListPipelineExecutionStepsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPipelineParametersForExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListPipelineParametersForExecutionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPipelinesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListPipelinesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListPipelineVersionsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListPipelineVersionsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListProcessingJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListProcessingJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListProjectsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListProjectsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListResourceCatalogsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListResourceCatalogsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSpacesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListSpacesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStageDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListStageDevicesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListStudioLifecycleConfigsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListStudioLifecycleConfigsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListSubscribedWorkteamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListSubscribedWorkteamsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTagsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListTagsOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTrainingJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListTrainingJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTrainingJobsForHyperParameterTuningJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListTrainingJobsForHyperParameterTuningJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTrainingPlansCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListTrainingPlansResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTransformJobsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListTransformJobsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTrialComponentsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListTrialComponentsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListTrialsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListTrialsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUltraServersByReservedCapacityCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListUltraServersByReservedCapacityResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListUserProfilesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListUserProfilesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListWorkforcesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListWorkforcesResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_ListWorkteamsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_ListWorkteamsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_PutModelPackageGroupPolicyCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_PutModelPackageGroupPolicyOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_QueryLineageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_QueryLineageResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RegisterDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_RenderUiTemplateCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_RenderUiTemplateResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_RetryPipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_RetryPipelineExecutionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SearchCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_SearchResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SearchTrainingPlanOfferingsCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_SearchTrainingPlanOfferingsResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SendPipelineExecutionStepFailureCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_SendPipelineExecutionStepFailureResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_SendPipelineExecutionStepSuccessCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_SendPipelineExecutionStepSuccessResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartEdgeDeploymentStageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StartInferenceExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartInferenceExperimentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartMlflowTrackingServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartMlflowTrackingServerResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StartNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StartPipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartPipelineExecutionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StartSessionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StartSessionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopAutoMLJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopCompilationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopEdgeDeploymentStageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopEdgePackagingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopHyperParameterTuningJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopInferenceExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StopInferenceExperimentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopInferenceRecommendationsJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopLabelingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopMlflowTrackingServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StopMlflowTrackingServerResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopOptimizationJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopPipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_StopPipelineExecutionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_StopProcessingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopTrainingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_StopTransformJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateActionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateActionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateAppImageConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateAppImageConfigResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateArtifactCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateArtifactResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateClusterCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateClusterResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateClusterSchedulerConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateClusterSchedulerConfigResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateClusterSoftwareCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateClusterSoftwareResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateCodeRepositoryCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateCodeRepositoryOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateComputeQuotaCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateComputeQuotaResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateContextCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateContextResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateDeviceFleetCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateDevicesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateDomainCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateDomainResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateEndpointCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateEndpointOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateEndpointWeightsAndCapacitiesCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateEndpointWeightsAndCapacitiesOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateExperimentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateFeatureGroupCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateFeatureGroupResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateFeatureMetadataCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    await smithyClient.collectBody(output.body, context);
    const response = {
        $metadata: deserializeMetadata(output),
    };
    return response;
};
const de_UpdateHubCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateHubResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateHubContentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateHubContentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateHubContentReferenceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateHubContentReferenceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateImageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateImageResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateImageVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateImageVersionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateInferenceComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateInferenceComponentOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateInferenceComponentRuntimeConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateInferenceComponentRuntimeConfigOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateInferenceExperimentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateInferenceExperimentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateMlflowTrackingServerCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateMlflowTrackingServerResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateModelCardCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateModelCardResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateModelPackageCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateModelPackageOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateMonitoringAlertCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateMonitoringAlertResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateMonitoringScheduleCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateMonitoringScheduleResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateNotebookInstanceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateNotebookInstanceOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateNotebookInstanceLifecycleConfigCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateNotebookInstanceLifecycleConfigOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdatePartnerAppCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdatePartnerAppResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdatePipelineCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdatePipelineResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdatePipelineExecutionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdatePipelineExecutionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdatePipelineVersionCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdatePipelineVersionResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateProjectCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateProjectOutput(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateSpaceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateSpaceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateTrainingJobCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateTrainingJobResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateTrialCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateTrialResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateTrialComponentCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateTrialComponentResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateUserProfileCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateUserProfileResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateWorkforceCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateWorkforceResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_UpdateWorkteamCommand = async (output, context) => {
    if (output.statusCode >= 300) {
        return de_CommandError(output, context);
    }
    const data = await core$1.parseJsonBody(output.body, context);
    let contents = {};
    contents = de_UpdateWorkteamResponse(data);
    const response = {
        $metadata: deserializeMetadata(output),
        ...contents,
    };
    return response;
};
const de_CommandError = async (output, context) => {
    const parsedOutput = {
        ...output,
        body: await core$1.parseJsonErrorBody(output.body, context),
    };
    const errorCode = core$1.loadRestJsonErrorCode(output, parsedOutput.body);
    switch (errorCode) {
        case "ResourceLimitExceeded":
        case "com.amazonaws.sagemaker#ResourceLimitExceeded":
            throw await de_ResourceLimitExceededRes(parsedOutput);
        case "ResourceNotFound":
        case "com.amazonaws.sagemaker#ResourceNotFound":
            throw await de_ResourceNotFoundRes(parsedOutput);
        case "ResourceInUse":
        case "com.amazonaws.sagemaker#ResourceInUse":
            throw await de_ResourceInUseRes(parsedOutput);
        case "ConflictException":
        case "com.amazonaws.sagemaker#ConflictException":
            throw await de_ConflictExceptionRes(parsedOutput);
        default:
            const parsedBody = parsedOutput.body;
            return throwDefaultError({
                output,
                parsedBody,
                errorCode,
            });
    }
};
const de_ConflictExceptionRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ConflictException({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceInUseRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceInUse({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceLimitExceededRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceLimitExceeded({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const de_ResourceNotFoundRes = async (parsedOutput, context) => {
    const body = parsedOutput.body;
    const deserialized = smithyClient._json(body);
    const exception = new ResourceNotFound({
        $metadata: deserializeMetadata(parsedOutput),
        ...deserialized,
    });
    return smithyClient.decorateServiceException(exception, body);
};
const se_AutoMLDataSplitConfig = (input, context) => {
    return smithyClient.take(input, {
        ValidationFraction: smithyClient.serializeFloat,
    });
};
const se_AutoMLJobConfig = (input, context) => {
    return smithyClient.take(input, {
        CandidateGenerationConfig: smithyClient._json,
        CompletionCriteria: smithyClient._json,
        DataSplitConfig: (_) => se_AutoMLDataSplitConfig(_),
        Mode: [],
        SecurityConfig: smithyClient._json,
    });
};
const se_BatchAddClusterNodesRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        ClusterName: [],
        NodesToAdd: smithyClient._json,
    });
};
const se_BatchTransformInput = (input, context) => {
    return smithyClient.take(input, {
        DataCapturedDestinationS3Uri: [],
        DatasetFormat: smithyClient._json,
        EndTimeOffset: [],
        ExcludeFeaturesAttribute: [],
        FeaturesAttribute: [],
        InferenceAttribute: [],
        LocalPath: [],
        ProbabilityAttribute: [],
        ProbabilityThresholdAttribute: smithyClient.serializeFloat,
        S3DataDistributionType: [],
        S3InputMode: [],
        StartTimeOffset: [],
    });
};
const se_ComputeQuotaConfig = (input, context) => {
    return smithyClient.take(input, {
        ComputeQuotaResources: (_) => se_ComputeQuotaResourceConfigList(_),
        PreemptTeamTasks: [],
        ResourceSharingConfig: smithyClient._json,
    });
};
const se_ComputeQuotaResourceConfig = (input, context) => {
    return smithyClient.take(input, {
        Accelerators: [],
        Count: [],
        InstanceType: [],
        MemoryInGiB: smithyClient.serializeFloat,
        VCpu: smithyClient.serializeFloat,
    });
};
const se_ComputeQuotaResourceConfigList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ComputeQuotaResourceConfig(entry);
    });
};
const se_CreateAutoMLJobRequest = (input, context) => {
    return smithyClient.take(input, {
        AutoMLJobConfig: (_) => se_AutoMLJobConfig(_),
        AutoMLJobName: [],
        AutoMLJobObjective: smithyClient._json,
        GenerateCandidateDefinitionsOnly: [],
        InputDataConfig: smithyClient._json,
        ModelDeployConfig: smithyClient._json,
        OutputDataConfig: smithyClient._json,
        ProblemType: [],
        RoleArn: [],
        Tags: smithyClient._json,
    });
};
const se_CreateAutoMLJobV2Request = (input, context) => {
    return smithyClient.take(input, {
        AutoMLComputeConfig: smithyClient._json,
        AutoMLJobInputDataConfig: smithyClient._json,
        AutoMLJobName: [],
        AutoMLJobObjective: smithyClient._json,
        AutoMLProblemTypeConfig: smithyClient._json,
        DataSplitConfig: (_) => se_AutoMLDataSplitConfig(_),
        ModelDeployConfig: smithyClient._json,
        OutputDataConfig: smithyClient._json,
        RoleArn: [],
        SecurityConfig: smithyClient._json,
        Tags: smithyClient._json,
    });
};
const se_CreateComputeQuotaRequest = (input, context) => {
    return smithyClient.take(input, {
        ActivationState: [],
        ClusterArn: [],
        ComputeQuotaConfig: (_) => se_ComputeQuotaConfig(_),
        ComputeQuotaTarget: smithyClient._json,
        Description: [],
        Name: [],
        Tags: smithyClient._json,
    });
};
const se_CreateDataQualityJobDefinitionRequest = (input, context) => {
    return smithyClient.take(input, {
        DataQualityAppSpecification: smithyClient._json,
        DataQualityBaselineConfig: smithyClient._json,
        DataQualityJobInput: (_) => se_DataQualityJobInput(_),
        DataQualityJobOutputConfig: smithyClient._json,
        JobDefinitionName: [],
        JobResources: smithyClient._json,
        NetworkConfig: smithyClient._json,
        RoleArn: [],
        StoppingCondition: smithyClient._json,
        Tags: smithyClient._json,
    });
};
const se_CreateEndpointConfigInput = (input, context) => {
    return smithyClient.take(input, {
        AsyncInferenceConfig: smithyClient._json,
        DataCaptureConfig: smithyClient._json,
        EnableNetworkIsolation: [],
        EndpointConfigName: [],
        ExecutionRoleArn: [],
        ExplainerConfig: smithyClient._json,
        KmsKeyId: [],
        ProductionVariants: (_) => se_ProductionVariantList(_),
        ShadowProductionVariants: (_) => se_ProductionVariantList(_),
        Tags: smithyClient._json,
        VpcConfig: smithyClient._json,
    });
};
const se_CreateFlowDefinitionRequest = (input, context) => {
    return smithyClient.take(input, {
        FlowDefinitionName: [],
        HumanLoopActivationConfig: (_) => se_HumanLoopActivationConfig(_),
        HumanLoopConfig: smithyClient._json,
        HumanLoopRequestSource: smithyClient._json,
        OutputConfig: smithyClient._json,
        RoleArn: [],
        Tags: smithyClient._json,
    });
};
const se_CreateHyperParameterTuningJobRequest = (input, context) => {
    return smithyClient.take(input, {
        Autotune: smithyClient._json,
        HyperParameterTuningJobConfig: (_) => se_HyperParameterTuningJobConfig(_),
        HyperParameterTuningJobName: [],
        Tags: smithyClient._json,
        TrainingJobDefinition: smithyClient._json,
        TrainingJobDefinitions: smithyClient._json,
        WarmStartConfig: smithyClient._json,
    });
};
const se_CreateImageVersionRequest = (input, context) => {
    return smithyClient.take(input, {
        Aliases: smithyClient._json,
        BaseImage: [],
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        Horovod: [],
        ImageName: [],
        JobType: [],
        MLFramework: [],
        Processor: [],
        ProgrammingLang: [],
        ReleaseNotes: [],
        VendorGuidance: [],
    });
};
const se_CreateInferenceComponentInput = (input, context) => {
    return smithyClient.take(input, {
        EndpointName: [],
        InferenceComponentName: [],
        RuntimeConfig: smithyClient._json,
        Specification: (_) => se_InferenceComponentSpecification(_),
        Tags: smithyClient._json,
        VariantName: [],
    });
};
const se_CreateInferenceExperimentRequest = (input, context) => {
    return smithyClient.take(input, {
        DataStorageConfig: smithyClient._json,
        Description: [],
        EndpointName: [],
        KmsKey: [],
        ModelVariants: smithyClient._json,
        Name: [],
        RoleArn: [],
        Schedule: (_) => se_InferenceExperimentSchedule(_),
        ShadowModeConfig: smithyClient._json,
        Tags: smithyClient._json,
        Type: [],
    });
};
const se_CreateModelBiasJobDefinitionRequest = (input, context) => {
    return smithyClient.take(input, {
        JobDefinitionName: [],
        JobResources: smithyClient._json,
        ModelBiasAppSpecification: smithyClient._json,
        ModelBiasBaselineConfig: smithyClient._json,
        ModelBiasJobInput: (_) => se_ModelBiasJobInput(_),
        ModelBiasJobOutputConfig: smithyClient._json,
        NetworkConfig: smithyClient._json,
        RoleArn: [],
        StoppingCondition: smithyClient._json,
        Tags: smithyClient._json,
    });
};
const se_CreateModelExplainabilityJobDefinitionRequest = (input, context) => {
    return smithyClient.take(input, {
        JobDefinitionName: [],
        JobResources: smithyClient._json,
        ModelExplainabilityAppSpecification: smithyClient._json,
        ModelExplainabilityBaselineConfig: smithyClient._json,
        ModelExplainabilityJobInput: (_) => se_ModelExplainabilityJobInput(_),
        ModelExplainabilityJobOutputConfig: smithyClient._json,
        NetworkConfig: smithyClient._json,
        RoleArn: [],
        StoppingCondition: smithyClient._json,
        Tags: smithyClient._json,
    });
};
const se_CreateModelPackageInput = (input, context) => {
    return smithyClient.take(input, {
        AdditionalInferenceSpecifications: smithyClient._json,
        CertifyForMarketplace: [],
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        CustomerMetadataProperties: smithyClient._json,
        Domain: [],
        DriftCheckBaselines: smithyClient._json,
        InferenceSpecification: smithyClient._json,
        MetadataProperties: smithyClient._json,
        ModelApprovalStatus: [],
        ModelCard: smithyClient._json,
        ModelLifeCycle: smithyClient._json,
        ModelMetrics: smithyClient._json,
        ModelPackageDescription: [],
        ModelPackageGroupName: [],
        ModelPackageName: [],
        SamplePayloadUrl: [],
        SecurityConfig: smithyClient._json,
        SkipModelValidation: [],
        SourceAlgorithmSpecification: smithyClient._json,
        SourceUri: [],
        Tags: smithyClient._json,
        Task: [],
        ValidationSpecification: smithyClient._json,
    });
};
const se_CreateModelQualityJobDefinitionRequest = (input, context) => {
    return smithyClient.take(input, {
        JobDefinitionName: [],
        JobResources: smithyClient._json,
        ModelQualityAppSpecification: smithyClient._json,
        ModelQualityBaselineConfig: smithyClient._json,
        ModelQualityJobInput: (_) => se_ModelQualityJobInput(_),
        ModelQualityJobOutputConfig: smithyClient._json,
        NetworkConfig: smithyClient._json,
        RoleArn: [],
        StoppingCondition: smithyClient._json,
        Tags: smithyClient._json,
    });
};
const se_CreateMonitoringScheduleRequest = (input, context) => {
    return smithyClient.take(input, {
        MonitoringScheduleConfig: (_) => se_MonitoringScheduleConfig(_),
        MonitoringScheduleName: [],
        Tags: smithyClient._json,
    });
};
const se_CreatePartnerAppRequest = (input, context) => {
    return smithyClient.take(input, {
        ApplicationConfig: smithyClient._json,
        AuthType: [],
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        EnableIamSessionBasedIdentity: [],
        ExecutionRoleArn: [],
        KmsKeyId: [],
        MaintenanceConfig: smithyClient._json,
        Name: [],
        Tags: smithyClient._json,
        Tier: [],
        Type: [],
    });
};
const se_CreatePipelineRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        ParallelismConfiguration: smithyClient._json,
        PipelineDefinition: [],
        PipelineDefinitionS3Location: smithyClient._json,
        PipelineDescription: [],
        PipelineDisplayName: [],
        PipelineName: [],
        RoleArn: [],
        Tags: smithyClient._json,
    });
};
const se_CreateTrialComponentRequest = (input, context) => {
    return smithyClient.take(input, {
        DisplayName: [],
        EndTime: (_) => _.getTime() / 1_000,
        InputArtifacts: smithyClient._json,
        MetadataProperties: smithyClient._json,
        OutputArtifacts: smithyClient._json,
        Parameters: (_) => se_TrialComponentParameters(_),
        StartTime: (_) => _.getTime() / 1_000,
        Status: smithyClient._json,
        Tags: smithyClient._json,
        TrialComponentName: [],
    });
};
const se_DataQualityJobInput = (input, context) => {
    return smithyClient.take(input, {
        BatchTransformInput: (_) => se_BatchTransformInput(_),
        EndpointInput: (_) => se_EndpointInput(_),
    });
};
const se_DeletePartnerAppRequest = (input, context) => {
    return smithyClient.take(input, {
        Arn: [],
        ClientToken: [true, (_) => _ ?? uuid.v4()],
    });
};
const se_DeletePipelineRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        PipelineName: [],
    });
};
const se_DesiredWeightAndCapacity = (input, context) => {
    return smithyClient.take(input, {
        DesiredInstanceCount: [],
        DesiredWeight: smithyClient.serializeFloat,
        ServerlessUpdateConfig: smithyClient._json,
        VariantName: [],
    });
};
const se_DesiredWeightAndCapacityList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_DesiredWeightAndCapacity(entry);
    });
};
const se_EndpointInput = (input, context) => {
    return smithyClient.take(input, {
        EndTimeOffset: [],
        EndpointName: [],
        ExcludeFeaturesAttribute: [],
        FeaturesAttribute: [],
        InferenceAttribute: [],
        LocalPath: [],
        ProbabilityAttribute: [],
        ProbabilityThresholdAttribute: smithyClient.serializeFloat,
        S3DataDistributionType: [],
        S3InputMode: [],
        StartTimeOffset: [],
    });
};
const se_HumanLoopActivationConditionsConfig = (input, context) => {
    return smithyClient.take(input, {
        HumanLoopActivationConditions: smithyClient.LazyJsonString.from,
    });
};
const se_HumanLoopActivationConfig = (input, context) => {
    return smithyClient.take(input, {
        HumanLoopActivationConditionsConfig: (_) => se_HumanLoopActivationConditionsConfig(_),
    });
};
const se_HyperParameterTuningJobConfig = (input, context) => {
    return smithyClient.take(input, {
        HyperParameterTuningJobObjective: smithyClient._json,
        ParameterRanges: smithyClient._json,
        RandomSeed: [],
        ResourceLimits: smithyClient._json,
        Strategy: [],
        StrategyConfig: smithyClient._json,
        TrainingJobEarlyStoppingType: [],
        TuningJobCompletionCriteria: (_) => se_TuningJobCompletionCriteria(_),
    });
};
const se_InferenceComponentComputeResourceRequirements = (input, context) => {
    return smithyClient.take(input, {
        MaxMemoryRequiredInMb: [],
        MinMemoryRequiredInMb: [],
        NumberOfAcceleratorDevicesRequired: smithyClient.serializeFloat,
        NumberOfCpuCoresRequired: smithyClient.serializeFloat,
    });
};
const se_InferenceComponentSpecification = (input, context) => {
    return smithyClient.take(input, {
        BaseInferenceComponentName: [],
        ComputeResourceRequirements: (_) => se_InferenceComponentComputeResourceRequirements(_),
        Container: smithyClient._json,
        ModelName: [],
        StartupParameters: smithyClient._json,
    });
};
const se_InferenceExperimentSchedule = (input, context) => {
    return smithyClient.take(input, {
        EndTime: (_) => _.getTime() / 1_000,
        StartTime: (_) => _.getTime() / 1_000,
    });
};
const se_ListActionsRequest = (input, context) => {
    return smithyClient.take(input, {
        ActionType: [],
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        SourceUri: [],
    });
};
const se_ListAlgorithmsInput = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListAppImageConfigsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        ModifiedTimeAfter: (_) => _.getTime() / 1_000,
        ModifiedTimeBefore: (_) => _.getTime() / 1_000,
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListArtifactsRequest = (input, context) => {
    return smithyClient.take(input, {
        ArtifactType: [],
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        SourceUri: [],
    });
};
const se_ListAssociationsRequest = (input, context) => {
    return smithyClient.take(input, {
        AssociationType: [],
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        DestinationArn: [],
        DestinationType: [],
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        SourceArn: [],
        SourceType: [],
    });
};
const se_ListAutoMLJobsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListClusterEventsRequest = (input, context) => {
    return smithyClient.take(input, {
        ClusterName: [],
        EventTimeAfter: (_) => _.getTime() / 1_000,
        EventTimeBefore: (_) => _.getTime() / 1_000,
        InstanceGroupName: [],
        MaxResults: [],
        NextToken: [],
        NodeId: [],
        ResourceType: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListClusterNodesRequest = (input, context) => {
    return smithyClient.take(input, {
        ClusterName: [],
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        IncludeNodeLogicalIds: [],
        InstanceGroupNameContains: [],
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListClusterSchedulerConfigsRequest = (input, context) => {
    return smithyClient.take(input, {
        ClusterArn: [],
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        Status: [],
    });
};
const se_ListClustersRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        TrainingPlanArn: [],
    });
};
const se_ListCodeRepositoriesInput = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListCompilationJobsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListComputeQuotasRequest = (input, context) => {
    return smithyClient.take(input, {
        ClusterArn: [],
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        Status: [],
    });
};
const se_ListContextsRequest = (input, context) => {
    return smithyClient.take(input, {
        ContextType: [],
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        SourceUri: [],
    });
};
const se_ListDataQualityJobDefinitionsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        EndpointName: [],
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListDeviceFleetsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListDevicesRequest = (input, context) => {
    return smithyClient.take(input, {
        DeviceFleetName: [],
        LatestHeartbeatAfter: (_) => _.getTime() / 1_000,
        MaxResults: [],
        ModelName: [],
        NextToken: [],
    });
};
const se_ListEdgeDeploymentPlansRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        DeviceFleetNameContains: [],
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListEdgePackagingJobsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        ModelNameContains: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListEndpointConfigsInput = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListEndpointsInput = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListExperimentsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListFeatureGroupsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        FeatureGroupStatusEquals: [],
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        OfflineStoreStatusEquals: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListFlowDefinitionsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NextToken: [],
        SortOrder: [],
    });
};
const se_ListHubContentsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        HubContentType: [],
        HubName: [],
        MaxResults: [],
        MaxSchemaVersion: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListHubContentVersionsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        HubContentName: [],
        HubContentType: [],
        HubName: [],
        MaxResults: [],
        MaxSchemaVersion: [],
        MinVersion: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListHubsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListHumanTaskUisRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NextToken: [],
        SortOrder: [],
    });
};
const se_ListHyperParameterTuningJobsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListImagesRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListImageVersionsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        ImageName: [],
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListInferenceComponentsInput = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        EndpointNameEquals: [],
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
        VariantNameEquals: [],
    });
};
const se_ListInferenceExperimentsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
        Type: [],
    });
};
const se_ListInferenceRecommendationsJobsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        ModelNameEquals: [],
        ModelPackageVersionArnEquals: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListLabelingJobsForWorkteamRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        JobReferenceCodeContains: [],
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        WorkteamArn: [],
    });
};
const se_ListLabelingJobsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListLineageGroupsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListMlflowTrackingServersRequest = (input, context) => {
    return smithyClient.take(input, {
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        MlflowVersion: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        TrackingServerStatus: [],
    });
};
const se_ListModelBiasJobDefinitionsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        EndpointName: [],
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelCardExportJobsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        ModelCardExportJobNameContains: [],
        ModelCardName: [],
        ModelCardVersion: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListModelCardsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        ModelCardStatus: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelCardVersionsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        ModelCardName: [],
        ModelCardStatus: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelExplainabilityJobDefinitionsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        EndpointName: [],
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelPackageGroupsInput = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        CrossAccountFilterOption: [],
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelPackagesInput = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        ModelApprovalStatus: [],
        ModelPackageGroupName: [],
        ModelPackageType: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelQualityJobDefinitionsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        EndpointName: [],
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListModelsInput = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListMonitoringAlertHistoryRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        MonitoringAlertName: [],
        MonitoringScheduleName: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListMonitoringExecutionsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        EndpointName: [],
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        MonitoringJobDefinitionName: [],
        MonitoringScheduleName: [],
        MonitoringTypeEquals: [],
        NextToken: [],
        ScheduledTimeAfter: (_) => _.getTime() / 1_000,
        ScheduledTimeBefore: (_) => _.getTime() / 1_000,
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListMonitoringSchedulesRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        EndpointName: [],
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        MonitoringJobDefinitionName: [],
        MonitoringTypeEquals: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListNotebookInstanceLifecycleConfigsInput = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListNotebookInstancesInput = (input, context) => {
    return smithyClient.take(input, {
        AdditionalCodeRepositoryEquals: [],
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        DefaultCodeRepositoryContains: [],
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        NotebookInstanceLifecycleConfigNameContains: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListOptimizationJobsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        OptimizationContains: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListPipelineExecutionsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NextToken: [],
        PipelineName: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListPipelinesRequest = (input, context) => {
    return smithyClient.take(input, {
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NextToken: [],
        PipelineNamePrefix: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListPipelineVersionsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NextToken: [],
        PipelineName: [],
        SortOrder: [],
    });
};
const se_ListProcessingJobsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListProjectsInput = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListResourceCatalogsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListStudioLifecycleConfigsRequest = (input, context) => {
    return smithyClient.take(input, {
        AppTypeEquals: [],
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        ModifiedTimeAfter: (_) => _.getTime() / 1_000,
        ModifiedTimeBefore: (_) => _.getTime() / 1_000,
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
    });
};
const se_ListTrainingJobsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
        TrainingPlanArnEquals: [],
        WarmPoolStatusEquals: [],
    });
};
const se_ListTrainingPlansRequest = (input, context) => {
    return smithyClient.take(input, {
        Filters: smithyClient._json,
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StartTimeAfter: (_) => _.getTime() / 1_000,
        StartTimeBefore: (_) => _.getTime() / 1_000,
    });
};
const se_ListTransformJobsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreationTimeAfter: (_) => _.getTime() / 1_000,
        CreationTimeBefore: (_) => _.getTime() / 1_000,
        LastModifiedTimeAfter: (_) => _.getTime() / 1_000,
        LastModifiedTimeBefore: (_) => _.getTime() / 1_000,
        MaxResults: [],
        NameContains: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        StatusEquals: [],
    });
};
const se_ListTrialComponentsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        ExperimentName: [],
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        SourceArn: [],
        TrialName: [],
    });
};
const se_ListTrialsRequest = (input, context) => {
    return smithyClient.take(input, {
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        ExperimentName: [],
        MaxResults: [],
        NextToken: [],
        SortBy: [],
        SortOrder: [],
        TrialComponentName: [],
    });
};
const se_ModelBiasJobInput = (input, context) => {
    return smithyClient.take(input, {
        BatchTransformInput: (_) => se_BatchTransformInput(_),
        EndpointInput: (_) => se_EndpointInput(_),
        GroundTruthS3Input: smithyClient._json,
    });
};
const se_ModelExplainabilityJobInput = (input, context) => {
    return smithyClient.take(input, {
        BatchTransformInput: (_) => se_BatchTransformInput(_),
        EndpointInput: (_) => se_EndpointInput(_),
    });
};
const se_ModelQualityJobInput = (input, context) => {
    return smithyClient.take(input, {
        BatchTransformInput: (_) => se_BatchTransformInput(_),
        EndpointInput: (_) => se_EndpointInput(_),
        GroundTruthS3Input: smithyClient._json,
    });
};
const se_MonitoringInput = (input, context) => {
    return smithyClient.take(input, {
        BatchTransformInput: (_) => se_BatchTransformInput(_),
        EndpointInput: (_) => se_EndpointInput(_),
    });
};
const se_MonitoringInputs = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_MonitoringInput(entry);
    });
};
const se_MonitoringJobDefinition = (input, context) => {
    return smithyClient.take(input, {
        BaselineConfig: smithyClient._json,
        Environment: smithyClient._json,
        MonitoringAppSpecification: smithyClient._json,
        MonitoringInputs: (_) => se_MonitoringInputs(_),
        MonitoringOutputConfig: smithyClient._json,
        MonitoringResources: smithyClient._json,
        NetworkConfig: smithyClient._json,
        RoleArn: [],
        StoppingCondition: smithyClient._json,
    });
};
const se_MonitoringScheduleConfig = (input, context) => {
    return smithyClient.take(input, {
        MonitoringJobDefinition: (_) => se_MonitoringJobDefinition(_),
        MonitoringJobDefinitionName: [],
        MonitoringType: [],
        ScheduleConfig: smithyClient._json,
    });
};
const se_ProductionVariant = (input, context) => {
    return smithyClient.take(input, {
        AcceleratorType: [],
        CapacityReservationConfig: smithyClient._json,
        ContainerStartupHealthCheckTimeoutInSeconds: [],
        CoreDumpConfig: smithyClient._json,
        EnableSSMAccess: [],
        InferenceAmiVersion: [],
        InitialInstanceCount: [],
        InitialVariantWeight: smithyClient.serializeFloat,
        InstanceType: [],
        ManagedInstanceScaling: smithyClient._json,
        ModelDataDownloadTimeoutInSeconds: [],
        ModelName: [],
        RoutingConfig: smithyClient._json,
        ServerlessConfig: smithyClient._json,
        VariantName: [],
        VolumeSizeInGB: [],
    });
};
const se_ProductionVariantList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_ProductionVariant(entry);
    });
};
const se_QueryFilters = (input, context) => {
    return smithyClient.take(input, {
        CreatedAfter: (_) => _.getTime() / 1_000,
        CreatedBefore: (_) => _.getTime() / 1_000,
        LineageTypes: smithyClient._json,
        ModifiedAfter: (_) => _.getTime() / 1_000,
        ModifiedBefore: (_) => _.getTime() / 1_000,
        Properties: smithyClient._json,
        Types: smithyClient._json,
    });
};
const se_QueryLineageRequest = (input, context) => {
    return smithyClient.take(input, {
        Direction: [],
        Filters: (_) => se_QueryFilters(_),
        IncludeEdges: [],
        MaxDepth: [],
        MaxResults: [],
        NextToken: [],
        StartArns: smithyClient._json,
    });
};
const se_RetryPipelineExecutionRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        ParallelismConfiguration: smithyClient._json,
        PipelineExecutionArn: [],
    });
};
const se_SearchExpression = (input, context) => {
    return smithyClient.take(input, {
        Filters: smithyClient._json,
        NestedFilters: smithyClient._json,
        Operator: [],
        SubExpressions: (_) => se_SearchExpressionList(_),
    });
};
const se_SearchExpressionList = (input, context) => {
    return input
        .filter((e) => e != null)
        .map((entry) => {
        return se_SearchExpression(entry);
    });
};
const se_SearchRequest = (input, context) => {
    return smithyClient.take(input, {
        CrossAccountFilterOption: [],
        MaxResults: [],
        NextToken: [],
        Resource: [],
        SearchExpression: (_) => se_SearchExpression(_),
        SortBy: [],
        SortOrder: [],
        VisibilityConditions: smithyClient._json,
    });
};
const se_SearchTrainingPlanOfferingsRequest = (input, context) => {
    return smithyClient.take(input, {
        DurationHours: [],
        EndTimeBefore: (_) => _.getTime() / 1_000,
        InstanceCount: [],
        InstanceType: [],
        StartTimeAfter: (_) => _.getTime() / 1_000,
        TargetResources: smithyClient._json,
        UltraServerCount: [],
        UltraServerType: [],
    });
};
const se_SendPipelineExecutionStepFailureRequest = (input, context) => {
    return smithyClient.take(input, {
        CallbackToken: [],
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        FailureReason: [],
    });
};
const se_SendPipelineExecutionStepSuccessRequest = (input, context) => {
    return smithyClient.take(input, {
        CallbackToken: [],
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        OutputParameters: smithyClient._json,
    });
};
const se_StartPipelineExecutionRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        ParallelismConfiguration: smithyClient._json,
        PipelineExecutionDescription: [],
        PipelineExecutionDisplayName: [],
        PipelineName: [],
        PipelineParameters: smithyClient._json,
        PipelineVersionId: [],
        SelectiveExecutionConfig: smithyClient._json,
    });
};
const se_StopPipelineExecutionRequest = (input, context) => {
    return smithyClient.take(input, {
        ClientRequestToken: [true, (_) => _ ?? uuid.v4()],
        PipelineExecutionArn: [],
    });
};
const se_TrialComponentParameters = (input, context) => {
    return Object.entries(input).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = se_TrialComponentParameterValue(value);
        return acc;
    }, {});
};
const se_TrialComponentParameterValue = (input, context) => {
    return exports.TrialComponentParameterValue.visit(input, {
        NumberValue: (value) => ({ NumberValue: smithyClient.serializeFloat(value) }),
        StringValue: (value) => ({ StringValue: value }),
        _: (name, value) => ({ [name]: value }),
    });
};
const se_TuningJobCompletionCriteria = (input, context) => {
    return smithyClient.take(input, {
        BestObjectiveNotImproving: smithyClient._json,
        ConvergenceDetected: smithyClient._json,
        TargetObjectiveMetricValue: smithyClient.serializeFloat,
    });
};
const se_UpdateComputeQuotaRequest = (input, context) => {
    return smithyClient.take(input, {
        ActivationState: [],
        ComputeQuotaConfig: (_) => se_ComputeQuotaConfig(_),
        ComputeQuotaId: [],
        ComputeQuotaTarget: smithyClient._json,
        Description: [],
        TargetVersion: [],
    });
};
const se_UpdateEndpointWeightsAndCapacitiesInput = (input, context) => {
    return smithyClient.take(input, {
        DesiredWeightsAndCapacities: (_) => se_DesiredWeightAndCapacityList(_),
        EndpointName: [],
    });
};
const se_UpdateInferenceComponentInput = (input, context) => {
    return smithyClient.take(input, {
        DeploymentConfig: smithyClient._json,
        InferenceComponentName: [],
        RuntimeConfig: smithyClient._json,
        Specification: (_) => se_InferenceComponentSpecification(_),
    });
};
const se_UpdateInferenceExperimentRequest = (input, context) => {
    return smithyClient.take(input, {
        DataStorageConfig: smithyClient._json,
        Description: [],
        ModelVariants: smithyClient._json,
        Name: [],
        Schedule: (_) => se_InferenceExperimentSchedule(_),
        ShadowModeConfig: smithyClient._json,
    });
};
const se_UpdateMonitoringScheduleRequest = (input, context) => {
    return smithyClient.take(input, {
        MonitoringScheduleConfig: (_) => se_MonitoringScheduleConfig(_),
        MonitoringScheduleName: [],
    });
};
const se_UpdatePartnerAppRequest = (input, context) => {
    return smithyClient.take(input, {
        ApplicationConfig: smithyClient._json,
        Arn: [],
        ClientToken: [true, (_) => _ ?? uuid.v4()],
        EnableIamSessionBasedIdentity: [],
        MaintenanceConfig: smithyClient._json,
        Tags: smithyClient._json,
        Tier: [],
    });
};
const se_UpdateTrialComponentRequest = (input, context) => {
    return smithyClient.take(input, {
        DisplayName: [],
        EndTime: (_) => _.getTime() / 1_000,
        InputArtifacts: smithyClient._json,
        InputArtifactsToRemove: smithyClient._json,
        OutputArtifacts: smithyClient._json,
        OutputArtifactsToRemove: smithyClient._json,
        Parameters: (_) => se_TrialComponentParameters(_),
        ParametersToRemove: smithyClient._json,
        StartTime: (_) => _.getTime() / 1_000,
        Status: smithyClient._json,
        TrialComponentName: [],
    });
};
const de_ActionSource = (output, context) => {
    return smithyClient.take(output, {
        SourceId: smithyClient.expectString,
        SourceType: smithyClient.expectString,
        SourceUri: smithyClient.expectString,
    });
};
const de_ActionSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ActionSummary(entry);
    });
    return retVal;
};
const de_ActionSummary = (output, context) => {
    return smithyClient.take(output, {
        ActionArn: smithyClient.expectString,
        ActionName: smithyClient.expectString,
        ActionType: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Source: (_) => de_ActionSource(_),
        Status: smithyClient.expectString,
    });
};
const de_AddAssociationResponse = (output, context) => {
    return smithyClient.take(output, {
        DestinationArn: smithyClient.expectString,
        SourceArn: smithyClient.expectString,
    });
};
const de_AdditionalCodeRepositoryNamesOrUrls = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_AdditionalEnis = (output, context) => {
    return smithyClient.take(output, {
        EfaEnis: (_) => de_EfaEnis(_),
    });
};
const de_AdditionalInferenceSpecificationDefinition = (output, context) => {
    return smithyClient.take(output, {
        Containers: (_) => de_ModelPackageContainerDefinitionList(_),
        Description: smithyClient.expectString,
        Name: smithyClient.expectString,
        SupportedContentTypes: (_) => de_ContentTypes(_),
        SupportedRealtimeInferenceInstanceTypes: (_) => de_RealtimeInferenceInstanceTypes(_),
        SupportedResponseMIMETypes: (_) => de_ResponseMIMETypes(_),
        SupportedTransformInstanceTypes: (_) => de_TransformInstanceTypes(_),
    });
};
const de_AdditionalInferenceSpecifications = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AdditionalInferenceSpecificationDefinition(entry);
    });
    return retVal;
};
const de_AdditionalModelDataSource = (output, context) => {
    return smithyClient.take(output, {
        ChannelName: smithyClient.expectString,
        S3DataSource: (_) => de_S3ModelDataSource(_),
    });
};
const de_AdditionalModelDataSources = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AdditionalModelDataSource(entry);
    });
    return retVal;
};
const de_AdditionalS3DataSource = (output, context) => {
    return smithyClient.take(output, {
        CompressionType: smithyClient.expectString,
        ETag: smithyClient.expectString,
        S3DataType: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_AddTagsOutput = (output, context) => {
    return smithyClient.take(output, {
        Tags: (_) => de_TagList(_),
    });
};
const de_AgentVersion = (output, context) => {
    return smithyClient.take(output, {
        AgentCount: smithyClient.expectLong,
        Version: smithyClient.expectString,
    });
};
const de_AgentVersions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AgentVersion(entry);
    });
    return retVal;
};
const de_AggregationTransformations = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_Alarm = (output, context) => {
    return smithyClient.take(output, {
        AlarmName: smithyClient.expectString,
    });
};
const de_AlarmDetails = (output, context) => {
    return smithyClient.take(output, {
        AlarmName: smithyClient.expectString,
    });
};
const de_AlarmList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Alarm(entry);
    });
    return retVal;
};
const de_AlgorithmSpecification = (output, context) => {
    return smithyClient.take(output, {
        AlgorithmName: smithyClient.expectString,
        ContainerArguments: (_) => de_TrainingContainerArguments(_),
        ContainerEntrypoint: (_) => de_TrainingContainerEntrypoint(_),
        EnableSageMakerMetricsTimeSeries: smithyClient.expectBoolean,
        MetricDefinitions: (_) => de_MetricDefinitionList(_),
        TrainingImage: smithyClient.expectString,
        TrainingImageConfig: (_) => de_TrainingImageConfig(_),
        TrainingInputMode: smithyClient.expectString,
    });
};
const de_AlgorithmStatusDetails = (output, context) => {
    return smithyClient.take(output, {
        ImageScanStatuses: (_) => de_AlgorithmStatusItemList(_),
        ValidationStatuses: (_) => de_AlgorithmStatusItemList(_),
    });
};
const de_AlgorithmStatusItem = (output, context) => {
    return smithyClient.take(output, {
        FailureReason: smithyClient.expectString,
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_AlgorithmStatusItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AlgorithmStatusItem(entry);
    });
    return retVal;
};
const de_AlgorithmSummary = (output, context) => {
    return smithyClient.take(output, {
        AlgorithmArn: smithyClient.expectString,
        AlgorithmDescription: smithyClient.expectString,
        AlgorithmName: smithyClient.expectString,
        AlgorithmStatus: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_AlgorithmSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AlgorithmSummary(entry);
    });
    return retVal;
};
const de_AlgorithmValidationProfile = (output, context) => {
    return smithyClient.take(output, {
        ProfileName: smithyClient.expectString,
        TrainingJobDefinition: (_) => de_TrainingJobDefinition(_),
        TransformJobDefinition: (_) => de_TransformJobDefinition(_),
    });
};
const de_AlgorithmValidationProfiles = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AlgorithmValidationProfile(entry);
    });
    return retVal;
};
const de_AlgorithmValidationSpecification = (output, context) => {
    return smithyClient.take(output, {
        ValidationProfiles: (_) => de_AlgorithmValidationProfiles(_),
        ValidationRole: smithyClient.expectString,
    });
};
const de_AmazonQSettings = (output, context) => {
    return smithyClient.take(output, {
        QProfileArn: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_AnnotationConsolidationConfig = (output, context) => {
    return smithyClient.take(output, {
        AnnotationConsolidationLambdaArn: smithyClient.expectString,
    });
};
const de_AppDetails = (output, context) => {
    return smithyClient.take(output, {
        AppName: smithyClient.expectString,
        AppType: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DomainId: smithyClient.expectString,
        ResourceSpec: (_) => de_ResourceSpec(_),
        SpaceName: smithyClient.expectString,
        Status: smithyClient.expectString,
        UserProfileName: smithyClient.expectString,
    });
};
const de_AppImageConfigDetails = (output, context) => {
    return smithyClient.take(output, {
        AppImageConfigArn: smithyClient.expectString,
        AppImageConfigName: smithyClient.expectString,
        CodeEditorAppImageConfig: (_) => de_CodeEditorAppImageConfig(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        JupyterLabAppImageConfig: (_) => de_JupyterLabAppImageConfig(_),
        KernelGatewayImageConfig: (_) => de_KernelGatewayImageConfig(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_AppImageConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AppImageConfigDetails(entry);
    });
    return retVal;
};
const de_AppLifecycleManagement = (output, context) => {
    return smithyClient.take(output, {
        IdleSettings: (_) => de_IdleSettings(_),
    });
};
const de_AppList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AppDetails(entry);
    });
    return retVal;
};
const de_AppSpecification = (output, context) => {
    return smithyClient.take(output, {
        ContainerArguments: (_) => de_ContainerArguments(_),
        ContainerEntrypoint: (_) => de_ContainerEntrypoint(_),
        ImageUri: smithyClient.expectString,
    });
};
const de_ArtifactSource = (output, context) => {
    return smithyClient.take(output, {
        SourceTypes: (_) => de_ArtifactSourceTypes(_),
        SourceUri: smithyClient.expectString,
    });
};
const de_ArtifactSourceType = (output, context) => {
    return smithyClient.take(output, {
        SourceIdType: smithyClient.expectString,
        Value: smithyClient.expectString,
    });
};
const de_ArtifactSourceTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ArtifactSourceType(entry);
    });
    return retVal;
};
const de_ArtifactSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ArtifactSummary(entry);
    });
    return retVal;
};
const de_ArtifactSummary = (output, context) => {
    return smithyClient.take(output, {
        ArtifactArn: smithyClient.expectString,
        ArtifactName: smithyClient.expectString,
        ArtifactType: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Source: (_) => de_ArtifactSource(_),
    });
};
const de_AssociateTrialComponentResponse = (output, context) => {
    return smithyClient.take(output, {
        TrialArn: smithyClient.expectString,
        TrialComponentArn: smithyClient.expectString,
    });
};
const de_AssociationSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AssociationSummary(entry);
    });
    return retVal;
};
const de_AssociationSummary = (output, context) => {
    return smithyClient.take(output, {
        AssociationType: smithyClient.expectString,
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DestinationArn: smithyClient.expectString,
        DestinationName: smithyClient.expectString,
        DestinationType: smithyClient.expectString,
        SourceArn: smithyClient.expectString,
        SourceName: smithyClient.expectString,
        SourceType: smithyClient.expectString,
    });
};
const de_AssumableRoleArns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_AsyncInferenceClientConfig = (output, context) => {
    return smithyClient.take(output, {
        MaxConcurrentInvocationsPerInstance: smithyClient.expectInt32,
    });
};
const de_AsyncInferenceConfig = (output, context) => {
    return smithyClient.take(output, {
        ClientConfig: (_) => de_AsyncInferenceClientConfig(_),
        OutputConfig: (_) => de_AsyncInferenceOutputConfig(_),
    });
};
const de_AsyncInferenceNotificationConfig = (output, context) => {
    return smithyClient.take(output, {
        ErrorTopic: smithyClient.expectString,
        IncludeInferenceResponseIn: (_) => de_AsyncNotificationTopicTypeList(_),
        SuccessTopic: smithyClient.expectString,
    });
};
const de_AsyncInferenceOutputConfig = (output, context) => {
    return smithyClient.take(output, {
        KmsKeyId: smithyClient.expectString,
        NotificationConfig: (_) => de_AsyncInferenceNotificationConfig(_),
        S3FailurePath: smithyClient.expectString,
        S3OutputPath: smithyClient.expectString,
    });
};
const de_AsyncNotificationTopicTypeList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_AthenaDatasetDefinition = (output, context) => {
    return smithyClient.take(output, {
        Catalog: smithyClient.expectString,
        Database: smithyClient.expectString,
        KmsKeyId: smithyClient.expectString,
        OutputCompression: smithyClient.expectString,
        OutputFormat: smithyClient.expectString,
        OutputS3Uri: smithyClient.expectString,
        QueryString: smithyClient.expectString,
        WorkGroup: smithyClient.expectString,
    });
};
const de_AttachClusterNodeVolumeResponse = (output, context) => {
    return smithyClient.take(output, {
        AttachTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ClusterArn: smithyClient.expectString,
        DeviceName: smithyClient.expectString,
        NodeId: smithyClient.expectString,
        Status: smithyClient.expectString,
        VolumeId: smithyClient.expectString,
    });
};
const de_AttributeNames = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_AuthenticationRequestExtraParams = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_AuthorizedUrl = (output, context) => {
    return smithyClient.take(output, {
        LocalPath: smithyClient.expectString,
        Url: smithyClient.expectString,
    });
};
const de_AuthorizedUrlConfigs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AuthorizedUrl(entry);
    });
    return retVal;
};
const de_AutoMLAlgorithmConfig = (output, context) => {
    return smithyClient.take(output, {
        AutoMLAlgorithms: (_) => de_AutoMLAlgorithms(_),
    });
};
const de_AutoMLAlgorithms = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_AutoMLAlgorithmsConfig = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoMLAlgorithmConfig(entry);
    });
    return retVal;
};
const de_AutoMLCandidate = (output, context) => {
    return smithyClient.take(output, {
        CandidateName: smithyClient.expectString,
        CandidateProperties: (_) => de_CandidateProperties(_),
        CandidateStatus: smithyClient.expectString,
        CandidateSteps: (_) => de_CandidateSteps(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        FinalAutoMLJobObjectiveMetric: (_) => de_FinalAutoMLJobObjectiveMetric(_),
        InferenceContainerDefinitions: (_) => de_AutoMLInferenceContainerDefinitions(_),
        InferenceContainers: (_) => de_AutoMLContainerDefinitions(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ObjectiveStatus: smithyClient.expectString,
    });
};
const de_AutoMLCandidateGenerationConfig = (output, context) => {
    return smithyClient.take(output, {
        AlgorithmsConfig: (_) => de_AutoMLAlgorithmsConfig(_),
        FeatureSpecificationS3Uri: smithyClient.expectString,
    });
};
const de_AutoMLCandidates = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoMLCandidate(entry);
    });
    return retVal;
};
const de_AutoMLCandidateStep = (output, context) => {
    return smithyClient.take(output, {
        CandidateStepArn: smithyClient.expectString,
        CandidateStepName: smithyClient.expectString,
        CandidateStepType: smithyClient.expectString,
    });
};
const de_AutoMLChannel = (output, context) => {
    return smithyClient.take(output, {
        ChannelType: smithyClient.expectString,
        CompressionType: smithyClient.expectString,
        ContentType: smithyClient.expectString,
        DataSource: (_) => de_AutoMLDataSource(_),
        SampleWeightAttributeName: smithyClient.expectString,
        TargetAttributeName: smithyClient.expectString,
    });
};
const de_AutoMLComputeConfig = (output, context) => {
    return smithyClient.take(output, {
        EmrServerlessComputeConfig: (_) => de_EmrServerlessComputeConfig(_),
    });
};
const de_AutoMLContainerDefinition = (output, context) => {
    return smithyClient.take(output, {
        Environment: (_) => de_EnvironmentMap(_),
        Image: smithyClient.expectString,
        ModelDataUrl: smithyClient.expectString,
    });
};
const de_AutoMLContainerDefinitions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoMLContainerDefinition(entry);
    });
    return retVal;
};
const de_AutoMLDataSource = (output, context) => {
    return smithyClient.take(output, {
        S3DataSource: (_) => de_AutoMLS3DataSource(_),
    });
};
const de_AutoMLDataSplitConfig = (output, context) => {
    return smithyClient.take(output, {
        ValidationFraction: smithyClient.limitedParseFloat32,
    });
};
const de_AutoMLInferenceContainerDefinitions = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_AutoMLContainerDefinitions(value);
        return acc;
    }, {});
};
const de_AutoMLInputDataConfig = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoMLChannel(entry);
    });
    return retVal;
};
const de_AutoMLJobArtifacts = (output, context) => {
    return smithyClient.take(output, {
        CandidateDefinitionNotebookLocation: smithyClient.expectString,
        DataExplorationNotebookLocation: smithyClient.expectString,
    });
};
const de_AutoMLJobChannel = (output, context) => {
    return smithyClient.take(output, {
        ChannelType: smithyClient.expectString,
        CompressionType: smithyClient.expectString,
        ContentType: smithyClient.expectString,
        DataSource: (_) => de_AutoMLDataSource(_),
    });
};
const de_AutoMLJobCompletionCriteria = (output, context) => {
    return smithyClient.take(output, {
        MaxAutoMLJobRuntimeInSeconds: smithyClient.expectInt32,
        MaxCandidates: smithyClient.expectInt32,
        MaxRuntimePerTrainingJobInSeconds: smithyClient.expectInt32,
    });
};
const de_AutoMLJobConfig = (output, context) => {
    return smithyClient.take(output, {
        CandidateGenerationConfig: (_) => de_AutoMLCandidateGenerationConfig(_),
        CompletionCriteria: (_) => de_AutoMLJobCompletionCriteria(_),
        DataSplitConfig: (_) => de_AutoMLDataSplitConfig(_),
        Mode: smithyClient.expectString,
        SecurityConfig: (_) => de_AutoMLSecurityConfig(_),
    });
};
const de_AutoMLJobInputDataConfig = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoMLJobChannel(entry);
    });
    return retVal;
};
const de_AutoMLJobObjective = (output, context) => {
    return smithyClient.take(output, {
        MetricName: smithyClient.expectString,
    });
};
const de_AutoMLJobStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
    });
};
const de_AutoMLJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoMLJobSummary(entry);
    });
    return retVal;
};
const de_AutoMLJobSummary = (output, context) => {
    return smithyClient.take(output, {
        AutoMLJobArn: smithyClient.expectString,
        AutoMLJobName: smithyClient.expectString,
        AutoMLJobSecondaryStatus: smithyClient.expectString,
        AutoMLJobStatus: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        PartialFailureReasons: (_) => de_AutoMLPartialFailureReasons(_),
    });
};
const de_AutoMLOutputDataConfig = (output, context) => {
    return smithyClient.take(output, {
        KmsKeyId: smithyClient.expectString,
        S3OutputPath: smithyClient.expectString,
    });
};
const de_AutoMLPartialFailureReason = (output, context) => {
    return smithyClient.take(output, {
        PartialFailureMessage: smithyClient.expectString,
    });
};
const de_AutoMLPartialFailureReasons = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoMLPartialFailureReason(entry);
    });
    return retVal;
};
const de_AutoMLProblemTypeConfig = (output, context) => {
    if (output.ImageClassificationJobConfig != null) {
        return {
            ImageClassificationJobConfig: de_ImageClassificationJobConfig(output.ImageClassificationJobConfig),
        };
    }
    if (output.TabularJobConfig != null) {
        return {
            TabularJobConfig: de_TabularJobConfig(output.TabularJobConfig),
        };
    }
    if (output.TextClassificationJobConfig != null) {
        return {
            TextClassificationJobConfig: de_TextClassificationJobConfig(output.TextClassificationJobConfig),
        };
    }
    if (output.TextGenerationJobConfig != null) {
        return {
            TextGenerationJobConfig: de_TextGenerationJobConfig(output.TextGenerationJobConfig),
        };
    }
    if (output.TimeSeriesForecastingJobConfig != null) {
        return {
            TimeSeriesForecastingJobConfig: de_TimeSeriesForecastingJobConfig(output.TimeSeriesForecastingJobConfig),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_AutoMLProblemTypeResolvedAttributes = (output, context) => {
    if (output.TabularResolvedAttributes != null) {
        return {
            TabularResolvedAttributes: de_TabularResolvedAttributes(output.TabularResolvedAttributes),
        };
    }
    if (output.TextGenerationResolvedAttributes != null) {
        return {
            TextGenerationResolvedAttributes: de_TextGenerationResolvedAttributes(output.TextGenerationResolvedAttributes),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_AutoMLResolvedAttributes = (output, context) => {
    return smithyClient.take(output, {
        AutoMLJobObjective: (_) => de_AutoMLJobObjective(_),
        AutoMLProblemTypeResolvedAttributes: (_) => de_AutoMLProblemTypeResolvedAttributes(core$1.awsExpectUnion(_)),
        CompletionCriteria: (_) => de_AutoMLJobCompletionCriteria(_),
    });
};
const de_AutoMLS3DataSource = (output, context) => {
    return smithyClient.take(output, {
        S3DataType: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_AutoMLSecurityConfig = (output, context) => {
    return smithyClient.take(output, {
        EnableInterContainerTrafficEncryption: smithyClient.expectBoolean,
        VolumeKmsKeyId: smithyClient.expectString,
        VpcConfig: (_) => de_VpcConfig(_),
    });
};
const de_AutoParameter = (output, context) => {
    return smithyClient.take(output, {
        Name: smithyClient.expectString,
        ValueHint: smithyClient.expectString,
    });
};
const de_AutoParameters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoParameter(entry);
    });
    return retVal;
};
const de_AutoRollbackAlarms = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AlarmDetails(entry);
    });
    return retVal;
};
const de_AutoRollbackConfig = (output, context) => {
    return smithyClient.take(output, {
        Alarms: (_) => de_AlarmList(_),
    });
};
const de_Autotune = (output, context) => {
    return smithyClient.take(output, {
        Mode: smithyClient.expectString,
    });
};
const de_BatchAddClusterNodesError = (output, context) => {
    return smithyClient.take(output, {
        ErrorCode: smithyClient.expectString,
        FailedCount: smithyClient.expectInt32,
        InstanceGroupName: smithyClient.expectString,
        Message: smithyClient.expectString,
    });
};
const de_BatchAddClusterNodesErrorList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchAddClusterNodesError(entry);
    });
    return retVal;
};
const de_BatchAddClusterNodesResponse = (output, context) => {
    return smithyClient.take(output, {
        Failed: (_) => de_BatchAddClusterNodesErrorList(_),
        Successful: (_) => de_NodeAdditionResultList(_),
    });
};
const de_BatchDataCaptureConfig = (output, context) => {
    return smithyClient.take(output, {
        DestinationS3Uri: smithyClient.expectString,
        GenerateInferenceId: smithyClient.expectBoolean,
        KmsKeyId: smithyClient.expectString,
    });
};
const de_BatchDeleteClusterNodeLogicalIdsError = (output, context) => {
    return smithyClient.take(output, {
        Code: smithyClient.expectString,
        Message: smithyClient.expectString,
        NodeLogicalId: smithyClient.expectString,
    });
};
const de_BatchDeleteClusterNodeLogicalIdsErrorList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchDeleteClusterNodeLogicalIdsError(entry);
    });
    return retVal;
};
const de_BatchDeleteClusterNodesError = (output, context) => {
    return smithyClient.take(output, {
        Code: smithyClient.expectString,
        Message: smithyClient.expectString,
        NodeId: smithyClient.expectString,
    });
};
const de_BatchDeleteClusterNodesErrorList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_BatchDeleteClusterNodesError(entry);
    });
    return retVal;
};
const de_BatchDeleteClusterNodesResponse = (output, context) => {
    return smithyClient.take(output, {
        Failed: (_) => de_BatchDeleteClusterNodesErrorList(_),
        FailedNodeLogicalIds: (_) => de_BatchDeleteClusterNodeLogicalIdsErrorList(_),
        Successful: (_) => de_ClusterNodeIds(_),
        SuccessfulNodeLogicalIds: (_) => de_ClusterNodeLogicalIdList(_),
    });
};
const de_BatchDescribeModelPackageError = (output, context) => {
    return smithyClient.take(output, {
        ErrorCode: smithyClient.expectString,
        ErrorResponse: smithyClient.expectString,
    });
};
const de_BatchDescribeModelPackageErrorMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_BatchDescribeModelPackageError(value);
        return acc;
    }, {});
};
const de_BatchDescribeModelPackageOutput = (output, context) => {
    return smithyClient.take(output, {
        BatchDescribeModelPackageErrorMap: (_) => de_BatchDescribeModelPackageErrorMap(_),
        ModelPackageSummaries: (_) => de_ModelPackageSummaries(_),
    });
};
const de_BatchDescribeModelPackageSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InferenceSpecification: (_) => de_InferenceSpecification(_),
        ModelApprovalStatus: smithyClient.expectString,
        ModelPackageArn: smithyClient.expectString,
        ModelPackageDescription: smithyClient.expectString,
        ModelPackageGroupName: smithyClient.expectString,
        ModelPackageStatus: smithyClient.expectString,
        ModelPackageVersion: smithyClient.expectInt32,
    });
};
const de_BatchTransformInput = (output, context) => {
    return smithyClient.take(output, {
        DataCapturedDestinationS3Uri: smithyClient.expectString,
        DatasetFormat: (_) => de_MonitoringDatasetFormat(_),
        EndTimeOffset: smithyClient.expectString,
        ExcludeFeaturesAttribute: smithyClient.expectString,
        FeaturesAttribute: smithyClient.expectString,
        InferenceAttribute: smithyClient.expectString,
        LocalPath: smithyClient.expectString,
        ProbabilityAttribute: smithyClient.expectString,
        ProbabilityThresholdAttribute: smithyClient.limitedParseDouble,
        S3DataDistributionType: smithyClient.expectString,
        S3InputMode: smithyClient.expectString,
        StartTimeOffset: smithyClient.expectString,
    });
};
const de_BestObjectiveNotImproving = (output, context) => {
    return smithyClient.take(output, {
        MaxNumberOfTrainingJobsNotImproving: smithyClient.expectInt32,
    });
};
const de_Bias = (output, context) => {
    return smithyClient.take(output, {
        PostTrainingReport: (_) => de_MetricsSource(_),
        PreTrainingReport: (_) => de_MetricsSource(_),
        Report: (_) => de_MetricsSource(_),
    });
};
const de_BlueGreenUpdatePolicy = (output, context) => {
    return smithyClient.take(output, {
        MaximumExecutionTimeoutInSeconds: smithyClient.expectInt32,
        TerminationWaitInSeconds: smithyClient.expectInt32,
        TrafficRoutingConfiguration: (_) => de_TrafficRoutingConfig(_),
    });
};
const de_CacheHitResult = (output, context) => {
    return smithyClient.take(output, {
        SourcePipelineExecutionArn: smithyClient.expectString,
    });
};
const de_CallbackStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        CallbackToken: smithyClient.expectString,
        OutputParameters: (_) => de_OutputParameterList(_),
        SqsQueueUrl: smithyClient.expectString,
    });
};
const de_CandidateArtifactLocations = (output, context) => {
    return smithyClient.take(output, {
        BacktestResults: smithyClient.expectString,
        Explainability: smithyClient.expectString,
        ModelInsights: smithyClient.expectString,
    });
};
const de_CandidateGenerationConfig = (output, context) => {
    return smithyClient.take(output, {
        AlgorithmsConfig: (_) => de_AutoMLAlgorithmsConfig(_),
    });
};
const de_CandidateProperties = (output, context) => {
    return smithyClient.take(output, {
        CandidateArtifactLocations: (_) => de_CandidateArtifactLocations(_),
        CandidateMetrics: (_) => de_MetricDataList(_),
    });
};
const de_CandidateSteps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_AutoMLCandidateStep(entry);
    });
    return retVal;
};
const de_CanvasAppSettings = (output, context) => {
    return smithyClient.take(output, {
        DirectDeploySettings: (_) => de_DirectDeploySettings(_),
        EmrServerlessSettings: (_) => de_EmrServerlessSettings(_),
        GenerativeAiSettings: (_) => de_GenerativeAiSettings(_),
        IdentityProviderOAuthSettings: (_) => de_IdentityProviderOAuthSettings(_),
        KendraSettings: (_) => de_KendraSettings(_),
        ModelRegisterSettings: (_) => de_ModelRegisterSettings(_),
        TimeSeriesForecastingSettings: (_) => de_TimeSeriesForecastingSettings(_),
        WorkspaceSettings: (_) => de_WorkspaceSettings(_),
    });
};
const de_CapacityReservation = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        Type: smithyClient.expectString,
    });
};
const de_CapacitySize = (output, context) => {
    return smithyClient.take(output, {
        Type: smithyClient.expectString,
        Value: smithyClient.expectInt32,
    });
};
const de_CapacitySizeConfig = (output, context) => {
    return smithyClient.take(output, {
        Type: smithyClient.expectString,
        Value: smithyClient.expectInt32,
    });
};
const de_CaptureContentTypeHeader = (output, context) => {
    return smithyClient.take(output, {
        CsvContentTypes: (_) => de_CsvContentTypes(_),
        JsonContentTypes: (_) => de_JsonContentTypes(_),
    });
};
const de_CaptureOption = (output, context) => {
    return smithyClient.take(output, {
        CaptureMode: smithyClient.expectString,
    });
};
const de_CaptureOptionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CaptureOption(entry);
    });
    return retVal;
};
const de_CategoricalParameter = (output, context) => {
    return smithyClient.take(output, {
        Name: smithyClient.expectString,
        Value: (_) => de_CategoricalParameterRangeValues(_),
    });
};
const de_CategoricalParameterRange = (output, context) => {
    return smithyClient.take(output, {
        Name: smithyClient.expectString,
        Values: (_) => de_ParameterValues(_),
    });
};
const de_CategoricalParameterRanges = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CategoricalParameterRange(entry);
    });
    return retVal;
};
const de_CategoricalParameterRangeSpecification = (output, context) => {
    return smithyClient.take(output, {
        Values: (_) => de_ParameterValues(_),
    });
};
const de_CategoricalParameterRangeValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_CategoricalParameters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CategoricalParameter(entry);
    });
    return retVal;
};
const de_CfnStackDetail = (output, context) => {
    return smithyClient.take(output, {
        Id: smithyClient.expectString,
        Name: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
    });
};
const de_CfnStackParameter = (output, context) => {
    return smithyClient.take(output, {
        Key: smithyClient.expectString,
        Value: smithyClient.expectString,
    });
};
const de_CfnStackParameters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CfnStackParameter(entry);
    });
    return retVal;
};
const de_CfnTemplateProviderDetail = (output, context) => {
    return smithyClient.take(output, {
        Parameters: (_) => de_CfnStackParameters(_),
        RoleARN: smithyClient.expectString,
        StackDetail: (_) => de_CfnStackDetail(_),
        TemplateName: smithyClient.expectString,
        TemplateURL: smithyClient.expectString,
    });
};
const de_Channel = (output, context) => {
    return smithyClient.take(output, {
        ChannelName: smithyClient.expectString,
        CompressionType: smithyClient.expectString,
        ContentType: smithyClient.expectString,
        DataSource: (_) => de_DataSource(_),
        InputMode: smithyClient.expectString,
        RecordWrapperType: smithyClient.expectString,
        ShuffleConfig: (_) => de_ShuffleConfig(_),
    });
};
const de_ChannelSpecification = (output, context) => {
    return smithyClient.take(output, {
        Description: smithyClient.expectString,
        IsRequired: smithyClient.expectBoolean,
        Name: smithyClient.expectString,
        SupportedCompressionTypes: (_) => de_CompressionTypes(_),
        SupportedContentTypes: (_) => de_ContentTypes(_),
        SupportedInputModes: (_) => de_InputModes(_),
    });
};
const de_ChannelSpecifications = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ChannelSpecification(entry);
    });
    return retVal;
};
const de_CheckpointConfig = (output, context) => {
    return smithyClient.take(output, {
        LocalPath: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_Cidrs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ClarifyCheckStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        BaselineUsedForDriftCheckConstraints: smithyClient.expectString,
        CalculatedBaselineConstraints: smithyClient.expectString,
        CheckJobArn: smithyClient.expectString,
        CheckType: smithyClient.expectString,
        ModelPackageGroupName: smithyClient.expectString,
        RegisterNewBaseline: smithyClient.expectBoolean,
        SkipCheck: smithyClient.expectBoolean,
        ViolationReport: smithyClient.expectString,
    });
};
const de_ClarifyExplainerConfig = (output, context) => {
    return smithyClient.take(output, {
        EnableExplanations: smithyClient.expectString,
        InferenceConfig: (_) => de_ClarifyInferenceConfig(_),
        ShapConfig: (_) => de_ClarifyShapConfig(_),
    });
};
const de_ClarifyFeatureHeaders = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ClarifyFeatureTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ClarifyInferenceConfig = (output, context) => {
    return smithyClient.take(output, {
        ContentTemplate: smithyClient.expectString,
        FeatureHeaders: (_) => de_ClarifyFeatureHeaders(_),
        FeatureTypes: (_) => de_ClarifyFeatureTypes(_),
        FeaturesAttribute: smithyClient.expectString,
        LabelAttribute: smithyClient.expectString,
        LabelHeaders: (_) => de_ClarifyLabelHeaders(_),
        LabelIndex: smithyClient.expectInt32,
        MaxPayloadInMB: smithyClient.expectInt32,
        MaxRecordCount: smithyClient.expectInt32,
        ProbabilityAttribute: smithyClient.expectString,
        ProbabilityIndex: smithyClient.expectInt32,
    });
};
const de_ClarifyLabelHeaders = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ClarifyShapBaselineConfig = (output, context) => {
    return smithyClient.take(output, {
        MimeType: smithyClient.expectString,
        ShapBaseline: smithyClient.expectString,
        ShapBaselineUri: smithyClient.expectString,
    });
};
const de_ClarifyShapConfig = (output, context) => {
    return smithyClient.take(output, {
        NumberOfSamples: smithyClient.expectInt32,
        Seed: smithyClient.expectInt32,
        ShapBaselineConfig: (_) => de_ClarifyShapBaselineConfig(_),
        TextConfig: (_) => de_ClarifyTextConfig(_),
        UseLogit: smithyClient.expectBoolean,
    });
};
const de_ClarifyTextConfig = (output, context) => {
    return smithyClient.take(output, {
        Granularity: smithyClient.expectString,
        Language: smithyClient.expectString,
    });
};
const de_ClusterAutoScalingConfigOutput = (output, context) => {
    return smithyClient.take(output, {
        AutoScalerType: smithyClient.expectString,
        FailureMessage: smithyClient.expectString,
        Mode: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_ClusterEbsVolumeConfig = (output, context) => {
    return smithyClient.take(output, {
        RootVolume: smithyClient.expectBoolean,
        VolumeKmsKeyId: smithyClient.expectString,
        VolumeSizeInGB: smithyClient.expectInt32,
    });
};
const de_ClusterEventDetail = (output, context) => {
    return smithyClient.take(output, {
        ClusterArn: smithyClient.expectString,
        ClusterName: smithyClient.expectString,
        Description: smithyClient.expectString,
        EventDetails: (_) => de_EventDetails(_),
        EventId: smithyClient.expectString,
        EventTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InstanceGroupName: smithyClient.expectString,
        InstanceId: smithyClient.expectString,
        ResourceType: smithyClient.expectString,
    });
};
const de_ClusterEventSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClusterEventSummary(entry);
    });
    return retVal;
};
const de_ClusterEventSummary = (output, context) => {
    return smithyClient.take(output, {
        ClusterArn: smithyClient.expectString,
        ClusterName: smithyClient.expectString,
        Description: smithyClient.expectString,
        EventId: smithyClient.expectString,
        EventTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InstanceGroupName: smithyClient.expectString,
        InstanceId: smithyClient.expectString,
        ResourceType: smithyClient.expectString,
    });
};
const de_ClusterInstanceGroupDetails = (output, context) => {
    return smithyClient.take(output, {
        CurrentCount: smithyClient.expectInt32,
        CurrentImageId: smithyClient.expectString,
        DesiredImageId: smithyClient.expectString,
        ExecutionRole: smithyClient.expectString,
        InstanceGroupName: smithyClient.expectString,
        InstanceStorageConfigs: (_) => de_ClusterInstanceStorageConfigs(_),
        InstanceType: smithyClient.expectString,
        LifeCycleConfig: (_) => de_ClusterLifeCycleConfig(_),
        OnStartDeepHealthChecks: (_) => de_OnStartDeepHealthChecks(_),
        OverrideVpcConfig: (_) => de_VpcConfig(_),
        ScheduledUpdateConfig: (_) => de_ScheduledUpdateConfig(_),
        Status: smithyClient.expectString,
        TargetCount: smithyClient.expectInt32,
        ThreadsPerCore: smithyClient.expectInt32,
        TrainingPlanArn: smithyClient.expectString,
        TrainingPlanStatus: smithyClient.expectString,
    });
};
const de_ClusterInstanceGroupDetailsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClusterInstanceGroupDetails(entry);
    });
    return retVal;
};
const de_ClusterInstancePlacement = (output, context) => {
    return smithyClient.take(output, {
        AvailabilityZone: smithyClient.expectString,
        AvailabilityZoneId: smithyClient.expectString,
    });
};
const de_ClusterInstanceStatusDetails = (output, context) => {
    return smithyClient.take(output, {
        Message: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_ClusterInstanceStorageConfig = (output, context) => {
    if (output.EbsVolumeConfig != null) {
        return {
            EbsVolumeConfig: de_ClusterEbsVolumeConfig(output.EbsVolumeConfig),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_ClusterInstanceStorageConfigs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClusterInstanceStorageConfig(core$1.awsExpectUnion(entry));
    });
    return retVal;
};
const de_ClusterLifeCycleConfig = (output, context) => {
    return smithyClient.take(output, {
        OnCreate: smithyClient.expectString,
        SourceS3Uri: smithyClient.expectString,
    });
};
const de_ClusterMetadata = (output, context) => {
    return smithyClient.take(output, {
        EksRoleAccessEntries: (_) => de_EksRoleAccessEntries(_),
        FailureMessage: smithyClient.expectString,
        SlrAccessEntry: smithyClient.expectString,
    });
};
const de_ClusterNodeDetails = (output, context) => {
    return smithyClient.take(output, {
        CurrentImageId: smithyClient.expectString,
        DesiredImageId: smithyClient.expectString,
        InstanceGroupName: smithyClient.expectString,
        InstanceId: smithyClient.expectString,
        InstanceStatus: (_) => de_ClusterInstanceStatusDetails(_),
        InstanceStorageConfigs: (_) => de_ClusterInstanceStorageConfigs(_),
        InstanceType: smithyClient.expectString,
        LastSoftwareUpdateTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LaunchTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LifeCycleConfig: (_) => de_ClusterLifeCycleConfig(_),
        NodeLogicalId: smithyClient.expectString,
        OverrideVpcConfig: (_) => de_VpcConfig(_),
        Placement: (_) => de_ClusterInstancePlacement(_),
        PrivateDnsHostname: smithyClient.expectString,
        PrivatePrimaryIp: smithyClient.expectString,
        PrivatePrimaryIpv6: smithyClient.expectString,
        ThreadsPerCore: smithyClient.expectInt32,
        UltraServerInfo: (_) => de_UltraServerInfo(_),
    });
};
const de_ClusterNodeIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ClusterNodeLogicalIdList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ClusterNodeSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClusterNodeSummary(entry);
    });
    return retVal;
};
const de_ClusterNodeSummary = (output, context) => {
    return smithyClient.take(output, {
        InstanceGroupName: smithyClient.expectString,
        InstanceId: smithyClient.expectString,
        InstanceStatus: (_) => de_ClusterInstanceStatusDetails(_),
        InstanceType: smithyClient.expectString,
        LastSoftwareUpdateTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LaunchTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        NodeLogicalId: smithyClient.expectString,
        UltraServerInfo: (_) => de_UltraServerInfo(_),
    });
};
const de_ClusterOrchestrator = (output, context) => {
    return smithyClient.take(output, {
        Eks: (_) => de_ClusterOrchestratorEksConfig(_),
    });
};
const de_ClusterOrchestratorEksConfig = (output, context) => {
    return smithyClient.take(output, {
        ClusterArn: smithyClient.expectString,
    });
};
const de_ClusterRestrictedInstanceGroupDetails = (output, context) => {
    return smithyClient.take(output, {
        CurrentCount: smithyClient.expectInt32,
        EnvironmentConfig: (_) => de_EnvironmentConfigDetails(_),
        ExecutionRole: smithyClient.expectString,
        InstanceGroupName: smithyClient.expectString,
        InstanceStorageConfigs: (_) => de_ClusterInstanceStorageConfigs(_),
        InstanceType: smithyClient.expectString,
        OnStartDeepHealthChecks: (_) => de_OnStartDeepHealthChecks(_),
        OverrideVpcConfig: (_) => de_VpcConfig(_),
        ScheduledUpdateConfig: (_) => de_ScheduledUpdateConfig(_),
        Status: smithyClient.expectString,
        TargetCount: smithyClient.expectInt32,
        ThreadsPerCore: smithyClient.expectInt32,
        TrainingPlanArn: smithyClient.expectString,
        TrainingPlanStatus: smithyClient.expectString,
    });
};
const de_ClusterRestrictedInstanceGroupDetailsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClusterRestrictedInstanceGroupDetails(entry);
    });
    return retVal;
};
const de_ClusterSchedulerConfigSummary = (output, context) => {
    return smithyClient.take(output, {
        ClusterArn: smithyClient.expectString,
        ClusterSchedulerConfigArn: smithyClient.expectString,
        ClusterSchedulerConfigId: smithyClient.expectString,
        ClusterSchedulerConfigVersion: smithyClient.expectInt32,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_ClusterSchedulerConfigSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClusterSchedulerConfigSummary(entry);
    });
    return retVal;
};
const de_ClusterSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ClusterSummary(entry);
    });
    return retVal;
};
const de_ClusterSummary = (output, context) => {
    return smithyClient.take(output, {
        ClusterArn: smithyClient.expectString,
        ClusterName: smithyClient.expectString,
        ClusterStatus: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TrainingPlanArns: (_) => de_TrainingPlanArns(_),
    });
};
const de_ClusterTieredStorageConfig = (output, context) => {
    return smithyClient.take(output, {
        InstanceMemoryAllocationPercentage: smithyClient.expectInt32,
        Mode: smithyClient.expectString,
    });
};
const de_CodeEditorAppImageConfig = (output, context) => {
    return smithyClient.take(output, {
        ContainerConfig: (_) => de_ContainerConfig(_),
        FileSystemConfig: (_) => de_FileSystemConfig(_),
    });
};
const de_CodeEditorAppSettings = (output, context) => {
    return smithyClient.take(output, {
        AppLifecycleManagement: (_) => de_AppLifecycleManagement(_),
        BuiltInLifecycleConfigArn: smithyClient.expectString,
        CustomImages: (_) => de_CustomImages(_),
        DefaultResourceSpec: (_) => de_ResourceSpec(_),
        LifecycleConfigArns: (_) => de_LifecycleConfigArns(_),
    });
};
const de_CodeRepositories = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CodeRepository(entry);
    });
    return retVal;
};
const de_CodeRepository = (output, context) => {
    return smithyClient.take(output, {
        RepositoryUrl: smithyClient.expectString,
    });
};
const de_CodeRepositorySummary = (output, context) => {
    return smithyClient.take(output, {
        CodeRepositoryArn: smithyClient.expectString,
        CodeRepositoryName: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        GitConfig: (_) => de_GitConfig(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_CodeRepositorySummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CodeRepositorySummary(entry);
    });
    return retVal;
};
const de_CognitoConfig = (output, context) => {
    return smithyClient.take(output, {
        ClientId: smithyClient.expectString,
        UserPool: smithyClient.expectString,
    });
};
const de_CognitoMemberDefinition = (output, context) => {
    return smithyClient.take(output, {
        ClientId: smithyClient.expectString,
        UserGroup: smithyClient.expectString,
        UserPool: smithyClient.expectString,
    });
};
const de_CollectionConfig = (output, context) => {
    if (output.VectorConfig != null) {
        return {
            VectorConfig: de_VectorConfig(output.VectorConfig),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_CollectionConfiguration = (output, context) => {
    return smithyClient.take(output, {
        CollectionName: smithyClient.expectString,
        CollectionParameters: (_) => de_CollectionParameters(_),
    });
};
const de_CollectionConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CollectionConfiguration(entry);
    });
    return retVal;
};
const de_CollectionParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_CompilationJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CompilationJobSummary(entry);
    });
    return retVal;
};
const de_CompilationJobSummary = (output, context) => {
    return smithyClient.take(output, {
        CompilationEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CompilationJobArn: smithyClient.expectString,
        CompilationJobName: smithyClient.expectString,
        CompilationJobStatus: smithyClient.expectString,
        CompilationStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CompilationTargetDevice: smithyClient.expectString,
        CompilationTargetPlatformAccelerator: smithyClient.expectString,
        CompilationTargetPlatformArch: smithyClient.expectString,
        CompilationTargetPlatformOs: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_CompressionTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ComputeQuotaConfig = (output, context) => {
    return smithyClient.take(output, {
        ComputeQuotaResources: (_) => de_ComputeQuotaResourceConfigList(_),
        PreemptTeamTasks: smithyClient.expectString,
        ResourceSharingConfig: (_) => de_ResourceSharingConfig(_),
    });
};
const de_ComputeQuotaResourceConfig = (output, context) => {
    return smithyClient.take(output, {
        Accelerators: smithyClient.expectInt32,
        Count: smithyClient.expectInt32,
        InstanceType: smithyClient.expectString,
        MemoryInGiB: smithyClient.limitedParseFloat32,
        VCpu: smithyClient.limitedParseFloat32,
    });
};
const de_ComputeQuotaResourceConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComputeQuotaResourceConfig(entry);
    });
    return retVal;
};
const de_ComputeQuotaSummary = (output, context) => {
    return smithyClient.take(output, {
        ActivationState: smithyClient.expectString,
        ClusterArn: smithyClient.expectString,
        ComputeQuotaArn: smithyClient.expectString,
        ComputeQuotaConfig: (_) => de_ComputeQuotaConfig(_),
        ComputeQuotaId: smithyClient.expectString,
        ComputeQuotaTarget: (_) => de_ComputeQuotaTarget(_),
        ComputeQuotaVersion: smithyClient.expectInt32,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_ComputeQuotaSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ComputeQuotaSummary(entry);
    });
    return retVal;
};
const de_ComputeQuotaTarget = (output, context) => {
    return smithyClient.take(output, {
        FairShareWeight: smithyClient.expectInt32,
        TeamName: smithyClient.expectString,
    });
};
const de_ConditionStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        Outcome: smithyClient.expectString,
    });
};
const de_ContainerArguments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ContainerConfig = (output, context) => {
    return smithyClient.take(output, {
        ContainerArguments: (_) => de_CustomImageContainerArguments(_),
        ContainerEntrypoint: (_) => de_CustomImageContainerEntrypoint(_),
        ContainerEnvironmentVariables: (_) => de_CustomImageContainerEnvironmentVariables(_),
    });
};
const de_ContainerDefinition = (output, context) => {
    return smithyClient.take(output, {
        AdditionalModelDataSources: (_) => de_AdditionalModelDataSources(_),
        ContainerHostname: smithyClient.expectString,
        Environment: (_) => de_EnvironmentMap(_),
        Image: smithyClient.expectString,
        ImageConfig: (_) => de_ImageConfig(_),
        InferenceSpecificationName: smithyClient.expectString,
        Mode: smithyClient.expectString,
        ModelDataSource: (_) => de_ModelDataSource(_),
        ModelDataUrl: smithyClient.expectString,
        ModelPackageName: smithyClient.expectString,
        MultiModelConfig: (_) => de_MultiModelConfig(_),
    });
};
const de_ContainerDefinitionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContainerDefinition(entry);
    });
    return retVal;
};
const de_ContainerEntrypoint = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ContentClassifiers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ContentTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ContextSource = (output, context) => {
    return smithyClient.take(output, {
        SourceId: smithyClient.expectString,
        SourceType: smithyClient.expectString,
        SourceUri: smithyClient.expectString,
    });
};
const de_ContextSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContextSummary(entry);
    });
    return retVal;
};
const de_ContextSummary = (output, context) => {
    return smithyClient.take(output, {
        ContextArn: smithyClient.expectString,
        ContextName: smithyClient.expectString,
        ContextType: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Source: (_) => de_ContextSource(_),
    });
};
const de_ContinuousParameterRange = (output, context) => {
    return smithyClient.take(output, {
        MaxValue: smithyClient.expectString,
        MinValue: smithyClient.expectString,
        Name: smithyClient.expectString,
        ScalingType: smithyClient.expectString,
    });
};
const de_ContinuousParameterRanges = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ContinuousParameterRange(entry);
    });
    return retVal;
};
const de_ContinuousParameterRangeSpecification = (output, context) => {
    return smithyClient.take(output, {
        MaxValue: smithyClient.expectString,
        MinValue: smithyClient.expectString,
    });
};
const de_ConvergenceDetected = (output, context) => {
    return smithyClient.take(output, {
        CompleteOnConvergence: smithyClient.expectString,
    });
};
const de_CreateActionResponse = (output, context) => {
    return smithyClient.take(output, {
        ActionArn: smithyClient.expectString,
    });
};
const de_CreateAlgorithmOutput = (output, context) => {
    return smithyClient.take(output, {
        AlgorithmArn: smithyClient.expectString,
    });
};
const de_CreateAppImageConfigResponse = (output, context) => {
    return smithyClient.take(output, {
        AppImageConfigArn: smithyClient.expectString,
    });
};
const de_CreateAppResponse = (output, context) => {
    return smithyClient.take(output, {
        AppArn: smithyClient.expectString,
    });
};
const de_CreateArtifactResponse = (output, context) => {
    return smithyClient.take(output, {
        ArtifactArn: smithyClient.expectString,
    });
};
const de_CreateAutoMLJobResponse = (output, context) => {
    return smithyClient.take(output, {
        AutoMLJobArn: smithyClient.expectString,
    });
};
const de_CreateAutoMLJobV2Response = (output, context) => {
    return smithyClient.take(output, {
        AutoMLJobArn: smithyClient.expectString,
    });
};
const de_CreateClusterResponse = (output, context) => {
    return smithyClient.take(output, {
        ClusterArn: smithyClient.expectString,
    });
};
const de_CreateClusterSchedulerConfigResponse = (output, context) => {
    return smithyClient.take(output, {
        ClusterSchedulerConfigArn: smithyClient.expectString,
        ClusterSchedulerConfigId: smithyClient.expectString,
    });
};
const de_CreateCodeRepositoryOutput = (output, context) => {
    return smithyClient.take(output, {
        CodeRepositoryArn: smithyClient.expectString,
    });
};
const de_CreateCompilationJobResponse = (output, context) => {
    return smithyClient.take(output, {
        CompilationJobArn: smithyClient.expectString,
    });
};
const de_CreateComputeQuotaResponse = (output, context) => {
    return smithyClient.take(output, {
        ComputeQuotaArn: smithyClient.expectString,
        ComputeQuotaId: smithyClient.expectString,
    });
};
const de_CreateContextResponse = (output, context) => {
    return smithyClient.take(output, {
        ContextArn: smithyClient.expectString,
    });
};
const de_CreateDataQualityJobDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {
        JobDefinitionArn: smithyClient.expectString,
    });
};
const de_CreateDomainResponse = (output, context) => {
    return smithyClient.take(output, {
        DomainArn: smithyClient.expectString,
        DomainId: smithyClient.expectString,
        Url: smithyClient.expectString,
    });
};
const de_CreateEdgeDeploymentPlanResponse = (output, context) => {
    return smithyClient.take(output, {
        EdgeDeploymentPlanArn: smithyClient.expectString,
    });
};
const de_CreateEndpointConfigOutput = (output, context) => {
    return smithyClient.take(output, {
        EndpointConfigArn: smithyClient.expectString,
    });
};
const de_CreateEndpointOutput = (output, context) => {
    return smithyClient.take(output, {
        EndpointArn: smithyClient.expectString,
    });
};
const de_CreateExperimentResponse = (output, context) => {
    return smithyClient.take(output, {
        ExperimentArn: smithyClient.expectString,
    });
};
const de_CreateFeatureGroupResponse = (output, context) => {
    return smithyClient.take(output, {
        FeatureGroupArn: smithyClient.expectString,
    });
};
const de_CreateFlowDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {
        FlowDefinitionArn: smithyClient.expectString,
    });
};
const de_CreateHubContentPresignedUrlsResponse = (output, context) => {
    return smithyClient.take(output, {
        AuthorizedUrlConfigs: (_) => de_AuthorizedUrlConfigs(_),
        NextToken: smithyClient.expectString,
    });
};
const de_CreateHubContentReferenceResponse = (output, context) => {
    return smithyClient.take(output, {
        HubArn: smithyClient.expectString,
        HubContentArn: smithyClient.expectString,
    });
};
const de_CreateHubResponse = (output, context) => {
    return smithyClient.take(output, {
        HubArn: smithyClient.expectString,
    });
};
const de_CreateHumanTaskUiResponse = (output, context) => {
    return smithyClient.take(output, {
        HumanTaskUiArn: smithyClient.expectString,
    });
};
const de_CreateHyperParameterTuningJobResponse = (output, context) => {
    return smithyClient.take(output, {
        HyperParameterTuningJobArn: smithyClient.expectString,
    });
};
const de_CreateImageResponse = (output, context) => {
    return smithyClient.take(output, {
        ImageArn: smithyClient.expectString,
    });
};
const de_CreateImageVersionResponse = (output, context) => {
    return smithyClient.take(output, {
        ImageVersionArn: smithyClient.expectString,
    });
};
const de_CreateInferenceComponentOutput = (output, context) => {
    return smithyClient.take(output, {
        InferenceComponentArn: smithyClient.expectString,
    });
};
const de_CreateInferenceExperimentResponse = (output, context) => {
    return smithyClient.take(output, {
        InferenceExperimentArn: smithyClient.expectString,
    });
};
const de_CreateInferenceRecommendationsJobResponse = (output, context) => {
    return smithyClient.take(output, {
        JobArn: smithyClient.expectString,
    });
};
const de_CreateLabelingJobResponse = (output, context) => {
    return smithyClient.take(output, {
        LabelingJobArn: smithyClient.expectString,
    });
};
const de_CreateMlflowTrackingServerResponse = (output, context) => {
    return smithyClient.take(output, {
        TrackingServerArn: smithyClient.expectString,
    });
};
const de_CreateModelBiasJobDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {
        JobDefinitionArn: smithyClient.expectString,
    });
};
const de_CreateModelCardExportJobResponse = (output, context) => {
    return smithyClient.take(output, {
        ModelCardExportJobArn: smithyClient.expectString,
    });
};
const de_CreateModelCardResponse = (output, context) => {
    return smithyClient.take(output, {
        ModelCardArn: smithyClient.expectString,
    });
};
const de_CreateModelExplainabilityJobDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {
        JobDefinitionArn: smithyClient.expectString,
    });
};
const de_CreateModelOutput = (output, context) => {
    return smithyClient.take(output, {
        ModelArn: smithyClient.expectString,
    });
};
const de_CreateModelPackageGroupOutput = (output, context) => {
    return smithyClient.take(output, {
        ModelPackageGroupArn: smithyClient.expectString,
    });
};
const de_CreateModelPackageOutput = (output, context) => {
    return smithyClient.take(output, {
        ModelPackageArn: smithyClient.expectString,
    });
};
const de_CreateModelQualityJobDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {
        JobDefinitionArn: smithyClient.expectString,
    });
};
const de_CreateMonitoringScheduleResponse = (output, context) => {
    return smithyClient.take(output, {
        MonitoringScheduleArn: smithyClient.expectString,
    });
};
const de_CreateNotebookInstanceLifecycleConfigOutput = (output, context) => {
    return smithyClient.take(output, {
        NotebookInstanceLifecycleConfigArn: smithyClient.expectString,
    });
};
const de_CreateNotebookInstanceOutput = (output, context) => {
    return smithyClient.take(output, {
        NotebookInstanceArn: smithyClient.expectString,
    });
};
const de_CreateOptimizationJobResponse = (output, context) => {
    return smithyClient.take(output, {
        OptimizationJobArn: smithyClient.expectString,
    });
};
const de_CreatePartnerAppPresignedUrlResponse = (output, context) => {
    return smithyClient.take(output, {
        Url: smithyClient.expectString,
    });
};
const de_CreatePartnerAppResponse = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
    });
};
const de_CreatePipelineResponse = (output, context) => {
    return smithyClient.take(output, {
        PipelineArn: smithyClient.expectString,
    });
};
const de_CreatePresignedDomainUrlResponse = (output, context) => {
    return smithyClient.take(output, {
        AuthorizedUrl: smithyClient.expectString,
    });
};
const de_CreatePresignedMlflowTrackingServerUrlResponse = (output, context) => {
    return smithyClient.take(output, {
        AuthorizedUrl: smithyClient.expectString,
    });
};
const de_CreatePresignedNotebookInstanceUrlOutput = (output, context) => {
    return smithyClient.take(output, {
        AuthorizedUrl: smithyClient.expectString,
    });
};
const de_CreateProcessingJobResponse = (output, context) => {
    return smithyClient.take(output, {
        ProcessingJobArn: smithyClient.expectString,
    });
};
const de_CreateProjectOutput = (output, context) => {
    return smithyClient.take(output, {
        ProjectArn: smithyClient.expectString,
        ProjectId: smithyClient.expectString,
    });
};
const de_CreateSpaceResponse = (output, context) => {
    return smithyClient.take(output, {
        SpaceArn: smithyClient.expectString,
    });
};
const de_CreateStudioLifecycleConfigResponse = (output, context) => {
    return smithyClient.take(output, {
        StudioLifecycleConfigArn: smithyClient.expectString,
    });
};
const de_CreateTrainingJobResponse = (output, context) => {
    return smithyClient.take(output, {
        TrainingJobArn: smithyClient.expectString,
    });
};
const de_CreateTrainingPlanResponse = (output, context) => {
    return smithyClient.take(output, {
        TrainingPlanArn: smithyClient.expectString,
    });
};
const de_CreateTransformJobResponse = (output, context) => {
    return smithyClient.take(output, {
        TransformJobArn: smithyClient.expectString,
    });
};
const de_CreateTrialComponentResponse = (output, context) => {
    return smithyClient.take(output, {
        TrialComponentArn: smithyClient.expectString,
    });
};
const de_CreateTrialResponse = (output, context) => {
    return smithyClient.take(output, {
        TrialArn: smithyClient.expectString,
    });
};
const de_CreateUserProfileResponse = (output, context) => {
    return smithyClient.take(output, {
        UserProfileArn: smithyClient.expectString,
    });
};
const de_CreateWorkforceResponse = (output, context) => {
    return smithyClient.take(output, {
        WorkforceArn: smithyClient.expectString,
    });
};
const de_CreateWorkteamResponse = (output, context) => {
    return smithyClient.take(output, {
        WorkteamArn: smithyClient.expectString,
    });
};
const de_CsvContentTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_CustomerMetadataMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_CustomFileSystem = (output, context) => {
    if (output.EFSFileSystem != null) {
        return {
            EFSFileSystem: de_EFSFileSystem(output.EFSFileSystem),
        };
    }
    if (output.FSxLustreFileSystem != null) {
        return {
            FSxLustreFileSystem: de_FSxLustreFileSystem(output.FSxLustreFileSystem),
        };
    }
    if (output.S3FileSystem != null) {
        return {
            S3FileSystem: de_S3FileSystem(output.S3FileSystem),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_CustomFileSystemConfig = (output, context) => {
    if (output.EFSFileSystemConfig != null) {
        return {
            EFSFileSystemConfig: de_EFSFileSystemConfig(output.EFSFileSystemConfig),
        };
    }
    if (output.FSxLustreFileSystemConfig != null) {
        return {
            FSxLustreFileSystemConfig: de_FSxLustreFileSystemConfig(output.FSxLustreFileSystemConfig),
        };
    }
    if (output.S3FileSystemConfig != null) {
        return {
            S3FileSystemConfig: de_S3FileSystemConfig(output.S3FileSystemConfig),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_CustomFileSystemConfigs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomFileSystemConfig(core$1.awsExpectUnion(entry));
    });
    return retVal;
};
const de_CustomFileSystems = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomFileSystem(core$1.awsExpectUnion(entry));
    });
    return retVal;
};
const de_CustomImage = (output, context) => {
    return smithyClient.take(output, {
        AppImageConfigName: smithyClient.expectString,
        ImageName: smithyClient.expectString,
        ImageVersionNumber: smithyClient.expectInt32,
    });
};
const de_CustomImageContainerArguments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_CustomImageContainerEntrypoint = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_CustomImageContainerEnvironmentVariables = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_CustomImages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_CustomImage(entry);
    });
    return retVal;
};
const de_CustomizedMetricSpecification = (output, context) => {
    return smithyClient.take(output, {
        MetricName: smithyClient.expectString,
        Namespace: smithyClient.expectString,
        Statistic: smithyClient.expectString,
    });
};
const de_CustomPosixUserConfig = (output, context) => {
    return smithyClient.take(output, {
        Gid: smithyClient.expectLong,
        Uid: smithyClient.expectLong,
    });
};
const de_DataCaptureConfig = (output, context) => {
    return smithyClient.take(output, {
        CaptureContentTypeHeader: (_) => de_CaptureContentTypeHeader(_),
        CaptureOptions: (_) => de_CaptureOptionList(_),
        DestinationS3Uri: smithyClient.expectString,
        EnableCapture: smithyClient.expectBoolean,
        InitialSamplingPercentage: smithyClient.expectInt32,
        KmsKeyId: smithyClient.expectString,
    });
};
const de_DataCaptureConfigSummary = (output, context) => {
    return smithyClient.take(output, {
        CaptureStatus: smithyClient.expectString,
        CurrentSamplingPercentage: smithyClient.expectInt32,
        DestinationS3Uri: smithyClient.expectString,
        EnableCapture: smithyClient.expectBoolean,
        KmsKeyId: smithyClient.expectString,
    });
};
const de_DataCatalogConfig = (output, context) => {
    return smithyClient.take(output, {
        Catalog: smithyClient.expectString,
        Database: smithyClient.expectString,
        TableName: smithyClient.expectString,
    });
};
const de_DataProcessing = (output, context) => {
    return smithyClient.take(output, {
        InputFilter: smithyClient.expectString,
        JoinSource: smithyClient.expectString,
        OutputFilter: smithyClient.expectString,
    });
};
const de_DataQualityAppSpecification = (output, context) => {
    return smithyClient.take(output, {
        ContainerArguments: (_) => de_MonitoringContainerArguments(_),
        ContainerEntrypoint: (_) => de_ContainerEntrypoint(_),
        Environment: (_) => de_MonitoringEnvironmentMap(_),
        ImageUri: smithyClient.expectString,
        PostAnalyticsProcessorSourceUri: smithyClient.expectString,
        RecordPreprocessorSourceUri: smithyClient.expectString,
    });
};
const de_DataQualityBaselineConfig = (output, context) => {
    return smithyClient.take(output, {
        BaseliningJobName: smithyClient.expectString,
        ConstraintsResource: (_) => de_MonitoringConstraintsResource(_),
        StatisticsResource: (_) => de_MonitoringStatisticsResource(_),
    });
};
const de_DataQualityJobInput = (output, context) => {
    return smithyClient.take(output, {
        BatchTransformInput: (_) => de_BatchTransformInput(_),
        EndpointInput: (_) => de_EndpointInput(_),
    });
};
const de_DatasetDefinition = (output, context) => {
    return smithyClient.take(output, {
        AthenaDatasetDefinition: (_) => de_AthenaDatasetDefinition(_),
        DataDistributionType: smithyClient.expectString,
        InputMode: smithyClient.expectString,
        LocalPath: smithyClient.expectString,
        RedshiftDatasetDefinition: (_) => de_RedshiftDatasetDefinition(_),
    });
};
const de_DataSource = (output, context) => {
    return smithyClient.take(output, {
        FileSystemDataSource: (_) => de_FileSystemDataSource(_),
        S3DataSource: (_) => de_S3DataSource(_),
    });
};
const de_DebugHookConfig = (output, context) => {
    return smithyClient.take(output, {
        CollectionConfigurations: (_) => de_CollectionConfigurations(_),
        HookParameters: (_) => de_HookParameters(_),
        LocalPath: smithyClient.expectString,
        S3OutputPath: smithyClient.expectString,
    });
};
const de_DebugRuleConfiguration = (output, context) => {
    return smithyClient.take(output, {
        InstanceType: smithyClient.expectString,
        LocalPath: smithyClient.expectString,
        RuleConfigurationName: smithyClient.expectString,
        RuleEvaluatorImage: smithyClient.expectString,
        RuleParameters: (_) => de_RuleParameters(_),
        S3OutputPath: smithyClient.expectString,
        VolumeSizeInGB: smithyClient.expectInt32,
    });
};
const de_DebugRuleConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DebugRuleConfiguration(entry);
    });
    return retVal;
};
const de_DebugRuleEvaluationStatus = (output, context) => {
    return smithyClient.take(output, {
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        RuleConfigurationName: smithyClient.expectString,
        RuleEvaluationJobArn: smithyClient.expectString,
        RuleEvaluationStatus: smithyClient.expectString,
        StatusDetails: smithyClient.expectString,
    });
};
const de_DebugRuleEvaluationStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DebugRuleEvaluationStatus(entry);
    });
    return retVal;
};
const de_DefaultEbsStorageSettings = (output, context) => {
    return smithyClient.take(output, {
        DefaultEbsVolumeSizeInGb: smithyClient.expectInt32,
        MaximumEbsVolumeSizeInGb: smithyClient.expectInt32,
    });
};
const de_DefaultSpaceSettings = (output, context) => {
    return smithyClient.take(output, {
        CustomFileSystemConfigs: (_) => de_CustomFileSystemConfigs(_),
        CustomPosixUserConfig: (_) => de_CustomPosixUserConfig(_),
        ExecutionRole: smithyClient.expectString,
        JupyterLabAppSettings: (_) => de_JupyterLabAppSettings(_),
        JupyterServerAppSettings: (_) => de_JupyterServerAppSettings(_),
        KernelGatewayAppSettings: (_) => de_KernelGatewayAppSettings(_),
        SecurityGroups: (_) => de_SecurityGroupIds(_),
        SpaceStorageSettings: (_) => de_DefaultSpaceStorageSettings(_),
    });
};
const de_DefaultSpaceStorageSettings = (output, context) => {
    return smithyClient.take(output, {
        DefaultEbsStorageSettings: (_) => de_DefaultEbsStorageSettings(_),
    });
};
const de_DeleteActionResponse = (output, context) => {
    return smithyClient.take(output, {
        ActionArn: smithyClient.expectString,
    });
};
const de_DeleteArtifactResponse = (output, context) => {
    return smithyClient.take(output, {
        ArtifactArn: smithyClient.expectString,
    });
};
const de_DeleteAssociationResponse = (output, context) => {
    return smithyClient.take(output, {
        DestinationArn: smithyClient.expectString,
        SourceArn: smithyClient.expectString,
    });
};
const de_DeleteClusterResponse = (output, context) => {
    return smithyClient.take(output, {
        ClusterArn: smithyClient.expectString,
    });
};
const de_DeleteContextResponse = (output, context) => {
    return smithyClient.take(output, {
        ContextArn: smithyClient.expectString,
    });
};
const de_DeleteExperimentResponse = (output, context) => {
    return smithyClient.take(output, {
        ExperimentArn: smithyClient.expectString,
    });
};
const de_DeleteFlowDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {});
};
const de_DeleteHumanTaskUiResponse = (output, context) => {
    return smithyClient.take(output, {});
};
const de_DeleteImageResponse = (output, context) => {
    return smithyClient.take(output, {});
};
const de_DeleteImageVersionResponse = (output, context) => {
    return smithyClient.take(output, {});
};
const de_DeleteInferenceExperimentResponse = (output, context) => {
    return smithyClient.take(output, {
        InferenceExperimentArn: smithyClient.expectString,
    });
};
const de_DeleteMlflowTrackingServerResponse = (output, context) => {
    return smithyClient.take(output, {
        TrackingServerArn: smithyClient.expectString,
    });
};
const de_DeletePartnerAppResponse = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
    });
};
const de_DeletePipelineResponse = (output, context) => {
    return smithyClient.take(output, {
        PipelineArn: smithyClient.expectString,
    });
};
const de_DeleteTagsOutput = (output, context) => {
    return smithyClient.take(output, {});
};
const de_DeleteTrialComponentResponse = (output, context) => {
    return smithyClient.take(output, {
        TrialComponentArn: smithyClient.expectString,
    });
};
const de_DeleteTrialResponse = (output, context) => {
    return smithyClient.take(output, {
        TrialArn: smithyClient.expectString,
    });
};
const de_DeleteWorkforceResponse = (output, context) => {
    return smithyClient.take(output, {});
};
const de_DeleteWorkteamResponse = (output, context) => {
    return smithyClient.take(output, {
        Success: smithyClient.expectBoolean,
    });
};
const de_DeployedImage = (output, context) => {
    return smithyClient.take(output, {
        ResolutionTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ResolvedImage: smithyClient.expectString,
        SpecifiedImage: smithyClient.expectString,
    });
};
const de_DeployedImages = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeployedImage(entry);
    });
    return retVal;
};
const de_DeploymentConfig = (output, context) => {
    return smithyClient.take(output, {
        AutoRollbackConfiguration: (_) => de_AutoRollbackConfig(_),
        BlueGreenUpdatePolicy: (_) => de_BlueGreenUpdatePolicy(_),
        RollingUpdatePolicy: (_) => de_RollingUpdatePolicy(_),
    });
};
const de_DeploymentConfiguration = (output, context) => {
    return smithyClient.take(output, {
        AutoRollbackConfiguration: (_) => de_AutoRollbackAlarms(_),
        RollingUpdatePolicy: (_) => de_RollingDeploymentPolicy(_),
        WaitIntervalInSeconds: smithyClient.expectInt32,
    });
};
const de_DeploymentRecommendation = (output, context) => {
    return smithyClient.take(output, {
        RealTimeInferenceRecommendations: (_) => de_RealTimeInferenceRecommendations(_),
        RecommendationStatus: smithyClient.expectString,
    });
};
const de_DeploymentStageStatusSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeploymentStageStatusSummary(entry);
    });
    return retVal;
};
const de_DeploymentStageStatusSummary = (output, context) => {
    return smithyClient.take(output, {
        DeploymentConfig: (_) => de_EdgeDeploymentConfig(_),
        DeploymentStatus: (_) => de_EdgeDeploymentStatus(_),
        DeviceSelectionConfig: (_) => de_DeviceSelectionConfig(_),
        StageName: smithyClient.expectString,
    });
};
const de_DerivedInformation = (output, context) => {
    return smithyClient.take(output, {
        DerivedDataInputConfig: smithyClient.expectString,
    });
};
const de_DescribeActionResponse = (output, context) => {
    return smithyClient.take(output, {
        ActionArn: smithyClient.expectString,
        ActionName: smithyClient.expectString,
        ActionType: smithyClient.expectString,
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LineageGroupArn: smithyClient.expectString,
        MetadataProperties: (_) => de_MetadataProperties(_),
        Properties: (_) => de_LineageEntityParameters(_),
        Source: (_) => de_ActionSource(_),
        Status: smithyClient.expectString,
    });
};
const de_DescribeAlgorithmOutput = (output, context) => {
    return smithyClient.take(output, {
        AlgorithmArn: smithyClient.expectString,
        AlgorithmDescription: smithyClient.expectString,
        AlgorithmName: smithyClient.expectString,
        AlgorithmStatus: smithyClient.expectString,
        AlgorithmStatusDetails: (_) => de_AlgorithmStatusDetails(_),
        CertifyForMarketplace: smithyClient.expectBoolean,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InferenceSpecification: (_) => de_InferenceSpecification(_),
        ProductId: smithyClient.expectString,
        TrainingSpecification: (_) => de_TrainingSpecification(_),
        ValidationSpecification: (_) => de_AlgorithmValidationSpecification(_),
    });
};
const de_DescribeAppImageConfigResponse = (output, context) => {
    return smithyClient.take(output, {
        AppImageConfigArn: smithyClient.expectString,
        AppImageConfigName: smithyClient.expectString,
        CodeEditorAppImageConfig: (_) => de_CodeEditorAppImageConfig(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        JupyterLabAppImageConfig: (_) => de_JupyterLabAppImageConfig(_),
        KernelGatewayImageConfig: (_) => de_KernelGatewayImageConfig(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DescribeAppResponse = (output, context) => {
    return smithyClient.take(output, {
        AppArn: smithyClient.expectString,
        AppName: smithyClient.expectString,
        AppType: smithyClient.expectString,
        BuiltInLifecycleConfigArn: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DomainId: smithyClient.expectString,
        EffectiveTrustedIdentityPropagationStatus: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        LastHealthCheckTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastUserActivityTimestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        RecoveryMode: smithyClient.expectBoolean,
        ResourceSpec: (_) => de_ResourceSpec(_),
        SpaceName: smithyClient.expectString,
        Status: smithyClient.expectString,
        UserProfileName: smithyClient.expectString,
    });
};
const de_DescribeArtifactResponse = (output, context) => {
    return smithyClient.take(output, {
        ArtifactArn: smithyClient.expectString,
        ArtifactName: smithyClient.expectString,
        ArtifactType: smithyClient.expectString,
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LineageGroupArn: smithyClient.expectString,
        MetadataProperties: (_) => de_MetadataProperties(_),
        Properties: (_) => de_LineageEntityParameters(_),
        Source: (_) => de_ArtifactSource(_),
    });
};
const de_DescribeAutoMLJobResponse = (output, context) => {
    return smithyClient.take(output, {
        AutoMLJobArn: smithyClient.expectString,
        AutoMLJobArtifacts: (_) => de_AutoMLJobArtifacts(_),
        AutoMLJobConfig: (_) => de_AutoMLJobConfig(_),
        AutoMLJobName: smithyClient.expectString,
        AutoMLJobObjective: (_) => de_AutoMLJobObjective(_),
        AutoMLJobSecondaryStatus: smithyClient.expectString,
        AutoMLJobStatus: smithyClient.expectString,
        BestCandidate: (_) => de_AutoMLCandidate(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        GenerateCandidateDefinitionsOnly: smithyClient.expectBoolean,
        InputDataConfig: (_) => de_AutoMLInputDataConfig(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelDeployConfig: (_) => de_ModelDeployConfig(_),
        ModelDeployResult: (_) => de_ModelDeployResult(_),
        OutputDataConfig: (_) => de_AutoMLOutputDataConfig(_),
        PartialFailureReasons: (_) => de_AutoMLPartialFailureReasons(_),
        ProblemType: smithyClient.expectString,
        ResolvedAttributes: (_) => de_ResolvedAttributes(_),
        RoleArn: smithyClient.expectString,
    });
};
const de_DescribeAutoMLJobV2Response = (output, context) => {
    return smithyClient.take(output, {
        AutoMLComputeConfig: (_) => de_AutoMLComputeConfig(_),
        AutoMLJobArn: smithyClient.expectString,
        AutoMLJobArtifacts: (_) => de_AutoMLJobArtifacts(_),
        AutoMLJobInputDataConfig: (_) => de_AutoMLJobInputDataConfig(_),
        AutoMLJobName: smithyClient.expectString,
        AutoMLJobObjective: (_) => de_AutoMLJobObjective(_),
        AutoMLJobSecondaryStatus: smithyClient.expectString,
        AutoMLJobStatus: smithyClient.expectString,
        AutoMLProblemTypeConfig: (_) => de_AutoMLProblemTypeConfig(core$1.awsExpectUnion(_)),
        AutoMLProblemTypeConfigName: smithyClient.expectString,
        BestCandidate: (_) => de_AutoMLCandidate(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DataSplitConfig: (_) => de_AutoMLDataSplitConfig(_),
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelDeployConfig: (_) => de_ModelDeployConfig(_),
        ModelDeployResult: (_) => de_ModelDeployResult(_),
        OutputDataConfig: (_) => de_AutoMLOutputDataConfig(_),
        PartialFailureReasons: (_) => de_AutoMLPartialFailureReasons(_),
        ResolvedAttributes: (_) => de_AutoMLResolvedAttributes(_),
        RoleArn: smithyClient.expectString,
        SecurityConfig: (_) => de_AutoMLSecurityConfig(_),
    });
};
const de_DescribeClusterEventResponse = (output, context) => {
    return smithyClient.take(output, {
        EventDetails: (_) => de_ClusterEventDetail(_),
    });
};
const de_DescribeClusterNodeResponse = (output, context) => {
    return smithyClient.take(output, {
        NodeDetails: (_) => de_ClusterNodeDetails(_),
    });
};
const de_DescribeClusterResponse = (output, context) => {
    return smithyClient.take(output, {
        AutoScaling: (_) => de_ClusterAutoScalingConfigOutput(_),
        ClusterArn: smithyClient.expectString,
        ClusterName: smithyClient.expectString,
        ClusterRole: smithyClient.expectString,
        ClusterStatus: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureMessage: smithyClient.expectString,
        InstanceGroups: (_) => de_ClusterInstanceGroupDetailsList(_),
        NodeProvisioningMode: smithyClient.expectString,
        NodeRecovery: smithyClient.expectString,
        Orchestrator: (_) => de_ClusterOrchestrator(_),
        RestrictedInstanceGroups: (_) => de_ClusterRestrictedInstanceGroupDetailsList(_),
        TieredStorageConfig: (_) => de_ClusterTieredStorageConfig(_),
        VpcConfig: (_) => de_VpcConfig(_),
    });
};
const de_DescribeClusterSchedulerConfigResponse = (output, context) => {
    return smithyClient.take(output, {
        ClusterArn: smithyClient.expectString,
        ClusterSchedulerConfigArn: smithyClient.expectString,
        ClusterSchedulerConfigId: smithyClient.expectString,
        ClusterSchedulerConfigVersion: smithyClient.expectInt32,
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        SchedulerConfig: (_) => de_SchedulerConfig(_),
        Status: smithyClient.expectString,
    });
};
const de_DescribeCodeRepositoryOutput = (output, context) => {
    return smithyClient.take(output, {
        CodeRepositoryArn: smithyClient.expectString,
        CodeRepositoryName: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        GitConfig: (_) => de_GitConfig(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DescribeCompilationJobResponse = (output, context) => {
    return smithyClient.take(output, {
        CompilationEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CompilationJobArn: smithyClient.expectString,
        CompilationJobName: smithyClient.expectString,
        CompilationJobStatus: smithyClient.expectString,
        CompilationStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DerivedInformation: (_) => de_DerivedInformation(_),
        FailureReason: smithyClient.expectString,
        InferenceImage: smithyClient.expectString,
        InputConfig: (_) => de_InputConfig(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelArtifacts: (_) => de_ModelArtifacts(_),
        ModelDigests: (_) => de_ModelDigests(_),
        ModelPackageVersionArn: smithyClient.expectString,
        OutputConfig: (_) => de_OutputConfig(_),
        RoleArn: smithyClient.expectString,
        StoppingCondition: (_) => de_StoppingCondition(_),
        VpcConfig: (_) => de_NeoVpcConfig(_),
    });
};
const de_DescribeComputeQuotaResponse = (output, context) => {
    return smithyClient.take(output, {
        ActivationState: smithyClient.expectString,
        ClusterArn: smithyClient.expectString,
        ComputeQuotaArn: smithyClient.expectString,
        ComputeQuotaConfig: (_) => de_ComputeQuotaConfig(_),
        ComputeQuotaId: smithyClient.expectString,
        ComputeQuotaTarget: (_) => de_ComputeQuotaTarget(_),
        ComputeQuotaVersion: smithyClient.expectInt32,
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_DescribeContextResponse = (output, context) => {
    return smithyClient.take(output, {
        ContextArn: smithyClient.expectString,
        ContextName: smithyClient.expectString,
        ContextType: smithyClient.expectString,
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LineageGroupArn: smithyClient.expectString,
        Properties: (_) => de_LineageEntityParameters(_),
        Source: (_) => de_ContextSource(_),
    });
};
const de_DescribeDataQualityJobDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DataQualityAppSpecification: (_) => de_DataQualityAppSpecification(_),
        DataQualityBaselineConfig: (_) => de_DataQualityBaselineConfig(_),
        DataQualityJobInput: (_) => de_DataQualityJobInput(_),
        DataQualityJobOutputConfig: (_) => de_MonitoringOutputConfig(_),
        JobDefinitionArn: smithyClient.expectString,
        JobDefinitionName: smithyClient.expectString,
        JobResources: (_) => de_MonitoringResources(_),
        NetworkConfig: (_) => de_MonitoringNetworkConfig(_),
        RoleArn: smithyClient.expectString,
        StoppingCondition: (_) => de_MonitoringStoppingCondition(_),
    });
};
const de_DescribeDeviceFleetResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        DeviceFleetArn: smithyClient.expectString,
        DeviceFleetName: smithyClient.expectString,
        IotRoleAlias: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        OutputConfig: (_) => de_EdgeOutputConfig(_),
        RoleArn: smithyClient.expectString,
    });
};
const de_DescribeDeviceResponse = (output, context) => {
    return smithyClient.take(output, {
        AgentVersion: smithyClient.expectString,
        Description: smithyClient.expectString,
        DeviceArn: smithyClient.expectString,
        DeviceFleetName: smithyClient.expectString,
        DeviceName: smithyClient.expectString,
        IotThingName: smithyClient.expectString,
        LatestHeartbeat: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MaxModels: smithyClient.expectInt32,
        Models: (_) => de_EdgeModels(_),
        NextToken: smithyClient.expectString,
        RegistrationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DescribeDomainResponse = (output, context) => {
    return smithyClient.take(output, {
        AppNetworkAccessType: smithyClient.expectString,
        AppSecurityGroupManagement: smithyClient.expectString,
        AuthMode: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DefaultSpaceSettings: (_) => de_DefaultSpaceSettings(_),
        DefaultUserSettings: (_) => de_UserSettings(_),
        DomainArn: smithyClient.expectString,
        DomainId: smithyClient.expectString,
        DomainName: smithyClient.expectString,
        DomainSettings: (_) => de_DomainSettings(_),
        FailureReason: smithyClient.expectString,
        HomeEfsFileSystemId: smithyClient.expectString,
        HomeEfsFileSystemKmsKeyId: smithyClient.expectString,
        KmsKeyId: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        SecurityGroupIdForDomainBoundary: smithyClient.expectString,
        SingleSignOnApplicationArn: smithyClient.expectString,
        SingleSignOnManagedApplicationInstanceId: smithyClient.expectString,
        Status: smithyClient.expectString,
        SubnetIds: (_) => de_Subnets(_),
        TagPropagation: smithyClient.expectString,
        Url: smithyClient.expectString,
        VpcId: smithyClient.expectString,
    });
};
const de_DescribeEdgeDeploymentPlanResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DeviceFleetName: smithyClient.expectString,
        EdgeDeploymentFailed: smithyClient.expectInt32,
        EdgeDeploymentPending: smithyClient.expectInt32,
        EdgeDeploymentPlanArn: smithyClient.expectString,
        EdgeDeploymentPlanName: smithyClient.expectString,
        EdgeDeploymentSuccess: smithyClient.expectInt32,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelConfigs: (_) => de_EdgeDeploymentModelConfigs(_),
        NextToken: smithyClient.expectString,
        Stages: (_) => de_DeploymentStageStatusSummaries(_),
    });
};
const de_DescribeEdgePackagingJobResponse = (output, context) => {
    return smithyClient.take(output, {
        CompilationJobName: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EdgePackagingJobArn: smithyClient.expectString,
        EdgePackagingJobName: smithyClient.expectString,
        EdgePackagingJobStatus: smithyClient.expectString,
        EdgePackagingJobStatusMessage: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelArtifact: smithyClient.expectString,
        ModelName: smithyClient.expectString,
        ModelSignature: smithyClient.expectString,
        ModelVersion: smithyClient.expectString,
        OutputConfig: (_) => de_EdgeOutputConfig(_),
        PresetDeploymentOutput: (_) => de_EdgePresetDeploymentOutput(_),
        ResourceKey: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
    });
};
const de_DescribeEndpointConfigOutput = (output, context) => {
    return smithyClient.take(output, {
        AsyncInferenceConfig: (_) => de_AsyncInferenceConfig(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DataCaptureConfig: (_) => de_DataCaptureConfig(_),
        EnableNetworkIsolation: smithyClient.expectBoolean,
        EndpointConfigArn: smithyClient.expectString,
        EndpointConfigName: smithyClient.expectString,
        ExecutionRoleArn: smithyClient.expectString,
        ExplainerConfig: (_) => de_ExplainerConfig(_),
        KmsKeyId: smithyClient.expectString,
        ProductionVariants: (_) => de_ProductionVariantList(_),
        ShadowProductionVariants: (_) => de_ProductionVariantList(_),
        VpcConfig: (_) => de_VpcConfig(_),
    });
};
const de_DescribeEndpointOutput = (output, context) => {
    return smithyClient.take(output, {
        AsyncInferenceConfig: (_) => de_AsyncInferenceConfig(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DataCaptureConfig: (_) => de_DataCaptureConfigSummary(_),
        EndpointArn: smithyClient.expectString,
        EndpointConfigName: smithyClient.expectString,
        EndpointName: smithyClient.expectString,
        EndpointStatus: smithyClient.expectString,
        ExplainerConfig: (_) => de_ExplainerConfig(_),
        FailureReason: smithyClient.expectString,
        LastDeploymentConfig: (_) => de_DeploymentConfig(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        PendingDeploymentSummary: (_) => de_PendingDeploymentSummary(_),
        ProductionVariants: (_) => de_ProductionVariantSummaryList(_),
        ShadowProductionVariants: (_) => de_ProductionVariantSummaryList(_),
    });
};
const de_DescribeExperimentResponse = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        DisplayName: smithyClient.expectString,
        ExperimentArn: smithyClient.expectString,
        ExperimentName: smithyClient.expectString,
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Source: (_) => de_ExperimentSource(_),
    });
};
const de_DescribeFeatureGroupResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        EventTimeFeatureName: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        FeatureDefinitions: (_) => de_FeatureDefinitions(_),
        FeatureGroupArn: smithyClient.expectString,
        FeatureGroupName: smithyClient.expectString,
        FeatureGroupStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastUpdateStatus: (_) => de_LastUpdateStatus(_),
        NextToken: smithyClient.expectString,
        OfflineStoreConfig: (_) => de_OfflineStoreConfig(_),
        OfflineStoreStatus: (_) => de_OfflineStoreStatus(_),
        OnlineStoreConfig: (_) => de_OnlineStoreConfig(_),
        OnlineStoreTotalSizeBytes: smithyClient.expectLong,
        RecordIdentifierFeatureName: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        ThroughputConfig: (_) => de_ThroughputConfigDescription(_),
    });
};
const de_DescribeFeatureMetadataResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        FeatureGroupArn: smithyClient.expectString,
        FeatureGroupName: smithyClient.expectString,
        FeatureName: smithyClient.expectString,
        FeatureType: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Parameters: (_) => de_FeatureParameters(_),
    });
};
const de_DescribeFlowDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        FlowDefinitionArn: smithyClient.expectString,
        FlowDefinitionName: smithyClient.expectString,
        FlowDefinitionStatus: smithyClient.expectString,
        HumanLoopActivationConfig: (_) => de_HumanLoopActivationConfig(_),
        HumanLoopConfig: (_) => de_HumanLoopConfig(_),
        HumanLoopRequestSource: (_) => de_HumanLoopRequestSource(_),
        OutputConfig: (_) => de_FlowDefinitionOutputConfig(_),
        RoleArn: smithyClient.expectString,
    });
};
const de_DescribeHubContentResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DocumentSchemaVersion: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        HubArn: smithyClient.expectString,
        HubContentArn: smithyClient.expectString,
        HubContentDependencies: (_) => de_HubContentDependencyList(_),
        HubContentDescription: smithyClient.expectString,
        HubContentDisplayName: smithyClient.expectString,
        HubContentDocument: smithyClient.expectString,
        HubContentMarkdown: smithyClient.expectString,
        HubContentName: smithyClient.expectString,
        HubContentSearchKeywords: (_) => de_HubContentSearchKeywordList(_),
        HubContentStatus: smithyClient.expectString,
        HubContentType: smithyClient.expectString,
        HubContentVersion: smithyClient.expectString,
        HubName: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ReferenceMinVersion: smithyClient.expectString,
        SageMakerPublicHubContentArn: smithyClient.expectString,
        SupportStatus: smithyClient.expectString,
    });
};
const de_DescribeHubResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        HubArn: smithyClient.expectString,
        HubDescription: smithyClient.expectString,
        HubDisplayName: smithyClient.expectString,
        HubName: smithyClient.expectString,
        HubSearchKeywords: (_) => de_HubSearchKeywordList(_),
        HubStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        S3StorageConfig: (_) => de_HubS3StorageConfig(_),
    });
};
const de_DescribeHumanTaskUiResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        HumanTaskUiArn: smithyClient.expectString,
        HumanTaskUiName: smithyClient.expectString,
        HumanTaskUiStatus: smithyClient.expectString,
        UiTemplate: (_) => de_UiTemplateInfo(_),
    });
};
const de_DescribeHyperParameterTuningJobResponse = (output, context) => {
    return smithyClient.take(output, {
        Autotune: (_) => de_Autotune(_),
        BestTrainingJob: (_) => de_HyperParameterTrainingJobSummary(_),
        ConsumedResources: (_) => de_HyperParameterTuningJobConsumedResources(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        HyperParameterTuningEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        HyperParameterTuningJobArn: smithyClient.expectString,
        HyperParameterTuningJobConfig: (_) => de_HyperParameterTuningJobConfig(_),
        HyperParameterTuningJobName: smithyClient.expectString,
        HyperParameterTuningJobStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ObjectiveStatusCounters: (_) => de_ObjectiveStatusCounters(_),
        OverallBestTrainingJob: (_) => de_HyperParameterTrainingJobSummary(_),
        TrainingJobDefinition: (_) => de_HyperParameterTrainingJobDefinition(_),
        TrainingJobDefinitions: (_) => de_HyperParameterTrainingJobDefinitions(_),
        TrainingJobStatusCounters: (_) => de_TrainingJobStatusCounters(_),
        TuningJobCompletionDetails: (_) => de_HyperParameterTuningJobCompletionDetails(_),
        WarmStartConfig: (_) => de_HyperParameterTuningJobWarmStartConfig(_),
    });
};
const de_DescribeImageResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        DisplayName: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        ImageArn: smithyClient.expectString,
        ImageName: smithyClient.expectString,
        ImageStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        RoleArn: smithyClient.expectString,
    });
};
const de_DescribeImageVersionResponse = (output, context) => {
    return smithyClient.take(output, {
        BaseImage: smithyClient.expectString,
        ContainerImage: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        Horovod: smithyClient.expectBoolean,
        ImageArn: smithyClient.expectString,
        ImageVersionArn: smithyClient.expectString,
        ImageVersionStatus: smithyClient.expectString,
        JobType: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MLFramework: smithyClient.expectString,
        Processor: smithyClient.expectString,
        ProgrammingLang: smithyClient.expectString,
        ReleaseNotes: smithyClient.expectString,
        VendorGuidance: smithyClient.expectString,
        Version: smithyClient.expectInt32,
    });
};
const de_DescribeInferenceComponentOutput = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndpointArn: smithyClient.expectString,
        EndpointName: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        InferenceComponentArn: smithyClient.expectString,
        InferenceComponentName: smithyClient.expectString,
        InferenceComponentStatus: smithyClient.expectString,
        LastDeploymentConfig: (_) => de_InferenceComponentDeploymentConfig(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        RuntimeConfig: (_) => de_InferenceComponentRuntimeConfigSummary(_),
        Specification: (_) => de_InferenceComponentSpecificationSummary(_),
        VariantName: smithyClient.expectString,
    });
};
const de_DescribeInferenceExperimentResponse = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        CompletionTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DataStorageConfig: (_) => de_InferenceExperimentDataStorageConfig(_),
        Description: smithyClient.expectString,
        EndpointMetadata: (_) => de_EndpointMetadata(_),
        KmsKey: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelVariants: (_) => de_ModelVariantConfigSummaryList(_),
        Name: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        Schedule: (_) => de_InferenceExperimentSchedule(_),
        ShadowModeConfig: (_) => de_ShadowModeConfig(_),
        Status: smithyClient.expectString,
        StatusReason: smithyClient.expectString,
        Type: smithyClient.expectString,
    });
};
const de_DescribeInferenceRecommendationsJobResponse = (output, context) => {
    return smithyClient.take(output, {
        CompletionTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndpointPerformances: (_) => de_EndpointPerformances(_),
        FailureReason: smithyClient.expectString,
        InferenceRecommendations: (_) => de_InferenceRecommendations(_),
        InputConfig: (_) => de_RecommendationJobInputConfig(_),
        JobArn: smithyClient.expectString,
        JobDescription: smithyClient.expectString,
        JobName: smithyClient.expectString,
        JobType: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        RoleArn: smithyClient.expectString,
        Status: smithyClient.expectString,
        StoppingConditions: (_) => de_RecommendationJobStoppingConditions(_),
    });
};
const de_DescribeLabelingJobResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        HumanTaskConfig: (_) => de_HumanTaskConfig(_),
        InputConfig: (_) => de_LabelingJobInputConfig(_),
        JobReferenceCode: smithyClient.expectString,
        LabelAttributeName: smithyClient.expectString,
        LabelCategoryConfigS3Uri: smithyClient.expectString,
        LabelCounters: (_) => de_LabelCounters(_),
        LabelingJobAlgorithmsConfig: (_) => de_LabelingJobAlgorithmsConfig(_),
        LabelingJobArn: smithyClient.expectString,
        LabelingJobName: smithyClient.expectString,
        LabelingJobOutput: (_) => de_LabelingJobOutput(_),
        LabelingJobStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        OutputConfig: (_) => de_LabelingJobOutputConfig(_),
        RoleArn: smithyClient.expectString,
        StoppingConditions: (_) => de_LabelingJobStoppingConditions(_),
        Tags: (_) => de_TagList(_),
    });
};
const de_DescribeLineageGroupResponse = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        DisplayName: smithyClient.expectString,
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LineageGroupArn: smithyClient.expectString,
        LineageGroupName: smithyClient.expectString,
    });
};
const de_DescribeMlflowTrackingServerResponse = (output, context) => {
    return smithyClient.take(output, {
        ArtifactStoreUri: smithyClient.expectString,
        AutomaticModelRegistration: smithyClient.expectBoolean,
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        IsActive: smithyClient.expectString,
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MlflowVersion: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        TrackingServerArn: smithyClient.expectString,
        TrackingServerMaintenanceStatus: smithyClient.expectString,
        TrackingServerName: smithyClient.expectString,
        TrackingServerSize: smithyClient.expectString,
        TrackingServerStatus: smithyClient.expectString,
        TrackingServerUrl: smithyClient.expectString,
        WeeklyMaintenanceWindowStart: smithyClient.expectString,
    });
};
const de_DescribeModelBiasJobDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        JobDefinitionArn: smithyClient.expectString,
        JobDefinitionName: smithyClient.expectString,
        JobResources: (_) => de_MonitoringResources(_),
        ModelBiasAppSpecification: (_) => de_ModelBiasAppSpecification(_),
        ModelBiasBaselineConfig: (_) => de_ModelBiasBaselineConfig(_),
        ModelBiasJobInput: (_) => de_ModelBiasJobInput(_),
        ModelBiasJobOutputConfig: (_) => de_MonitoringOutputConfig(_),
        NetworkConfig: (_) => de_MonitoringNetworkConfig(_),
        RoleArn: smithyClient.expectString,
        StoppingCondition: (_) => de_MonitoringStoppingCondition(_),
    });
};
const de_DescribeModelCardExportJobResponse = (output, context) => {
    return smithyClient.take(output, {
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ExportArtifacts: (_) => de_ModelCardExportArtifacts(_),
        FailureReason: smithyClient.expectString,
        LastModifiedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelCardExportJobArn: smithyClient.expectString,
        ModelCardExportJobName: smithyClient.expectString,
        ModelCardName: smithyClient.expectString,
        ModelCardVersion: smithyClient.expectInt32,
        OutputConfig: (_) => de_ModelCardExportOutputConfig(_),
        Status: smithyClient.expectString,
    });
};
const de_DescribeModelCardResponse = (output, context) => {
    return smithyClient.take(output, {
        Content: smithyClient.expectString,
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelCardArn: smithyClient.expectString,
        ModelCardName: smithyClient.expectString,
        ModelCardProcessingStatus: smithyClient.expectString,
        ModelCardStatus: smithyClient.expectString,
        ModelCardVersion: smithyClient.expectInt32,
        SecurityConfig: (_) => de_ModelCardSecurityConfig(_),
    });
};
const de_DescribeModelExplainabilityJobDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        JobDefinitionArn: smithyClient.expectString,
        JobDefinitionName: smithyClient.expectString,
        JobResources: (_) => de_MonitoringResources(_),
        ModelExplainabilityAppSpecification: (_) => de_ModelExplainabilityAppSpecification(_),
        ModelExplainabilityBaselineConfig: (_) => de_ModelExplainabilityBaselineConfig(_),
        ModelExplainabilityJobInput: (_) => de_ModelExplainabilityJobInput(_),
        ModelExplainabilityJobOutputConfig: (_) => de_MonitoringOutputConfig(_),
        NetworkConfig: (_) => de_MonitoringNetworkConfig(_),
        RoleArn: smithyClient.expectString,
        StoppingCondition: (_) => de_MonitoringStoppingCondition(_),
    });
};
const de_DescribeModelOutput = (output, context) => {
    return smithyClient.take(output, {
        Containers: (_) => de_ContainerDefinitionList(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DeploymentRecommendation: (_) => de_DeploymentRecommendation(_),
        EnableNetworkIsolation: smithyClient.expectBoolean,
        ExecutionRoleArn: smithyClient.expectString,
        InferenceExecutionConfig: (_) => de_InferenceExecutionConfig(_),
        ModelArn: smithyClient.expectString,
        ModelName: smithyClient.expectString,
        PrimaryContainer: (_) => de_ContainerDefinition(_),
        VpcConfig: (_) => de_VpcConfig(_),
    });
};
const de_DescribeModelPackageGroupOutput = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelPackageGroupArn: smithyClient.expectString,
        ModelPackageGroupDescription: smithyClient.expectString,
        ModelPackageGroupName: smithyClient.expectString,
        ModelPackageGroupStatus: smithyClient.expectString,
    });
};
const de_DescribeModelPackageOutput = (output, context) => {
    return smithyClient.take(output, {
        AdditionalInferenceSpecifications: (_) => de_AdditionalInferenceSpecifications(_),
        ApprovalDescription: smithyClient.expectString,
        CertifyForMarketplace: smithyClient.expectBoolean,
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CustomerMetadataProperties: (_) => de_CustomerMetadataMap(_),
        Domain: smithyClient.expectString,
        DriftCheckBaselines: (_) => de_DriftCheckBaselines(_),
        InferenceSpecification: (_) => de_InferenceSpecification(_),
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MetadataProperties: (_) => de_MetadataProperties(_),
        ModelApprovalStatus: smithyClient.expectString,
        ModelCard: (_) => de_ModelPackageModelCard(_),
        ModelLifeCycle: (_) => de_ModelLifeCycle(_),
        ModelMetrics: (_) => de_ModelMetrics(_),
        ModelPackageArn: smithyClient.expectString,
        ModelPackageDescription: smithyClient.expectString,
        ModelPackageGroupName: smithyClient.expectString,
        ModelPackageName: smithyClient.expectString,
        ModelPackageStatus: smithyClient.expectString,
        ModelPackageStatusDetails: (_) => de_ModelPackageStatusDetails(_),
        ModelPackageVersion: smithyClient.expectInt32,
        SamplePayloadUrl: smithyClient.expectString,
        SecurityConfig: (_) => de_ModelPackageSecurityConfig(_),
        SkipModelValidation: smithyClient.expectString,
        SourceAlgorithmSpecification: (_) => de_SourceAlgorithmSpecification(_),
        SourceUri: smithyClient.expectString,
        Task: smithyClient.expectString,
        ValidationSpecification: (_) => de_ModelPackageValidationSpecification(_),
    });
};
const de_DescribeModelQualityJobDefinitionResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        JobDefinitionArn: smithyClient.expectString,
        JobDefinitionName: smithyClient.expectString,
        JobResources: (_) => de_MonitoringResources(_),
        ModelQualityAppSpecification: (_) => de_ModelQualityAppSpecification(_),
        ModelQualityBaselineConfig: (_) => de_ModelQualityBaselineConfig(_),
        ModelQualityJobInput: (_) => de_ModelQualityJobInput(_),
        ModelQualityJobOutputConfig: (_) => de_MonitoringOutputConfig(_),
        NetworkConfig: (_) => de_MonitoringNetworkConfig(_),
        RoleArn: smithyClient.expectString,
        StoppingCondition: (_) => de_MonitoringStoppingCondition(_),
    });
};
const de_DescribeMonitoringScheduleResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndpointName: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastMonitoringExecutionSummary: (_) => de_MonitoringExecutionSummary(_),
        MonitoringScheduleArn: smithyClient.expectString,
        MonitoringScheduleConfig: (_) => de_MonitoringScheduleConfig(_),
        MonitoringScheduleName: smithyClient.expectString,
        MonitoringScheduleStatus: smithyClient.expectString,
        MonitoringType: smithyClient.expectString,
    });
};
const de_DescribeNotebookInstanceLifecycleConfigOutput = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        NotebookInstanceLifecycleConfigArn: smithyClient.expectString,
        NotebookInstanceLifecycleConfigName: smithyClient.expectString,
        OnCreate: (_) => de_NotebookInstanceLifecycleConfigList(_),
        OnStart: (_) => de_NotebookInstanceLifecycleConfigList(_),
    });
};
const de_DescribeNotebookInstanceOutput = (output, context) => {
    return smithyClient.take(output, {
        AcceleratorTypes: (_) => de_NotebookInstanceAcceleratorTypes(_),
        AdditionalCodeRepositories: (_) => de_AdditionalCodeRepositoryNamesOrUrls(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DefaultCodeRepository: smithyClient.expectString,
        DirectInternetAccess: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        InstanceMetadataServiceConfiguration: (_) => de_InstanceMetadataServiceConfiguration(_),
        InstanceType: smithyClient.expectString,
        IpAddressType: smithyClient.expectString,
        KmsKeyId: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        NetworkInterfaceId: smithyClient.expectString,
        NotebookInstanceArn: smithyClient.expectString,
        NotebookInstanceLifecycleConfigName: smithyClient.expectString,
        NotebookInstanceName: smithyClient.expectString,
        NotebookInstanceStatus: smithyClient.expectString,
        PlatformIdentifier: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        RootAccess: smithyClient.expectString,
        SecurityGroups: (_) => de_SecurityGroupIds(_),
        SubnetId: smithyClient.expectString,
        Url: smithyClient.expectString,
        VolumeSizeInGB: smithyClient.expectInt32,
    });
};
const de_DescribeOptimizationJobResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DeploymentInstanceType: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelSource: (_) => de_OptimizationJobModelSource(_),
        OptimizationConfigs: (_) => de_OptimizationConfigs(_),
        OptimizationEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        OptimizationEnvironment: (_) => de_OptimizationJobEnvironmentVariables(_),
        OptimizationJobArn: smithyClient.expectString,
        OptimizationJobName: smithyClient.expectString,
        OptimizationJobStatus: smithyClient.expectString,
        OptimizationOutput: (_) => de_OptimizationOutput(_),
        OptimizationStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        OutputConfig: (_) => de_OptimizationJobOutputConfig(_),
        RoleArn: smithyClient.expectString,
        StoppingCondition: (_) => de_StoppingCondition(_),
        VpcConfig: (_) => de_OptimizationVpcConfig(_),
    });
};
const de_DescribePartnerAppResponse = (output, context) => {
    return smithyClient.take(output, {
        ApplicationConfig: (_) => de_PartnerAppConfig(_),
        Arn: smithyClient.expectString,
        AuthType: smithyClient.expectString,
        BaseUrl: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EnableIamSessionBasedIdentity: smithyClient.expectBoolean,
        Error: (_) => de_ErrorInfo(_),
        ExecutionRoleArn: smithyClient.expectString,
        KmsKeyId: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MaintenanceConfig: (_) => de_PartnerAppMaintenanceConfig(_),
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
        Tier: smithyClient.expectString,
        Type: smithyClient.expectString,
        Version: smithyClient.expectString,
    });
};
const de_DescribePipelineDefinitionForExecutionResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        PipelineDefinition: smithyClient.expectString,
    });
};
const de_DescribePipelineExecutionResponse = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ParallelismConfiguration: (_) => de_ParallelismConfiguration(_),
        PipelineArn: smithyClient.expectString,
        PipelineExecutionArn: smithyClient.expectString,
        PipelineExecutionDescription: smithyClient.expectString,
        PipelineExecutionDisplayName: smithyClient.expectString,
        PipelineExecutionStatus: smithyClient.expectString,
        PipelineExperimentConfig: (_) => de_PipelineExperimentConfig(_),
        PipelineVersionId: smithyClient.expectLong,
        SelectiveExecutionConfig: (_) => de_SelectiveExecutionConfig(_),
    });
};
const de_DescribePipelineResponse = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastRunTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ParallelismConfiguration: (_) => de_ParallelismConfiguration(_),
        PipelineArn: smithyClient.expectString,
        PipelineDefinition: smithyClient.expectString,
        PipelineDescription: smithyClient.expectString,
        PipelineDisplayName: smithyClient.expectString,
        PipelineName: smithyClient.expectString,
        PipelineStatus: smithyClient.expectString,
        PipelineVersionDescription: smithyClient.expectString,
        PipelineVersionDisplayName: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
    });
};
const de_DescribeProcessingJobResponse = (output, context) => {
    return smithyClient.take(output, {
        AppSpecification: (_) => de_AppSpecification(_),
        AutoMLJobArn: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Environment: (_) => de_ProcessingEnvironmentMap(_),
        ExitMessage: smithyClient.expectString,
        ExperimentConfig: (_) => de_ExperimentConfig(_),
        FailureReason: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MonitoringScheduleArn: smithyClient.expectString,
        NetworkConfig: (_) => de_NetworkConfig(_),
        ProcessingEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ProcessingInputs: (_) => de_ProcessingInputs(_),
        ProcessingJobArn: smithyClient.expectString,
        ProcessingJobName: smithyClient.expectString,
        ProcessingJobStatus: smithyClient.expectString,
        ProcessingOutputConfig: (_) => de_ProcessingOutputConfig(_),
        ProcessingResources: (_) => de_ProcessingResources(_),
        ProcessingStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        RoleArn: smithyClient.expectString,
        StoppingCondition: (_) => de_ProcessingStoppingCondition(_),
        TrainingJobArn: smithyClient.expectString,
    });
};
const de_DescribeProjectOutput = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ProjectArn: smithyClient.expectString,
        ProjectDescription: smithyClient.expectString,
        ProjectId: smithyClient.expectString,
        ProjectName: smithyClient.expectString,
        ProjectStatus: smithyClient.expectString,
        ServiceCatalogProvisionedProductDetails: (_) => de_ServiceCatalogProvisionedProductDetails(_),
        ServiceCatalogProvisioningDetails: (_) => de_ServiceCatalogProvisioningDetails(_),
        TemplateProviderDetails: (_) => de_TemplateProviderDetailList(_),
    });
};
const de_DescribeReservedCapacityResponse = (output, context) => {
    return smithyClient.take(output, {
        AvailabilityZone: smithyClient.expectString,
        AvailableInstanceCount: smithyClient.expectInt32,
        DurationHours: smithyClient.expectLong,
        DurationMinutes: smithyClient.expectLong,
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InUseInstanceCount: smithyClient.expectInt32,
        InstanceType: smithyClient.expectString,
        ReservedCapacityArn: smithyClient.expectString,
        ReservedCapacityType: smithyClient.expectString,
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: smithyClient.expectString,
        TotalInstanceCount: smithyClient.expectInt32,
        UltraServerSummary: (_) => de_UltraServerSummary(_),
    });
};
const de_DescribeSpaceResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DomainId: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        HomeEfsFileSystemUid: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        OwnershipSettings: (_) => de_OwnershipSettings(_),
        SpaceArn: smithyClient.expectString,
        SpaceDisplayName: smithyClient.expectString,
        SpaceName: smithyClient.expectString,
        SpaceSettings: (_) => de_SpaceSettings(_),
        SpaceSharingSettings: (_) => de_SpaceSharingSettings(_),
        Status: smithyClient.expectString,
        Url: smithyClient.expectString,
    });
};
const de_DescribeStudioLifecycleConfigResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        StudioLifecycleConfigAppType: smithyClient.expectString,
        StudioLifecycleConfigArn: smithyClient.expectString,
        StudioLifecycleConfigContent: smithyClient.expectString,
        StudioLifecycleConfigName: smithyClient.expectString,
    });
};
const de_DescribeSubscribedWorkteamResponse = (output, context) => {
    return smithyClient.take(output, {
        SubscribedWorkteam: (_) => de_SubscribedWorkteam(_),
    });
};
const de_DescribeTrainingJobResponse = (output, context) => {
    return smithyClient.take(output, {
        AlgorithmSpecification: (_) => de_AlgorithmSpecification(_),
        AutoMLJobArn: smithyClient.expectString,
        BillableTimeInSeconds: smithyClient.expectInt32,
        CheckpointConfig: (_) => de_CheckpointConfig(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DebugHookConfig: (_) => de_DebugHookConfig(_),
        DebugRuleConfigurations: (_) => de_DebugRuleConfigurations(_),
        DebugRuleEvaluationStatuses: (_) => de_DebugRuleEvaluationStatuses(_),
        EnableInterContainerTrafficEncryption: smithyClient.expectBoolean,
        EnableManagedSpotTraining: smithyClient.expectBoolean,
        EnableNetworkIsolation: smithyClient.expectBoolean,
        Environment: (_) => de_TrainingEnvironmentMap(_),
        ExperimentConfig: (_) => de_ExperimentConfig(_),
        FailureReason: smithyClient.expectString,
        FinalMetricDataList: (_) => de_FinalMetricDataList(_),
        HyperParameters: (_) => de_HyperParameters(_),
        InfraCheckConfig: (_) => de_InfraCheckConfig(_),
        InputDataConfig: (_) => de_InputDataConfig(_),
        LabelingJobArn: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelArtifacts: (_) => de_ModelArtifacts(_),
        OutputDataConfig: (_) => de_OutputDataConfig(_),
        ProfilerConfig: (_) => de_ProfilerConfig(_),
        ProfilerRuleConfigurations: (_) => de_ProfilerRuleConfigurations(_),
        ProfilerRuleEvaluationStatuses: (_) => de_ProfilerRuleEvaluationStatuses(_),
        ProfilingStatus: smithyClient.expectString,
        RemoteDebugConfig: (_) => de_RemoteDebugConfig(_),
        ResourceConfig: (_) => de_ResourceConfig(_),
        RetryStrategy: (_) => de_RetryStrategy(_),
        RoleArn: smithyClient.expectString,
        SecondaryStatus: smithyClient.expectString,
        SecondaryStatusTransitions: (_) => de_SecondaryStatusTransitions(_),
        StoppingCondition: (_) => de_StoppingCondition(_),
        TensorBoardOutputConfig: (_) => de_TensorBoardOutputConfig(_),
        TrainingEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TrainingJobArn: smithyClient.expectString,
        TrainingJobName: smithyClient.expectString,
        TrainingJobStatus: smithyClient.expectString,
        TrainingStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TrainingTimeInSeconds: smithyClient.expectInt32,
        TuningJobArn: smithyClient.expectString,
        VpcConfig: (_) => de_VpcConfig(_),
        WarmPoolStatus: (_) => de_WarmPoolStatus(_),
    });
};
const de_DescribeTrainingPlanResponse = (output, context) => {
    return smithyClient.take(output, {
        AvailableInstanceCount: smithyClient.expectInt32,
        AvailableSpareInstanceCount: smithyClient.expectInt32,
        CurrencyCode: smithyClient.expectString,
        DurationHours: smithyClient.expectLong,
        DurationMinutes: smithyClient.expectLong,
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InUseInstanceCount: smithyClient.expectInt32,
        ReservedCapacitySummaries: (_) => de_ReservedCapacitySummaries(_),
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        TargetResources: (_) => de_SageMakerResourceNames(_),
        TotalInstanceCount: smithyClient.expectInt32,
        TotalUltraServerCount: smithyClient.expectInt32,
        TrainingPlanArn: smithyClient.expectString,
        TrainingPlanName: smithyClient.expectString,
        UnhealthyInstanceCount: smithyClient.expectInt32,
        UpfrontFee: smithyClient.expectString,
    });
};
const de_DescribeTransformJobResponse = (output, context) => {
    return smithyClient.take(output, {
        AutoMLJobArn: smithyClient.expectString,
        BatchStrategy: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DataCaptureConfig: (_) => de_BatchDataCaptureConfig(_),
        DataProcessing: (_) => de_DataProcessing(_),
        Environment: (_) => de_TransformEnvironmentMap(_),
        ExperimentConfig: (_) => de_ExperimentConfig(_),
        FailureReason: smithyClient.expectString,
        LabelingJobArn: smithyClient.expectString,
        MaxConcurrentTransforms: smithyClient.expectInt32,
        MaxPayloadInMB: smithyClient.expectInt32,
        ModelClientConfig: (_) => de_ModelClientConfig(_),
        ModelName: smithyClient.expectString,
        TransformEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TransformInput: (_) => de_TransformInput(_),
        TransformJobArn: smithyClient.expectString,
        TransformJobName: smithyClient.expectString,
        TransformJobStatus: smithyClient.expectString,
        TransformOutput: (_) => de_TransformOutput(_),
        TransformResources: (_) => de_TransformResources(_),
        TransformStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DescribeTrialComponentResponse = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DisplayName: smithyClient.expectString,
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InputArtifacts: (_) => de_TrialComponentArtifacts(_),
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LineageGroupArn: smithyClient.expectString,
        MetadataProperties: (_) => de_MetadataProperties(_),
        Metrics: (_) => de_TrialComponentMetricSummaries(_),
        OutputArtifacts: (_) => de_TrialComponentArtifacts(_),
        Parameters: (_) => de_TrialComponentParameters(_),
        Source: (_) => de_TrialComponentSource(_),
        Sources: (_) => de_TrialComponentSources(_),
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: (_) => de_TrialComponentStatus(_),
        TrialComponentArn: smithyClient.expectString,
        TrialComponentName: smithyClient.expectString,
    });
};
const de_DescribeTrialResponse = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DisplayName: smithyClient.expectString,
        ExperimentName: smithyClient.expectString,
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MetadataProperties: (_) => de_MetadataProperties(_),
        Source: (_) => de_TrialSource(_),
        TrialArn: smithyClient.expectString,
        TrialName: smithyClient.expectString,
    });
};
const de_DescribeUserProfileResponse = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DomainId: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        HomeEfsFileSystemUid: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        SingleSignOnUserIdentifier: smithyClient.expectString,
        SingleSignOnUserValue: smithyClient.expectString,
        Status: smithyClient.expectString,
        UserProfileArn: smithyClient.expectString,
        UserProfileName: smithyClient.expectString,
        UserSettings: (_) => de_UserSettings(_),
    });
};
const de_DescribeWorkforceResponse = (output, context) => {
    return smithyClient.take(output, {
        Workforce: (_) => de_Workforce(_),
    });
};
const de_DescribeWorkteamResponse = (output, context) => {
    return smithyClient.take(output, {
        Workteam: (_) => de_Workteam(_),
    });
};
const de_DetachClusterNodeVolumeResponse = (output, context) => {
    return smithyClient.take(output, {
        AttachTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ClusterArn: smithyClient.expectString,
        DeviceName: smithyClient.expectString,
        NodeId: smithyClient.expectString,
        Status: smithyClient.expectString,
        VolumeId: smithyClient.expectString,
    });
};
const de_DeviceDeploymentSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeviceDeploymentSummary(entry);
    });
    return retVal;
};
const de_DeviceDeploymentSummary = (output, context) => {
    return smithyClient.take(output, {
        DeployedStageName: smithyClient.expectString,
        DeploymentStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        DeviceArn: smithyClient.expectString,
        DeviceDeploymentStatus: smithyClient.expectString,
        DeviceDeploymentStatusMessage: smithyClient.expectString,
        DeviceFleetName: smithyClient.expectString,
        DeviceName: smithyClient.expectString,
        EdgeDeploymentPlanArn: smithyClient.expectString,
        EdgeDeploymentPlanName: smithyClient.expectString,
        StageName: smithyClient.expectString,
    });
};
const de_DeviceFleetSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeviceFleetSummary(entry);
    });
    return retVal;
};
const de_DeviceFleetSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DeviceFleetArn: smithyClient.expectString,
        DeviceFleetName: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DeviceNames = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_DeviceSelectionConfig = (output, context) => {
    return smithyClient.take(output, {
        DeviceNameContains: smithyClient.expectString,
        DeviceNames: (_) => de_DeviceNames(_),
        DeviceSubsetType: smithyClient.expectString,
        Percentage: smithyClient.expectInt32,
    });
};
const de_DeviceStats = (output, context) => {
    return smithyClient.take(output, {
        ConnectedDeviceCount: smithyClient.expectLong,
        RegisteredDeviceCount: smithyClient.expectLong,
    });
};
const de_DeviceSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DeviceSummary(entry);
    });
    return retVal;
};
const de_DeviceSummary = (output, context) => {
    return smithyClient.take(output, {
        AgentVersion: smithyClient.expectString,
        Description: smithyClient.expectString,
        DeviceArn: smithyClient.expectString,
        DeviceFleetName: smithyClient.expectString,
        DeviceName: smithyClient.expectString,
        IotThingName: smithyClient.expectString,
        LatestHeartbeat: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Models: (_) => de_EdgeModelSummaries(_),
        RegistrationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_DirectDeploySettings = (output, context) => {
    return smithyClient.take(output, {
        Status: smithyClient.expectString,
    });
};
const de_DisableSagemakerServicecatalogPortfolioOutput = (output, context) => {
    return smithyClient.take(output, {});
};
const de_DisassociateTrialComponentResponse = (output, context) => {
    return smithyClient.take(output, {
        TrialArn: smithyClient.expectString,
        TrialComponentArn: smithyClient.expectString,
    });
};
const de_DockerSettings = (output, context) => {
    return smithyClient.take(output, {
        EnableDockerAccess: smithyClient.expectString,
        RootlessDocker: smithyClient.expectString,
        VpcOnlyTrustedAccounts: (_) => de_VpcOnlyTrustedAccounts(_),
    });
};
const de_DomainDetails = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DomainArn: smithyClient.expectString,
        DomainId: smithyClient.expectString,
        DomainName: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: smithyClient.expectString,
        Url: smithyClient.expectString,
    });
};
const de_DomainList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_DomainDetails(entry);
    });
    return retVal;
};
const de_DomainSecurityGroupIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_DomainSettings = (output, context) => {
    return smithyClient.take(output, {
        AmazonQSettings: (_) => de_AmazonQSettings(_),
        DockerSettings: (_) => de_DockerSettings(_),
        ExecutionRoleIdentityConfig: smithyClient.expectString,
        IpAddressType: smithyClient.expectString,
        RStudioServerProDomainSettings: (_) => de_RStudioServerProDomainSettings(_),
        SecurityGroupIds: (_) => de_DomainSecurityGroupIds(_),
        TrustedIdentityPropagationSettings: (_) => de_TrustedIdentityPropagationSettings(_),
        UnifiedStudioSettings: (_) => de_UnifiedStudioSettings(_),
    });
};
const de_DriftCheckBaselines = (output, context) => {
    return smithyClient.take(output, {
        Bias: (_) => de_DriftCheckBias(_),
        Explainability: (_) => de_DriftCheckExplainability(_),
        ModelDataQuality: (_) => de_DriftCheckModelDataQuality(_),
        ModelQuality: (_) => de_DriftCheckModelQuality(_),
    });
};
const de_DriftCheckBias = (output, context) => {
    return smithyClient.take(output, {
        ConfigFile: (_) => de_FileSource(_),
        PostTrainingConstraints: (_) => de_MetricsSource(_),
        PreTrainingConstraints: (_) => de_MetricsSource(_),
    });
};
const de_DriftCheckExplainability = (output, context) => {
    return smithyClient.take(output, {
        ConfigFile: (_) => de_FileSource(_),
        Constraints: (_) => de_MetricsSource(_),
    });
};
const de_DriftCheckModelDataQuality = (output, context) => {
    return smithyClient.take(output, {
        Constraints: (_) => de_MetricsSource(_),
        Statistics: (_) => de_MetricsSource(_),
    });
};
const de_DriftCheckModelQuality = (output, context) => {
    return smithyClient.take(output, {
        Constraints: (_) => de_MetricsSource(_),
        Statistics: (_) => de_MetricsSource(_),
    });
};
const de_DynamicScalingConfiguration = (output, context) => {
    return smithyClient.take(output, {
        MaxCapacity: smithyClient.expectInt32,
        MinCapacity: smithyClient.expectInt32,
        ScaleInCooldown: smithyClient.expectInt32,
        ScaleOutCooldown: smithyClient.expectInt32,
        ScalingPolicies: (_) => de_ScalingPolicies(_),
    });
};
const de_EbsStorageSettings = (output, context) => {
    return smithyClient.take(output, {
        EbsVolumeSizeInGb: smithyClient.expectInt32,
    });
};
const de_Ec2CapacityReservation = (output, context) => {
    return smithyClient.take(output, {
        AvailableInstanceCount: smithyClient.expectInt32,
        Ec2CapacityReservationId: smithyClient.expectString,
        TotalInstanceCount: smithyClient.expectInt32,
        UsedByCurrentEndpoint: smithyClient.expectInt32,
    });
};
const de_Ec2CapacityReservationsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Ec2CapacityReservation(entry);
    });
    return retVal;
};
const de_Edge = (output, context) => {
    return smithyClient.take(output, {
        AssociationType: smithyClient.expectString,
        DestinationArn: smithyClient.expectString,
        SourceArn: smithyClient.expectString,
    });
};
const de_EdgeDeploymentConfig = (output, context) => {
    return smithyClient.take(output, {
        FailureHandlingPolicy: smithyClient.expectString,
    });
};
const de_EdgeDeploymentModelConfig = (output, context) => {
    return smithyClient.take(output, {
        EdgePackagingJobName: smithyClient.expectString,
        ModelHandle: smithyClient.expectString,
    });
};
const de_EdgeDeploymentModelConfigs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EdgeDeploymentModelConfig(entry);
    });
    return retVal;
};
const de_EdgeDeploymentPlanSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EdgeDeploymentPlanSummary(entry);
    });
    return retVal;
};
const de_EdgeDeploymentPlanSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DeviceFleetName: smithyClient.expectString,
        EdgeDeploymentFailed: smithyClient.expectInt32,
        EdgeDeploymentPending: smithyClient.expectInt32,
        EdgeDeploymentPlanArn: smithyClient.expectString,
        EdgeDeploymentPlanName: smithyClient.expectString,
        EdgeDeploymentSuccess: smithyClient.expectInt32,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_EdgeDeploymentStatus = (output, context) => {
    return smithyClient.take(output, {
        EdgeDeploymentFailedInStage: smithyClient.expectInt32,
        EdgeDeploymentPendingInStage: smithyClient.expectInt32,
        EdgeDeploymentStageStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EdgeDeploymentStatusMessage: smithyClient.expectString,
        EdgeDeploymentSuccessInStage: smithyClient.expectInt32,
        StageStatus: smithyClient.expectString,
    });
};
const de_EdgeModel = (output, context) => {
    return smithyClient.take(output, {
        LatestInference: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LatestSampleTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelName: smithyClient.expectString,
        ModelVersion: smithyClient.expectString,
    });
};
const de_EdgeModels = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EdgeModel(entry);
    });
    return retVal;
};
const de_EdgeModelStat = (output, context) => {
    return smithyClient.take(output, {
        ActiveDeviceCount: smithyClient.expectLong,
        ConnectedDeviceCount: smithyClient.expectLong,
        ModelName: smithyClient.expectString,
        ModelVersion: smithyClient.expectString,
        OfflineDeviceCount: smithyClient.expectLong,
        SamplingDeviceCount: smithyClient.expectLong,
    });
};
const de_EdgeModelStats = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EdgeModelStat(entry);
    });
    return retVal;
};
const de_EdgeModelSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EdgeModelSummary(entry);
    });
    return retVal;
};
const de_EdgeModelSummary = (output, context) => {
    return smithyClient.take(output, {
        ModelName: smithyClient.expectString,
        ModelVersion: smithyClient.expectString,
    });
};
const de_EdgeOutputConfig = (output, context) => {
    return smithyClient.take(output, {
        KmsKeyId: smithyClient.expectString,
        PresetDeploymentConfig: smithyClient.expectString,
        PresetDeploymentType: smithyClient.expectString,
        S3OutputLocation: smithyClient.expectString,
    });
};
const de_EdgePackagingJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EdgePackagingJobSummary(entry);
    });
    return retVal;
};
const de_EdgePackagingJobSummary = (output, context) => {
    return smithyClient.take(output, {
        CompilationJobName: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EdgePackagingJobArn: smithyClient.expectString,
        EdgePackagingJobName: smithyClient.expectString,
        EdgePackagingJobStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelName: smithyClient.expectString,
        ModelVersion: smithyClient.expectString,
    });
};
const de_EdgePresetDeploymentOutput = (output, context) => {
    return smithyClient.take(output, {
        Artifact: smithyClient.expectString,
        Status: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        Type: smithyClient.expectString,
    });
};
const de_Edges = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Edge(entry);
    });
    return retVal;
};
const de_EfaEnis = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_EFSFileSystem = (output, context) => {
    return smithyClient.take(output, {
        FileSystemId: smithyClient.expectString,
    });
};
const de_EFSFileSystemConfig = (output, context) => {
    return smithyClient.take(output, {
        FileSystemId: smithyClient.expectString,
        FileSystemPath: smithyClient.expectString,
    });
};
const de_EksRoleAccessEntries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_EmrServerlessComputeConfig = (output, context) => {
    return smithyClient.take(output, {
        ExecutionRoleARN: smithyClient.expectString,
    });
};
const de_EmrServerlessSettings = (output, context) => {
    return smithyClient.take(output, {
        ExecutionRoleArn: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_EmrSettings = (output, context) => {
    return smithyClient.take(output, {
        AssumableRoleArns: (_) => de_AssumableRoleArns(_),
        ExecutionRoleArns: (_) => de_ExecutionRoleArns(_),
    });
};
const de_EMRStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        ClusterId: smithyClient.expectString,
        LogFilePath: smithyClient.expectString,
        StepId: smithyClient.expectString,
        StepName: smithyClient.expectString,
    });
};
const de_EnableSagemakerServicecatalogPortfolioOutput = (output, context) => {
    return smithyClient.take(output, {});
};
const de_Endpoint = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DataCaptureConfig: (_) => de_DataCaptureConfigSummary(_),
        EndpointArn: smithyClient.expectString,
        EndpointConfigName: smithyClient.expectString,
        EndpointName: smithyClient.expectString,
        EndpointStatus: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MonitoringSchedules: (_) => de_MonitoringScheduleList(_),
        ProductionVariants: (_) => de_ProductionVariantSummaryList(_),
        ShadowProductionVariants: (_) => de_ProductionVariantSummaryList(_),
        Tags: (_) => de_TagList(_),
    });
};
const de_EndpointConfigStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
    });
};
const de_EndpointConfigSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndpointConfigArn: smithyClient.expectString,
        EndpointConfigName: smithyClient.expectString,
    });
};
const de_EndpointConfigSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EndpointConfigSummary(entry);
    });
    return retVal;
};
const de_EndpointInfo = (output, context) => {
    return smithyClient.take(output, {
        EndpointName: smithyClient.expectString,
    });
};
const de_EndpointInput = (output, context) => {
    return smithyClient.take(output, {
        EndTimeOffset: smithyClient.expectString,
        EndpointName: smithyClient.expectString,
        ExcludeFeaturesAttribute: smithyClient.expectString,
        FeaturesAttribute: smithyClient.expectString,
        InferenceAttribute: smithyClient.expectString,
        LocalPath: smithyClient.expectString,
        ProbabilityAttribute: smithyClient.expectString,
        ProbabilityThresholdAttribute: smithyClient.limitedParseDouble,
        S3DataDistributionType: smithyClient.expectString,
        S3InputMode: smithyClient.expectString,
        StartTimeOffset: smithyClient.expectString,
    });
};
const de_EndpointInputConfiguration = (output, context) => {
    return smithyClient.take(output, {
        EnvironmentParameterRanges: (_) => de_EnvironmentParameterRanges(_),
        InferenceSpecificationName: smithyClient.expectString,
        InstanceType: smithyClient.expectString,
        ServerlessConfig: (_) => de_ProductionVariantServerlessConfig(_),
    });
};
const de_EndpointInputConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EndpointInputConfiguration(entry);
    });
    return retVal;
};
const de_EndpointMetadata = (output, context) => {
    return smithyClient.take(output, {
        EndpointConfigName: smithyClient.expectString,
        EndpointName: smithyClient.expectString,
        EndpointStatus: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
    });
};
const de_EndpointOutputConfiguration = (output, context) => {
    return smithyClient.take(output, {
        EndpointName: smithyClient.expectString,
        InitialInstanceCount: smithyClient.expectInt32,
        InstanceType: smithyClient.expectString,
        ServerlessConfig: (_) => de_ProductionVariantServerlessConfig(_),
        VariantName: smithyClient.expectString,
    });
};
const de_EndpointPerformance = (output, context) => {
    return smithyClient.take(output, {
        EndpointInfo: (_) => de_EndpointInfo(_),
        Metrics: (_) => de_InferenceMetrics(_),
    });
};
const de_EndpointPerformances = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EndpointPerformance(entry);
    });
    return retVal;
};
const de_Endpoints = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EndpointInfo(entry);
    });
    return retVal;
};
const de_EndpointStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
    });
};
const de_EndpointSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndpointArn: smithyClient.expectString,
        EndpointName: smithyClient.expectString,
        EndpointStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_EndpointSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EndpointSummary(entry);
    });
    return retVal;
};
const de_EnvironmentConfigDetails = (output, context) => {
    return smithyClient.take(output, {
        FSxLustreConfig: (_) => de_FSxLustreConfig(_),
        S3OutputPath: smithyClient.expectString,
    });
};
const de_EnvironmentMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_EnvironmentParameter = (output, context) => {
    return smithyClient.take(output, {
        Key: smithyClient.expectString,
        Value: smithyClient.expectString,
        ValueType: smithyClient.expectString,
    });
};
const de_EnvironmentParameterRanges = (output, context) => {
    return smithyClient.take(output, {
        CategoricalParameterRanges: (_) => de_CategoricalParameters(_),
    });
};
const de_EnvironmentParameters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_EnvironmentParameter(entry);
    });
    return retVal;
};
const de_ErrorInfo = (output, context) => {
    return smithyClient.take(output, {
        Code: smithyClient.expectString,
        Reason: smithyClient.expectString,
    });
};
const de_EventDetails = (output, context) => {
    return smithyClient.take(output, {
        EventMetadata: (_) => de_EventMetadata(core$1.awsExpectUnion(_)),
    });
};
const de_EventMetadata = (output, context) => {
    if (output.Cluster != null) {
        return {
            Cluster: de_ClusterMetadata(output.Cluster),
        };
    }
    if (output.Instance != null) {
        return {
            Instance: de_InstanceMetadata(output.Instance),
        };
    }
    if (output.InstanceGroup != null) {
        return {
            InstanceGroup: de_InstanceGroupMetadata(output.InstanceGroup),
        };
    }
    if (output.InstanceGroupScaling != null) {
        return {
            InstanceGroupScaling: de_InstanceGroupScalingMetadata(output.InstanceGroupScaling),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_ExecutionRoleArns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_Experiment = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        DisplayName: smithyClient.expectString,
        ExperimentArn: smithyClient.expectString,
        ExperimentName: smithyClient.expectString,
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Source: (_) => de_ExperimentSource(_),
        Tags: (_) => de_TagList(_),
    });
};
const de_ExperimentConfig = (output, context) => {
    return smithyClient.take(output, {
        ExperimentName: smithyClient.expectString,
        RunName: smithyClient.expectString,
        TrialComponentDisplayName: smithyClient.expectString,
        TrialName: smithyClient.expectString,
    });
};
const de_ExperimentSource = (output, context) => {
    return smithyClient.take(output, {
        SourceArn: smithyClient.expectString,
        SourceType: smithyClient.expectString,
    });
};
const de_ExperimentSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ExperimentSummary(entry);
    });
    return retVal;
};
const de_ExperimentSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DisplayName: smithyClient.expectString,
        ExperimentArn: smithyClient.expectString,
        ExperimentName: smithyClient.expectString,
        ExperimentSource: (_) => de_ExperimentSource(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_Explainability = (output, context) => {
    return smithyClient.take(output, {
        Report: (_) => de_MetricsSource(_),
    });
};
const de_ExplainerConfig = (output, context) => {
    return smithyClient.take(output, {
        ClarifyExplainerConfig: (_) => de_ClarifyExplainerConfig(_),
    });
};
const de_FailStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        ErrorMessage: smithyClient.expectString,
    });
};
const de_FeatureDefinition = (output, context) => {
    return smithyClient.take(output, {
        CollectionConfig: (_) => de_CollectionConfig(core$1.awsExpectUnion(_)),
        CollectionType: smithyClient.expectString,
        FeatureName: smithyClient.expectString,
        FeatureType: smithyClient.expectString,
    });
};
const de_FeatureDefinitions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FeatureDefinition(entry);
    });
    return retVal;
};
const de_FeatureGroup = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        EventTimeFeatureName: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        FeatureDefinitions: (_) => de_FeatureDefinitions(_),
        FeatureGroupArn: smithyClient.expectString,
        FeatureGroupName: smithyClient.expectString,
        FeatureGroupStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastUpdateStatus: (_) => de_LastUpdateStatus(_),
        OfflineStoreConfig: (_) => de_OfflineStoreConfig(_),
        OfflineStoreStatus: (_) => de_OfflineStoreStatus(_),
        OnlineStoreConfig: (_) => de_OnlineStoreConfig(_),
        RecordIdentifierFeatureName: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        Tags: (_) => de_TagList(_),
    });
};
const de_FeatureGroupSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FeatureGroupSummary(entry);
    });
    return retVal;
};
const de_FeatureGroupSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FeatureGroupArn: smithyClient.expectString,
        FeatureGroupName: smithyClient.expectString,
        FeatureGroupStatus: smithyClient.expectString,
        OfflineStoreStatus: (_) => de_OfflineStoreStatus(_),
    });
};
const de_FeatureMetadata = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        FeatureGroupArn: smithyClient.expectString,
        FeatureGroupName: smithyClient.expectString,
        FeatureName: smithyClient.expectString,
        FeatureType: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Parameters: (_) => de_FeatureParameters(_),
    });
};
const de_FeatureParameter = (output, context) => {
    return smithyClient.take(output, {
        Key: smithyClient.expectString,
        Value: smithyClient.expectString,
    });
};
const de_FeatureParameters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FeatureParameter(entry);
    });
    return retVal;
};
const de_FileSource = (output, context) => {
    return smithyClient.take(output, {
        ContentDigest: smithyClient.expectString,
        ContentType: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_FileSystemConfig = (output, context) => {
    return smithyClient.take(output, {
        DefaultGid: smithyClient.expectInt32,
        DefaultUid: smithyClient.expectInt32,
        MountPath: smithyClient.expectString,
    });
};
const de_FileSystemDataSource = (output, context) => {
    return smithyClient.take(output, {
        DirectoryPath: smithyClient.expectString,
        FileSystemAccessMode: smithyClient.expectString,
        FileSystemId: smithyClient.expectString,
        FileSystemType: smithyClient.expectString,
    });
};
const de_FillingTransformationMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_FillingTransformations = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_FillingTransformationMap(value);
        return acc;
    }, {});
};
const de_FinalAutoMLJobObjectiveMetric = (output, context) => {
    return smithyClient.take(output, {
        MetricName: smithyClient.expectString,
        StandardMetricName: smithyClient.expectString,
        Type: smithyClient.expectString,
        Value: smithyClient.limitedParseFloat32,
    });
};
const de_FinalHyperParameterTuningJobObjectiveMetric = (output, context) => {
    return smithyClient.take(output, {
        MetricName: smithyClient.expectString,
        Type: smithyClient.expectString,
        Value: smithyClient.limitedParseFloat32,
    });
};
const de_FinalMetricDataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricData(entry);
    });
    return retVal;
};
const de_FlowDefinitionOutputConfig = (output, context) => {
    return smithyClient.take(output, {
        KmsKeyId: smithyClient.expectString,
        S3OutputPath: smithyClient.expectString,
    });
};
const de_FlowDefinitionSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_FlowDefinitionSummary(entry);
    });
    return retVal;
};
const de_FlowDefinitionSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        FlowDefinitionArn: smithyClient.expectString,
        FlowDefinitionName: smithyClient.expectString,
        FlowDefinitionStatus: smithyClient.expectString,
    });
};
const de_FlowDefinitionTaskKeywords = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ForecastQuantiles = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_FSxLustreConfig = (output, context) => {
    return smithyClient.take(output, {
        PerUnitStorageThroughput: smithyClient.expectInt32,
        SizeInGiB: smithyClient.expectInt32,
    });
};
const de_FSxLustreFileSystem = (output, context) => {
    return smithyClient.take(output, {
        FileSystemId: smithyClient.expectString,
    });
};
const de_FSxLustreFileSystemConfig = (output, context) => {
    return smithyClient.take(output, {
        FileSystemId: smithyClient.expectString,
        FileSystemPath: smithyClient.expectString,
    });
};
const de_GenerativeAiSettings = (output, context) => {
    return smithyClient.take(output, {
        AmazonBedrockRoleArn: smithyClient.expectString,
    });
};
const de_GetDeviceFleetReportResponse = (output, context) => {
    return smithyClient.take(output, {
        AgentVersions: (_) => de_AgentVersions(_),
        Description: smithyClient.expectString,
        DeviceFleetArn: smithyClient.expectString,
        DeviceFleetName: smithyClient.expectString,
        DeviceStats: (_) => de_DeviceStats(_),
        ModelStats: (_) => de_EdgeModelStats(_),
        OutputConfig: (_) => de_EdgeOutputConfig(_),
        ReportGenerated: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_GetLineageGroupPolicyResponse = (output, context) => {
    return smithyClient.take(output, {
        LineageGroupArn: smithyClient.expectString,
        ResourcePolicy: smithyClient.expectString,
    });
};
const de_GetModelPackageGroupPolicyOutput = (output, context) => {
    return smithyClient.take(output, {
        ResourcePolicy: smithyClient.expectString,
    });
};
const de_GetSagemakerServicecatalogPortfolioStatusOutput = (output, context) => {
    return smithyClient.take(output, {
        Status: smithyClient.expectString,
    });
};
const de_GetScalingConfigurationRecommendationResponse = (output, context) => {
    return smithyClient.take(output, {
        DynamicScalingConfiguration: (_) => de_DynamicScalingConfiguration(_),
        EndpointName: smithyClient.expectString,
        InferenceRecommendationsJobName: smithyClient.expectString,
        Metric: (_) => de_ScalingPolicyMetric(_),
        RecommendationId: smithyClient.expectString,
        ScalingPolicyObjective: (_) => de_ScalingPolicyObjective(_),
        TargetCpuUtilizationPerCore: smithyClient.expectInt32,
    });
};
const de_GetSearchSuggestionsResponse = (output, context) => {
    return smithyClient.take(output, {
        PropertyNameSuggestions: (_) => de_PropertyNameSuggestionList(_),
    });
};
const de_GitConfig = (output, context) => {
    return smithyClient.take(output, {
        Branch: smithyClient.expectString,
        RepositoryUrl: smithyClient.expectString,
        SecretArn: smithyClient.expectString,
    });
};
const de_GroupingAttributeNames = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_Groups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_HiddenAppTypesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_HiddenInstanceTypesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_HiddenMlToolsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_HiddenSageMakerImage = (output, context) => {
    return smithyClient.take(output, {
        SageMakerImageName: smithyClient.expectString,
        VersionAliases: (_) => de_VersionAliasesList(_),
    });
};
const de_HiddenSageMakerImageVersionAliasesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HiddenSageMakerImage(entry);
    });
    return retVal;
};
const de_HolidayConfig = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HolidayConfigAttributes(entry);
    });
    return retVal;
};
const de_HolidayConfigAttributes = (output, context) => {
    return smithyClient.take(output, {
        CountryCode: smithyClient.expectString,
    });
};
const de_HookParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_HubAccessConfig = (output, context) => {
    return smithyClient.take(output, {
        HubContentArn: smithyClient.expectString,
    });
};
const de_HubContentDependency = (output, context) => {
    return smithyClient.take(output, {
        DependencyCopyPath: smithyClient.expectString,
        DependencyOriginPath: smithyClient.expectString,
    });
};
const de_HubContentDependencyList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HubContentDependency(entry);
    });
    return retVal;
};
const de_HubContentInfo = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DocumentSchemaVersion: smithyClient.expectString,
        HubContentArn: smithyClient.expectString,
        HubContentDescription: smithyClient.expectString,
        HubContentDisplayName: smithyClient.expectString,
        HubContentName: smithyClient.expectString,
        HubContentSearchKeywords: (_) => de_HubContentSearchKeywordList(_),
        HubContentStatus: smithyClient.expectString,
        HubContentType: smithyClient.expectString,
        HubContentVersion: smithyClient.expectString,
        OriginalCreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        SageMakerPublicHubContentArn: smithyClient.expectString,
        SupportStatus: smithyClient.expectString,
    });
};
const de_HubContentInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HubContentInfo(entry);
    });
    return retVal;
};
const de_HubContentSearchKeywordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_HubInfo = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        HubArn: smithyClient.expectString,
        HubDescription: smithyClient.expectString,
        HubDisplayName: smithyClient.expectString,
        HubName: smithyClient.expectString,
        HubSearchKeywords: (_) => de_HubSearchKeywordList(_),
        HubStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_HubInfoList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HubInfo(entry);
    });
    return retVal;
};
const de_HubS3StorageConfig = (output, context) => {
    return smithyClient.take(output, {
        S3OutputPath: smithyClient.expectString,
    });
};
const de_HubSearchKeywordList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_HumanLoopActivationConditionsConfig = (output, context) => {
    return smithyClient.take(output, {
        HumanLoopActivationConditions: smithyClient.LazyJsonString.from,
    });
};
const de_HumanLoopActivationConfig = (output, context) => {
    return smithyClient.take(output, {
        HumanLoopActivationConditionsConfig: (_) => de_HumanLoopActivationConditionsConfig(_),
    });
};
const de_HumanLoopConfig = (output, context) => {
    return smithyClient.take(output, {
        HumanTaskUiArn: smithyClient.expectString,
        PublicWorkforceTaskPrice: (_) => de_PublicWorkforceTaskPrice(_),
        TaskAvailabilityLifetimeInSeconds: smithyClient.expectInt32,
        TaskCount: smithyClient.expectInt32,
        TaskDescription: smithyClient.expectString,
        TaskKeywords: (_) => de_FlowDefinitionTaskKeywords(_),
        TaskTimeLimitInSeconds: smithyClient.expectInt32,
        TaskTitle: smithyClient.expectString,
        WorkteamArn: smithyClient.expectString,
    });
};
const de_HumanLoopRequestSource = (output, context) => {
    return smithyClient.take(output, {
        AwsManagedHumanLoopRequestSource: smithyClient.expectString,
    });
};
const de_HumanTaskConfig = (output, context) => {
    return smithyClient.take(output, {
        AnnotationConsolidationConfig: (_) => de_AnnotationConsolidationConfig(_),
        MaxConcurrentTaskCount: smithyClient.expectInt32,
        NumberOfHumanWorkersPerDataObject: smithyClient.expectInt32,
        PreHumanTaskLambdaArn: smithyClient.expectString,
        PublicWorkforceTaskPrice: (_) => de_PublicWorkforceTaskPrice(_),
        TaskAvailabilityLifetimeInSeconds: smithyClient.expectInt32,
        TaskDescription: smithyClient.expectString,
        TaskKeywords: (_) => de_TaskKeywords(_),
        TaskTimeLimitInSeconds: smithyClient.expectInt32,
        TaskTitle: smithyClient.expectString,
        UiConfig: (_) => de_UiConfig(_),
        WorkteamArn: smithyClient.expectString,
    });
};
const de_HumanTaskUiSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HumanTaskUiSummary(entry);
    });
    return retVal;
};
const de_HumanTaskUiSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        HumanTaskUiArn: smithyClient.expectString,
        HumanTaskUiName: smithyClient.expectString,
    });
};
const de_HyperbandStrategyConfig = (output, context) => {
    return smithyClient.take(output, {
        MaxResource: smithyClient.expectInt32,
        MinResource: smithyClient.expectInt32,
    });
};
const de_HyperParameterAlgorithmSpecification = (output, context) => {
    return smithyClient.take(output, {
        AlgorithmName: smithyClient.expectString,
        MetricDefinitions: (_) => de_MetricDefinitionList(_),
        TrainingImage: smithyClient.expectString,
        TrainingInputMode: smithyClient.expectString,
    });
};
const de_HyperParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_HyperParameterSpecification = (output, context) => {
    return smithyClient.take(output, {
        DefaultValue: smithyClient.expectString,
        Description: smithyClient.expectString,
        IsRequired: smithyClient.expectBoolean,
        IsTunable: smithyClient.expectBoolean,
        Name: smithyClient.expectString,
        Range: (_) => de_ParameterRange(_),
        Type: smithyClient.expectString,
    });
};
const de_HyperParameterSpecifications = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HyperParameterSpecification(entry);
    });
    return retVal;
};
const de_HyperParameterTrainingJobDefinition = (output, context) => {
    return smithyClient.take(output, {
        AlgorithmSpecification: (_) => de_HyperParameterAlgorithmSpecification(_),
        CheckpointConfig: (_) => de_CheckpointConfig(_),
        DefinitionName: smithyClient.expectString,
        EnableInterContainerTrafficEncryption: smithyClient.expectBoolean,
        EnableManagedSpotTraining: smithyClient.expectBoolean,
        EnableNetworkIsolation: smithyClient.expectBoolean,
        Environment: (_) => de_HyperParameterTrainingJobEnvironmentMap(_),
        HyperParameterRanges: (_) => de_ParameterRanges(_),
        HyperParameterTuningResourceConfig: (_) => de_HyperParameterTuningResourceConfig(_),
        InputDataConfig: (_) => de_InputDataConfig(_),
        OutputDataConfig: (_) => de_OutputDataConfig(_),
        ResourceConfig: (_) => de_ResourceConfig(_),
        RetryStrategy: (_) => de_RetryStrategy(_),
        RoleArn: smithyClient.expectString,
        StaticHyperParameters: (_) => de_HyperParameters(_),
        StoppingCondition: (_) => de_StoppingCondition(_),
        TuningObjective: (_) => de_HyperParameterTuningJobObjective(_),
        VpcConfig: (_) => de_VpcConfig(_),
    });
};
const de_HyperParameterTrainingJobDefinitions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HyperParameterTrainingJobDefinition(entry);
    });
    return retVal;
};
const de_HyperParameterTrainingJobEnvironmentMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_HyperParameterTrainingJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HyperParameterTrainingJobSummary(entry);
    });
    return retVal;
};
const de_HyperParameterTrainingJobSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        FinalHyperParameterTuningJobObjectiveMetric: (_) => de_FinalHyperParameterTuningJobObjectiveMetric(_),
        ObjectiveStatus: smithyClient.expectString,
        TrainingEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TrainingJobArn: smithyClient.expectString,
        TrainingJobDefinitionName: smithyClient.expectString,
        TrainingJobName: smithyClient.expectString,
        TrainingJobStatus: smithyClient.expectString,
        TrainingStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TunedHyperParameters: (_) => de_HyperParameters(_),
        TuningJobName: smithyClient.expectString,
    });
};
const de_HyperParameterTuningInstanceConfig = (output, context) => {
    return smithyClient.take(output, {
        InstanceCount: smithyClient.expectInt32,
        InstanceType: smithyClient.expectString,
        VolumeSizeInGB: smithyClient.expectInt32,
    });
};
const de_HyperParameterTuningInstanceConfigs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HyperParameterTuningInstanceConfig(entry);
    });
    return retVal;
};
const de_HyperParameterTuningJobCompletionDetails = (output, context) => {
    return smithyClient.take(output, {
        ConvergenceDetectedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        NumberOfTrainingJobsObjectiveNotImproving: smithyClient.expectInt32,
    });
};
const de_HyperParameterTuningJobConfig = (output, context) => {
    return smithyClient.take(output, {
        HyperParameterTuningJobObjective: (_) => de_HyperParameterTuningJobObjective(_),
        ParameterRanges: (_) => de_ParameterRanges(_),
        RandomSeed: smithyClient.expectInt32,
        ResourceLimits: (_) => de_ResourceLimits(_),
        Strategy: smithyClient.expectString,
        StrategyConfig: (_) => de_HyperParameterTuningJobStrategyConfig(_),
        TrainingJobEarlyStoppingType: smithyClient.expectString,
        TuningJobCompletionCriteria: (_) => de_TuningJobCompletionCriteria(_),
    });
};
const de_HyperParameterTuningJobConsumedResources = (output, context) => {
    return smithyClient.take(output, {
        RuntimeInSeconds: smithyClient.expectInt32,
    });
};
const de_HyperParameterTuningJobObjective = (output, context) => {
    return smithyClient.take(output, {
        MetricName: smithyClient.expectString,
        Type: smithyClient.expectString,
    });
};
const de_HyperParameterTuningJobObjectives = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HyperParameterTuningJobObjective(entry);
    });
    return retVal;
};
const de_HyperParameterTuningJobSearchEntity = (output, context) => {
    return smithyClient.take(output, {
        BestTrainingJob: (_) => de_HyperParameterTrainingJobSummary(_),
        ConsumedResources: (_) => de_HyperParameterTuningJobConsumedResources(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        HyperParameterTuningEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        HyperParameterTuningJobArn: smithyClient.expectString,
        HyperParameterTuningJobConfig: (_) => de_HyperParameterTuningJobConfig(_),
        HyperParameterTuningJobName: smithyClient.expectString,
        HyperParameterTuningJobStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ObjectiveStatusCounters: (_) => de_ObjectiveStatusCounters(_),
        OverallBestTrainingJob: (_) => de_HyperParameterTrainingJobSummary(_),
        Tags: (_) => de_TagList(_),
        TrainingJobDefinition: (_) => de_HyperParameterTrainingJobDefinition(_),
        TrainingJobDefinitions: (_) => de_HyperParameterTrainingJobDefinitions(_),
        TrainingJobStatusCounters: (_) => de_TrainingJobStatusCounters(_),
        TuningJobCompletionDetails: (_) => de_HyperParameterTuningJobCompletionDetails(_),
        WarmStartConfig: (_) => de_HyperParameterTuningJobWarmStartConfig(_),
    });
};
const de_HyperParameterTuningJobStrategyConfig = (output, context) => {
    return smithyClient.take(output, {
        HyperbandStrategyConfig: (_) => de_HyperbandStrategyConfig(_),
    });
};
const de_HyperParameterTuningJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_HyperParameterTuningJobSummary(entry);
    });
    return retVal;
};
const de_HyperParameterTuningJobSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        HyperParameterTuningEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        HyperParameterTuningJobArn: smithyClient.expectString,
        HyperParameterTuningJobName: smithyClient.expectString,
        HyperParameterTuningJobStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ObjectiveStatusCounters: (_) => de_ObjectiveStatusCounters(_),
        ResourceLimits: (_) => de_ResourceLimits(_),
        Strategy: smithyClient.expectString,
        TrainingJobStatusCounters: (_) => de_TrainingJobStatusCounters(_),
    });
};
const de_HyperParameterTuningJobWarmStartConfig = (output, context) => {
    return smithyClient.take(output, {
        ParentHyperParameterTuningJobs: (_) => de_ParentHyperParameterTuningJobs(_),
        WarmStartType: smithyClient.expectString,
    });
};
const de_HyperParameterTuningResourceConfig = (output, context) => {
    return smithyClient.take(output, {
        AllocationStrategy: smithyClient.expectString,
        InstanceConfigs: (_) => de_HyperParameterTuningInstanceConfigs(_),
        InstanceCount: smithyClient.expectInt32,
        InstanceType: smithyClient.expectString,
        VolumeKmsKeyId: smithyClient.expectString,
        VolumeSizeInGB: smithyClient.expectInt32,
    });
};
const de_IamIdentity = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        PrincipalId: smithyClient.expectString,
        SourceIdentity: smithyClient.expectString,
    });
};
const de_IamPolicyConstraints = (output, context) => {
    return smithyClient.take(output, {
        SourceIp: smithyClient.expectString,
        VpcSourceIp: smithyClient.expectString,
    });
};
const de_IdentityProviderOAuthSetting = (output, context) => {
    return smithyClient.take(output, {
        DataSourceName: smithyClient.expectString,
        SecretArn: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_IdentityProviderOAuthSettings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IdentityProviderOAuthSetting(entry);
    });
    return retVal;
};
const de_IdleSettings = (output, context) => {
    return smithyClient.take(output, {
        IdleTimeoutInMinutes: smithyClient.expectInt32,
        LifecycleManagement: smithyClient.expectString,
        MaxIdleTimeoutInMinutes: smithyClient.expectInt32,
        MinIdleTimeoutInMinutes: smithyClient.expectInt32,
    });
};
const de_Image = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        DisplayName: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        ImageArn: smithyClient.expectString,
        ImageName: smithyClient.expectString,
        ImageStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_ImageClassificationJobConfig = (output, context) => {
    return smithyClient.take(output, {
        CompletionCriteria: (_) => de_AutoMLJobCompletionCriteria(_),
    });
};
const de_ImageConfig = (output, context) => {
    return smithyClient.take(output, {
        RepositoryAccessMode: smithyClient.expectString,
        RepositoryAuthConfig: (_) => de_RepositoryAuthConfig(_),
    });
};
const de_Images = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Image(entry);
    });
    return retVal;
};
const de_ImageVersion = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        ImageArn: smithyClient.expectString,
        ImageVersionArn: smithyClient.expectString,
        ImageVersionStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Version: smithyClient.expectInt32,
    });
};
const de_ImageVersions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ImageVersion(entry);
    });
    return retVal;
};
const de_ImportHubContentResponse = (output, context) => {
    return smithyClient.take(output, {
        HubArn: smithyClient.expectString,
        HubContentArn: smithyClient.expectString,
    });
};
const de_InferenceComponentCapacitySize = (output, context) => {
    return smithyClient.take(output, {
        Type: smithyClient.expectString,
        Value: smithyClient.expectInt32,
    });
};
const de_InferenceComponentComputeResourceRequirements = (output, context) => {
    return smithyClient.take(output, {
        MaxMemoryRequiredInMb: smithyClient.expectInt32,
        MinMemoryRequiredInMb: smithyClient.expectInt32,
        NumberOfAcceleratorDevicesRequired: smithyClient.limitedParseFloat32,
        NumberOfCpuCoresRequired: smithyClient.limitedParseFloat32,
    });
};
const de_InferenceComponentContainerSpecificationSummary = (output, context) => {
    return smithyClient.take(output, {
        ArtifactUrl: smithyClient.expectString,
        DeployedImage: (_) => de_DeployedImage(_),
        Environment: (_) => de_EnvironmentMap(_),
    });
};
const de_InferenceComponentDeploymentConfig = (output, context) => {
    return smithyClient.take(output, {
        AutoRollbackConfiguration: (_) => de_AutoRollbackConfig(_),
        RollingUpdatePolicy: (_) => de_InferenceComponentRollingUpdatePolicy(_),
    });
};
const de_InferenceComponentRollingUpdatePolicy = (output, context) => {
    return smithyClient.take(output, {
        MaximumBatchSize: (_) => de_InferenceComponentCapacitySize(_),
        MaximumExecutionTimeoutInSeconds: smithyClient.expectInt32,
        RollbackMaximumBatchSize: (_) => de_InferenceComponentCapacitySize(_),
        WaitIntervalInSeconds: smithyClient.expectInt32,
    });
};
const de_InferenceComponentRuntimeConfigSummary = (output, context) => {
    return smithyClient.take(output, {
        CurrentCopyCount: smithyClient.expectInt32,
        DesiredCopyCount: smithyClient.expectInt32,
    });
};
const de_InferenceComponentSpecificationSummary = (output, context) => {
    return smithyClient.take(output, {
        BaseInferenceComponentName: smithyClient.expectString,
        ComputeResourceRequirements: (_) => de_InferenceComponentComputeResourceRequirements(_),
        Container: (_) => de_InferenceComponentContainerSpecificationSummary(_),
        ModelName: smithyClient.expectString,
        StartupParameters: (_) => de_InferenceComponentStartupParameters(_),
    });
};
const de_InferenceComponentStartupParameters = (output, context) => {
    return smithyClient.take(output, {
        ContainerStartupHealthCheckTimeoutInSeconds: smithyClient.expectInt32,
        ModelDataDownloadTimeoutInSeconds: smithyClient.expectInt32,
    });
};
const de_InferenceComponentSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndpointArn: smithyClient.expectString,
        EndpointName: smithyClient.expectString,
        InferenceComponentArn: smithyClient.expectString,
        InferenceComponentName: smithyClient.expectString,
        InferenceComponentStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        VariantName: smithyClient.expectString,
    });
};
const de_InferenceComponentSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceComponentSummary(entry);
    });
    return retVal;
};
const de_InferenceExecutionConfig = (output, context) => {
    return smithyClient.take(output, {
        Mode: smithyClient.expectString,
    });
};
const de_InferenceExperimentDataStorageConfig = (output, context) => {
    return smithyClient.take(output, {
        ContentType: (_) => de_CaptureContentTypeHeader(_),
        Destination: smithyClient.expectString,
        KmsKey: smithyClient.expectString,
    });
};
const de_InferenceExperimentList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceExperimentSummary(entry);
    });
    return retVal;
};
const de_InferenceExperimentSchedule = (output, context) => {
    return smithyClient.take(output, {
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_InferenceExperimentSummary = (output, context) => {
    return smithyClient.take(output, {
        CompletionTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        Schedule: (_) => de_InferenceExperimentSchedule(_),
        Status: smithyClient.expectString,
        StatusReason: smithyClient.expectString,
        Type: smithyClient.expectString,
    });
};
const de_InferenceHubAccessConfig = (output, context) => {
    return smithyClient.take(output, {
        HubContentArn: smithyClient.expectString,
    });
};
const de_InferenceMetrics = (output, context) => {
    return smithyClient.take(output, {
        MaxInvocations: smithyClient.expectInt32,
        ModelLatency: smithyClient.expectInt32,
    });
};
const de_InferenceRecommendation = (output, context) => {
    return smithyClient.take(output, {
        EndpointConfiguration: (_) => de_EndpointOutputConfiguration(_),
        InvocationEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InvocationStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Metrics: (_) => de_RecommendationMetrics(_),
        ModelConfiguration: (_) => de_ModelConfiguration(_),
        RecommendationId: smithyClient.expectString,
    });
};
const de_InferenceRecommendations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceRecommendation(entry);
    });
    return retVal;
};
const de_InferenceRecommendationsJob = (output, context) => {
    return smithyClient.take(output, {
        CompletionTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        JobArn: smithyClient.expectString,
        JobDescription: smithyClient.expectString,
        JobName: smithyClient.expectString,
        JobType: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelName: smithyClient.expectString,
        ModelPackageVersionArn: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        SamplePayloadUrl: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_InferenceRecommendationsJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceRecommendationsJob(entry);
    });
    return retVal;
};
const de_InferenceRecommendationsJobStep = (output, context) => {
    return smithyClient.take(output, {
        InferenceBenchmark: (_) => de_RecommendationJobInferenceBenchmark(_),
        JobName: smithyClient.expectString,
        Status: smithyClient.expectString,
        StepType: smithyClient.expectString,
    });
};
const de_InferenceRecommendationsJobSteps = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InferenceRecommendationsJobStep(entry);
    });
    return retVal;
};
const de_InferenceSpecification = (output, context) => {
    return smithyClient.take(output, {
        Containers: (_) => de_ModelPackageContainerDefinitionList(_),
        SupportedContentTypes: (_) => de_ContentTypes(_),
        SupportedRealtimeInferenceInstanceTypes: (_) => de_RealtimeInferenceInstanceTypes(_),
        SupportedResponseMIMETypes: (_) => de_ResponseMIMETypes(_),
        SupportedTransformInstanceTypes: (_) => de_TransformInstanceTypes(_),
    });
};
const de_InfraCheckConfig = (output, context) => {
    return smithyClient.take(output, {
        EnableInfraCheck: smithyClient.expectBoolean,
    });
};
const de_InputConfig = (output, context) => {
    return smithyClient.take(output, {
        DataInputConfig: smithyClient.expectString,
        Framework: smithyClient.expectString,
        FrameworkVersion: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_InputDataConfig = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Channel(entry);
    });
    return retVal;
};
const de_InputModes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_InstanceGroup = (output, context) => {
    return smithyClient.take(output, {
        InstanceCount: smithyClient.expectInt32,
        InstanceGroupName: smithyClient.expectString,
        InstanceType: smithyClient.expectString,
    });
};
const de_InstanceGroupMetadata = (output, context) => {
    return smithyClient.take(output, {
        AmiOverride: smithyClient.expectString,
        AvailabilityZoneId: smithyClient.expectString,
        CapacityReservation: (_) => de_CapacityReservation(_),
        FailureMessage: smithyClient.expectString,
        SecurityGroupIds: (_) => de_SecurityGroupIds(_),
        SubnetId: smithyClient.expectString,
    });
};
const de_InstanceGroupNames = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_InstanceGroups = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_InstanceGroup(entry);
    });
    return retVal;
};
const de_InstanceGroupScalingMetadata = (output, context) => {
    return smithyClient.take(output, {
        FailureMessage: smithyClient.expectString,
        InstanceCount: smithyClient.expectInt32,
        TargetCount: smithyClient.expectInt32,
    });
};
const de_InstanceMetadata = (output, context) => {
    return smithyClient.take(output, {
        AdditionalEnis: (_) => de_AdditionalEnis(_),
        CapacityReservation: (_) => de_CapacityReservation(_),
        CustomerEni: smithyClient.expectString,
        FailureMessage: smithyClient.expectString,
        LcsExecutionState: smithyClient.expectString,
        NodeLogicalId: smithyClient.expectString,
    });
};
const de_InstanceMetadataServiceConfiguration = (output, context) => {
    return smithyClient.take(output, {
        MinimumInstanceMetadataServiceVersion: smithyClient.expectString,
    });
};
const de_InstancePlacementConfig = (output, context) => {
    return smithyClient.take(output, {
        EnableMultipleJobs: smithyClient.expectBoolean,
        PlacementSpecifications: (_) => de_PlacementSpecifications(_),
    });
};
const de_IntegerParameterRange = (output, context) => {
    return smithyClient.take(output, {
        MaxValue: smithyClient.expectString,
        MinValue: smithyClient.expectString,
        Name: smithyClient.expectString,
        ScalingType: smithyClient.expectString,
    });
};
const de_IntegerParameterRanges = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_IntegerParameterRange(entry);
    });
    return retVal;
};
const de_IntegerParameterRangeSpecification = (output, context) => {
    return smithyClient.take(output, {
        MaxValue: smithyClient.expectString,
        MinValue: smithyClient.expectString,
    });
};
const de_JsonContentTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_JupyterLabAppImageConfig = (output, context) => {
    return smithyClient.take(output, {
        ContainerConfig: (_) => de_ContainerConfig(_),
        FileSystemConfig: (_) => de_FileSystemConfig(_),
    });
};
const de_JupyterLabAppSettings = (output, context) => {
    return smithyClient.take(output, {
        AppLifecycleManagement: (_) => de_AppLifecycleManagement(_),
        BuiltInLifecycleConfigArn: smithyClient.expectString,
        CodeRepositories: (_) => de_CodeRepositories(_),
        CustomImages: (_) => de_CustomImages(_),
        DefaultResourceSpec: (_) => de_ResourceSpec(_),
        EmrSettings: (_) => de_EmrSettings(_),
        LifecycleConfigArns: (_) => de_LifecycleConfigArns(_),
    });
};
const de_JupyterServerAppSettings = (output, context) => {
    return smithyClient.take(output, {
        CodeRepositories: (_) => de_CodeRepositories(_),
        DefaultResourceSpec: (_) => de_ResourceSpec(_),
        LifecycleConfigArns: (_) => de_LifecycleConfigArns(_),
    });
};
const de_KendraSettings = (output, context) => {
    return smithyClient.take(output, {
        Status: smithyClient.expectString,
    });
};
const de_KernelGatewayAppSettings = (output, context) => {
    return smithyClient.take(output, {
        CustomImages: (_) => de_CustomImages(_),
        DefaultResourceSpec: (_) => de_ResourceSpec(_),
        LifecycleConfigArns: (_) => de_LifecycleConfigArns(_),
    });
};
const de_KernelGatewayImageConfig = (output, context) => {
    return smithyClient.take(output, {
        FileSystemConfig: (_) => de_FileSystemConfig(_),
        KernelSpecs: (_) => de_KernelSpecs(_),
    });
};
const de_KernelSpec = (output, context) => {
    return smithyClient.take(output, {
        DisplayName: smithyClient.expectString,
        Name: smithyClient.expectString,
    });
};
const de_KernelSpecs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_KernelSpec(entry);
    });
    return retVal;
};
const de_LabelCounters = (output, context) => {
    return smithyClient.take(output, {
        FailedNonRetryableError: smithyClient.expectInt32,
        HumanLabeled: smithyClient.expectInt32,
        MachineLabeled: smithyClient.expectInt32,
        TotalLabeled: smithyClient.expectInt32,
        Unlabeled: smithyClient.expectInt32,
    });
};
const de_LabelCountersForWorkteam = (output, context) => {
    return smithyClient.take(output, {
        HumanLabeled: smithyClient.expectInt32,
        PendingHuman: smithyClient.expectInt32,
        Total: smithyClient.expectInt32,
    });
};
const de_LabelingJobAlgorithmsConfig = (output, context) => {
    return smithyClient.take(output, {
        InitialActiveLearningModelArn: smithyClient.expectString,
        LabelingJobAlgorithmSpecificationArn: smithyClient.expectString,
        LabelingJobResourceConfig: (_) => de_LabelingJobResourceConfig(_),
    });
};
const de_LabelingJobDataAttributes = (output, context) => {
    return smithyClient.take(output, {
        ContentClassifiers: (_) => de_ContentClassifiers(_),
    });
};
const de_LabelingJobDataSource = (output, context) => {
    return smithyClient.take(output, {
        S3DataSource: (_) => de_LabelingJobS3DataSource(_),
        SnsDataSource: (_) => de_LabelingJobSnsDataSource(_),
    });
};
const de_LabelingJobForWorkteamSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        JobReferenceCode: smithyClient.expectString,
        LabelCounters: (_) => de_LabelCountersForWorkteam(_),
        LabelingJobName: smithyClient.expectString,
        NumberOfHumanWorkersPerDataObject: smithyClient.expectInt32,
        WorkRequesterAccountId: smithyClient.expectString,
    });
};
const de_LabelingJobForWorkteamSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LabelingJobForWorkteamSummary(entry);
    });
    return retVal;
};
const de_LabelingJobInputConfig = (output, context) => {
    return smithyClient.take(output, {
        DataAttributes: (_) => de_LabelingJobDataAttributes(_),
        DataSource: (_) => de_LabelingJobDataSource(_),
    });
};
const de_LabelingJobOutput = (output, context) => {
    return smithyClient.take(output, {
        FinalActiveLearningModelArn: smithyClient.expectString,
        OutputDatasetS3Uri: smithyClient.expectString,
    });
};
const de_LabelingJobOutputConfig = (output, context) => {
    return smithyClient.take(output, {
        KmsKeyId: smithyClient.expectString,
        S3OutputPath: smithyClient.expectString,
        SnsTopicArn: smithyClient.expectString,
    });
};
const de_LabelingJobResourceConfig = (output, context) => {
    return smithyClient.take(output, {
        VolumeKmsKeyId: smithyClient.expectString,
        VpcConfig: (_) => de_VpcConfig(_),
    });
};
const de_LabelingJobS3DataSource = (output, context) => {
    return smithyClient.take(output, {
        ManifestS3Uri: smithyClient.expectString,
    });
};
const de_LabelingJobSnsDataSource = (output, context) => {
    return smithyClient.take(output, {
        SnsTopicArn: smithyClient.expectString,
    });
};
const de_LabelingJobStoppingConditions = (output, context) => {
    return smithyClient.take(output, {
        MaxHumanLabeledObjectCount: smithyClient.expectInt32,
        MaxPercentageOfInputDatasetLabeled: smithyClient.expectInt32,
    });
};
const de_LabelingJobSummary = (output, context) => {
    return smithyClient.take(output, {
        AnnotationConsolidationLambdaArn: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        InputConfig: (_) => de_LabelingJobInputConfig(_),
        LabelCounters: (_) => de_LabelCounters(_),
        LabelingJobArn: smithyClient.expectString,
        LabelingJobName: smithyClient.expectString,
        LabelingJobOutput: (_) => de_LabelingJobOutput(_),
        LabelingJobStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        PreHumanTaskLambdaArn: smithyClient.expectString,
        WorkteamArn: smithyClient.expectString,
    });
};
const de_LabelingJobSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LabelingJobSummary(entry);
    });
    return retVal;
};
const de_LambdaStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        OutputParameters: (_) => de_OutputParameterList(_),
    });
};
const de_LastUpdateStatus = (output, context) => {
    return smithyClient.take(output, {
        FailureReason: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_LifecycleConfigArns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_LineageEntityParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_LineageGroupSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_LineageGroupSummary(entry);
    });
    return retVal;
};
const de_LineageGroupSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DisplayName: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LineageGroupArn: smithyClient.expectString,
        LineageGroupName: smithyClient.expectString,
    });
};
const de_ListActionsResponse = (output, context) => {
    return smithyClient.take(output, {
        ActionSummaries: (_) => de_ActionSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListAlgorithmsOutput = (output, context) => {
    return smithyClient.take(output, {
        AlgorithmSummaryList: (_) => de_AlgorithmSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListAliasesResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        SageMakerImageVersionAliases: (_) => de_SageMakerImageVersionAliases(_),
    });
};
const de_ListAppImageConfigsResponse = (output, context) => {
    return smithyClient.take(output, {
        AppImageConfigs: (_) => de_AppImageConfigList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListAppsResponse = (output, context) => {
    return smithyClient.take(output, {
        Apps: (_) => de_AppList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListArtifactsResponse = (output, context) => {
    return smithyClient.take(output, {
        ArtifactSummaries: (_) => de_ArtifactSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListAssociationsResponse = (output, context) => {
    return smithyClient.take(output, {
        AssociationSummaries: (_) => de_AssociationSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListAutoMLJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        AutoMLJobSummaries: (_) => de_AutoMLJobSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListCandidatesForAutoMLJobResponse = (output, context) => {
    return smithyClient.take(output, {
        Candidates: (_) => de_AutoMLCandidates(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListClusterEventsResponse = (output, context) => {
    return smithyClient.take(output, {
        Events: (_) => de_ClusterEventSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListClusterNodesResponse = (output, context) => {
    return smithyClient.take(output, {
        ClusterNodeSummaries: (_) => de_ClusterNodeSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListClusterSchedulerConfigsResponse = (output, context) => {
    return smithyClient.take(output, {
        ClusterSchedulerConfigSummaries: (_) => de_ClusterSchedulerConfigSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListClustersResponse = (output, context) => {
    return smithyClient.take(output, {
        ClusterSummaries: (_) => de_ClusterSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListCodeRepositoriesOutput = (output, context) => {
    return smithyClient.take(output, {
        CodeRepositorySummaryList: (_) => de_CodeRepositorySummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListCompilationJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        CompilationJobSummaries: (_) => de_CompilationJobSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListComputeQuotasResponse = (output, context) => {
    return smithyClient.take(output, {
        ComputeQuotaSummaries: (_) => de_ComputeQuotaSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListContextsResponse = (output, context) => {
    return smithyClient.take(output, {
        ContextSummaries: (_) => de_ContextSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListDataQualityJobDefinitionsResponse = (output, context) => {
    return smithyClient.take(output, {
        JobDefinitionSummaries: (_) => de_MonitoringJobDefinitionSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListDeviceFleetsResponse = (output, context) => {
    return smithyClient.take(output, {
        DeviceFleetSummaries: (_) => de_DeviceFleetSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListDevicesResponse = (output, context) => {
    return smithyClient.take(output, {
        DeviceSummaries: (_) => de_DeviceSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListDomainsResponse = (output, context) => {
    return smithyClient.take(output, {
        Domains: (_) => de_DomainList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListEdgeDeploymentPlansResponse = (output, context) => {
    return smithyClient.take(output, {
        EdgeDeploymentPlanSummaries: (_) => de_EdgeDeploymentPlanSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListEdgePackagingJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        EdgePackagingJobSummaries: (_) => de_EdgePackagingJobSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListEndpointConfigsOutput = (output, context) => {
    return smithyClient.take(output, {
        EndpointConfigs: (_) => de_EndpointConfigSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListEndpointsOutput = (output, context) => {
    return smithyClient.take(output, {
        Endpoints: (_) => de_EndpointSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListExperimentsResponse = (output, context) => {
    return smithyClient.take(output, {
        ExperimentSummaries: (_) => de_ExperimentSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListFeatureGroupsResponse = (output, context) => {
    return smithyClient.take(output, {
        FeatureGroupSummaries: (_) => de_FeatureGroupSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListFlowDefinitionsResponse = (output, context) => {
    return smithyClient.take(output, {
        FlowDefinitionSummaries: (_) => de_FlowDefinitionSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListHubContentsResponse = (output, context) => {
    return smithyClient.take(output, {
        HubContentSummaries: (_) => de_HubContentInfoList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListHubContentVersionsResponse = (output, context) => {
    return smithyClient.take(output, {
        HubContentSummaries: (_) => de_HubContentInfoList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListHubsResponse = (output, context) => {
    return smithyClient.take(output, {
        HubSummaries: (_) => de_HubInfoList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListHumanTaskUisResponse = (output, context) => {
    return smithyClient.take(output, {
        HumanTaskUiSummaries: (_) => de_HumanTaskUiSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListHyperParameterTuningJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        HyperParameterTuningJobSummaries: (_) => de_HyperParameterTuningJobSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListImagesResponse = (output, context) => {
    return smithyClient.take(output, {
        Images: (_) => de_Images(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListImageVersionsResponse = (output, context) => {
    return smithyClient.take(output, {
        ImageVersions: (_) => de_ImageVersions(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListInferenceComponentsOutput = (output, context) => {
    return smithyClient.take(output, {
        InferenceComponents: (_) => de_InferenceComponentSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListInferenceExperimentsResponse = (output, context) => {
    return smithyClient.take(output, {
        InferenceExperiments: (_) => de_InferenceExperimentList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListInferenceRecommendationsJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        InferenceRecommendationsJobs: (_) => de_InferenceRecommendationsJobs(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListInferenceRecommendationsJobStepsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        Steps: (_) => de_InferenceRecommendationsJobSteps(_),
    });
};
const de_ListLabelingJobsForWorkteamResponse = (output, context) => {
    return smithyClient.take(output, {
        LabelingJobSummaryList: (_) => de_LabelingJobForWorkteamSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListLabelingJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        LabelingJobSummaryList: (_) => de_LabelingJobSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListLineageGroupsResponse = (output, context) => {
    return smithyClient.take(output, {
        LineageGroupSummaries: (_) => de_LineageGroupSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListMlflowTrackingServersResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        TrackingServerSummaries: (_) => de_TrackingServerSummaryList(_),
    });
};
const de_ListModelBiasJobDefinitionsResponse = (output, context) => {
    return smithyClient.take(output, {
        JobDefinitionSummaries: (_) => de_MonitoringJobDefinitionSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListModelCardExportJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        ModelCardExportJobSummaries: (_) => de_ModelCardExportJobSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListModelCardsResponse = (output, context) => {
    return smithyClient.take(output, {
        ModelCardSummaries: (_) => de_ModelCardSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListModelCardVersionsResponse = (output, context) => {
    return smithyClient.take(output, {
        ModelCardVersionSummaryList: (_) => de_ModelCardVersionSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListModelExplainabilityJobDefinitionsResponse = (output, context) => {
    return smithyClient.take(output, {
        JobDefinitionSummaries: (_) => de_MonitoringJobDefinitionSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListModelMetadataResponse = (output, context) => {
    return smithyClient.take(output, {
        ModelMetadataSummaries: (_) => de_ModelMetadataSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListModelPackageGroupsOutput = (output, context) => {
    return smithyClient.take(output, {
        ModelPackageGroupSummaryList: (_) => de_ModelPackageGroupSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListModelPackagesOutput = (output, context) => {
    return smithyClient.take(output, {
        ModelPackageSummaryList: (_) => de_ModelPackageSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListModelQualityJobDefinitionsResponse = (output, context) => {
    return smithyClient.take(output, {
        JobDefinitionSummaries: (_) => de_MonitoringJobDefinitionSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListModelsOutput = (output, context) => {
    return smithyClient.take(output, {
        Models: (_) => de_ModelSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListMonitoringAlertHistoryResponse = (output, context) => {
    return smithyClient.take(output, {
        MonitoringAlertHistory: (_) => de_MonitoringAlertHistoryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListMonitoringAlertsResponse = (output, context) => {
    return smithyClient.take(output, {
        MonitoringAlertSummaries: (_) => de_MonitoringAlertSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListMonitoringExecutionsResponse = (output, context) => {
    return smithyClient.take(output, {
        MonitoringExecutionSummaries: (_) => de_MonitoringExecutionSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListMonitoringSchedulesResponse = (output, context) => {
    return smithyClient.take(output, {
        MonitoringScheduleSummaries: (_) => de_MonitoringScheduleSummaryList(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListNotebookInstanceLifecycleConfigsOutput = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        NotebookInstanceLifecycleConfigs: (_) => de_NotebookInstanceLifecycleConfigSummaryList(_),
    });
};
const de_ListNotebookInstancesOutput = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        NotebookInstances: (_) => de_NotebookInstanceSummaryList(_),
    });
};
const de_ListOptimizationJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        OptimizationJobSummaries: (_) => de_OptimizationJobSummaries(_),
    });
};
const de_ListPartnerAppsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        Summaries: (_) => de_PartnerAppSummaries(_),
    });
};
const de_ListPipelineExecutionsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        PipelineExecutionSummaries: (_) => de_PipelineExecutionSummaryList(_),
    });
};
const de_ListPipelineExecutionStepsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        PipelineExecutionSteps: (_) => de_PipelineExecutionStepList(_),
    });
};
const de_ListPipelineParametersForExecutionResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        PipelineParameters: (_) => de_ParameterList(_),
    });
};
const de_ListPipelinesResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        PipelineSummaries: (_) => de_PipelineSummaryList(_),
    });
};
const de_ListPipelineVersionsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        PipelineVersionSummaries: (_) => de_PipelineVersionSummaryList(_),
    });
};
const de_ListProcessingJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        ProcessingJobSummaries: (_) => de_ProcessingJobSummaries(_),
    });
};
const de_ListProjectsOutput = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        ProjectSummaryList: (_) => de_ProjectSummaryList(_),
    });
};
const de_ListResourceCatalogsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        ResourceCatalogs: (_) => de_ResourceCatalogList(_),
    });
};
const de_ListSpacesResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        Spaces: (_) => de_SpaceList(_),
    });
};
const de_ListStageDevicesResponse = (output, context) => {
    return smithyClient.take(output, {
        DeviceDeploymentSummaries: (_) => de_DeviceDeploymentSummaries(_),
        NextToken: smithyClient.expectString,
    });
};
const de_ListStudioLifecycleConfigsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        StudioLifecycleConfigs: (_) => de_StudioLifecycleConfigsList(_),
    });
};
const de_ListSubscribedWorkteamsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        SubscribedWorkteams: (_) => de_SubscribedWorkteams(_),
    });
};
const de_ListTagsOutput = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        Tags: (_) => de_TagList(_),
    });
};
const de_ListTrainingJobsForHyperParameterTuningJobResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        TrainingJobSummaries: (_) => de_HyperParameterTrainingJobSummaries(_),
    });
};
const de_ListTrainingJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        TrainingJobSummaries: (_) => de_TrainingJobSummaries(_),
    });
};
const de_ListTrainingPlansResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        TrainingPlanSummaries: (_) => de_TrainingPlanSummaries(_),
    });
};
const de_ListTransformJobsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        TransformJobSummaries: (_) => de_TransformJobSummaries(_),
    });
};
const de_ListTrialComponentsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        TrialComponentSummaries: (_) => de_TrialComponentSummaries(_),
    });
};
const de_ListTrialsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        TrialSummaries: (_) => de_TrialSummaries(_),
    });
};
const de_ListUltraServersByReservedCapacityResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        UltraServers: (_) => de_UltraServers(_),
    });
};
const de_ListUserProfilesResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        UserProfiles: (_) => de_UserProfileList(_),
    });
};
const de_ListWorkforcesResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        Workforces: (_) => de_Workforces(_),
    });
};
const de_ListWorkteamsResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        Workteams: (_) => de_Workteams(_),
    });
};
const de_MemberDefinition = (output, context) => {
    return smithyClient.take(output, {
        CognitoMemberDefinition: (_) => de_CognitoMemberDefinition(_),
        OidcMemberDefinition: (_) => de_OidcMemberDefinition(_),
    });
};
const de_MemberDefinitions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MemberDefinition(entry);
    });
    return retVal;
};
const de_MetadataProperties = (output, context) => {
    return smithyClient.take(output, {
        CommitId: smithyClient.expectString,
        GeneratedBy: smithyClient.expectString,
        ProjectId: smithyClient.expectString,
        Repository: smithyClient.expectString,
    });
};
const de_MetricData = (output, context) => {
    return smithyClient.take(output, {
        MetricName: smithyClient.expectString,
        Timestamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Value: smithyClient.limitedParseFloat32,
    });
};
const de_MetricDataList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricDatum(entry);
    });
    return retVal;
};
const de_MetricDatum = (output, context) => {
    return smithyClient.take(output, {
        MetricName: smithyClient.expectString,
        Set: smithyClient.expectString,
        StandardMetricName: smithyClient.expectString,
        Value: smithyClient.limitedParseFloat32,
    });
};
const de_MetricDefinition = (output, context) => {
    return smithyClient.take(output, {
        Name: smithyClient.expectString,
        Regex: smithyClient.expectString,
    });
};
const de_MetricDefinitionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MetricDefinition(entry);
    });
    return retVal;
};
const de_MetricSpecification = (output, context) => {
    if (output.Customized != null) {
        return {
            Customized: de_CustomizedMetricSpecification(output.Customized),
        };
    }
    if (output.Predefined != null) {
        return {
            Predefined: de_PredefinedMetricSpecification(output.Predefined),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_MetricsSource = (output, context) => {
    return smithyClient.take(output, {
        ContentDigest: smithyClient.expectString,
        ContentType: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_Model = (output, context) => {
    return smithyClient.take(output, {
        Containers: (_) => de_ContainerDefinitionList(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DeploymentRecommendation: (_) => de_DeploymentRecommendation(_),
        EnableNetworkIsolation: smithyClient.expectBoolean,
        ExecutionRoleArn: smithyClient.expectString,
        InferenceExecutionConfig: (_) => de_InferenceExecutionConfig(_),
        ModelArn: smithyClient.expectString,
        ModelName: smithyClient.expectString,
        PrimaryContainer: (_) => de_ContainerDefinition(_),
        Tags: (_) => de_TagList(_),
        VpcConfig: (_) => de_VpcConfig(_),
    });
};
const de_ModelAccessConfig = (output, context) => {
    return smithyClient.take(output, {
        AcceptEula: smithyClient.expectBoolean,
    });
};
const de_ModelArtifacts = (output, context) => {
    return smithyClient.take(output, {
        S3ModelArtifacts: smithyClient.expectString,
    });
};
const de_ModelBiasAppSpecification = (output, context) => {
    return smithyClient.take(output, {
        ConfigUri: smithyClient.expectString,
        Environment: (_) => de_MonitoringEnvironmentMap(_),
        ImageUri: smithyClient.expectString,
    });
};
const de_ModelBiasBaselineConfig = (output, context) => {
    return smithyClient.take(output, {
        BaseliningJobName: smithyClient.expectString,
        ConstraintsResource: (_) => de_MonitoringConstraintsResource(_),
    });
};
const de_ModelBiasJobInput = (output, context) => {
    return smithyClient.take(output, {
        BatchTransformInput: (_) => de_BatchTransformInput(_),
        EndpointInput: (_) => de_EndpointInput(_),
        GroundTruthS3Input: (_) => de_MonitoringGroundTruthS3Input(_),
    });
};
const de_ModelCard = (output, context) => {
    return smithyClient.take(output, {
        Content: smithyClient.expectString,
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelCardArn: smithyClient.expectString,
        ModelCardName: smithyClient.expectString,
        ModelCardStatus: smithyClient.expectString,
        ModelCardVersion: smithyClient.expectInt32,
        ModelId: smithyClient.expectString,
        ModelPackageGroupName: smithyClient.expectString,
        RiskRating: smithyClient.expectString,
        SecurityConfig: (_) => de_ModelCardSecurityConfig(_),
        Tags: (_) => de_TagList(_),
    });
};
const de_ModelCardExportArtifacts = (output, context) => {
    return smithyClient.take(output, {
        S3ExportArtifacts: smithyClient.expectString,
    });
};
const de_ModelCardExportJobSummary = (output, context) => {
    return smithyClient.take(output, {
        CreatedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedAt: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelCardExportJobArn: smithyClient.expectString,
        ModelCardExportJobName: smithyClient.expectString,
        ModelCardName: smithyClient.expectString,
        ModelCardVersion: smithyClient.expectInt32,
        Status: smithyClient.expectString,
    });
};
const de_ModelCardExportJobSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelCardExportJobSummary(entry);
    });
    return retVal;
};
const de_ModelCardExportOutputConfig = (output, context) => {
    return smithyClient.take(output, {
        S3OutputPath: smithyClient.expectString,
    });
};
const de_ModelCardSecurityConfig = (output, context) => {
    return smithyClient.take(output, {
        KmsKeyId: smithyClient.expectString,
    });
};
const de_ModelCardSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelCardArn: smithyClient.expectString,
        ModelCardName: smithyClient.expectString,
        ModelCardStatus: smithyClient.expectString,
    });
};
const de_ModelCardSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelCardSummary(entry);
    });
    return retVal;
};
const de_ModelCardVersionSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelCardArn: smithyClient.expectString,
        ModelCardName: smithyClient.expectString,
        ModelCardStatus: smithyClient.expectString,
        ModelCardVersion: smithyClient.expectInt32,
    });
};
const de_ModelCardVersionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelCardVersionSummary(entry);
    });
    return retVal;
};
const de_ModelClientConfig = (output, context) => {
    return smithyClient.take(output, {
        InvocationsMaxRetries: smithyClient.expectInt32,
        InvocationsTimeoutInSeconds: smithyClient.expectInt32,
    });
};
const de_ModelCompilationConfig = (output, context) => {
    return smithyClient.take(output, {
        Image: smithyClient.expectString,
        OverrideEnvironment: (_) => de_OptimizationJobEnvironmentVariables(_),
    });
};
const de_ModelConfiguration = (output, context) => {
    return smithyClient.take(output, {
        CompilationJobName: smithyClient.expectString,
        EnvironmentParameters: (_) => de_EnvironmentParameters(_),
        InferenceSpecificationName: smithyClient.expectString,
    });
};
const de_ModelDashboardEndpoint = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndpointArn: smithyClient.expectString,
        EndpointName: smithyClient.expectString,
        EndpointStatus: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_ModelDashboardEndpoints = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelDashboardEndpoint(entry);
    });
    return retVal;
};
const de_ModelDashboardIndicatorAction = (output, context) => {
    return smithyClient.take(output, {
        Enabled: smithyClient.expectBoolean,
    });
};
const de_ModelDashboardModel = (output, context) => {
    return smithyClient.take(output, {
        Endpoints: (_) => de_ModelDashboardEndpoints(_),
        LastBatchTransformJob: (_) => de_TransformJob(_),
        Model: (_) => de_Model(_),
        ModelCard: (_) => de_ModelDashboardModelCard(_),
        MonitoringSchedules: (_) => de_ModelDashboardMonitoringSchedules(_),
    });
};
const de_ModelDashboardModelCard = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelCardArn: smithyClient.expectString,
        ModelCardName: smithyClient.expectString,
        ModelCardStatus: smithyClient.expectString,
        ModelCardVersion: smithyClient.expectInt32,
        ModelId: smithyClient.expectString,
        RiskRating: smithyClient.expectString,
        SecurityConfig: (_) => de_ModelCardSecurityConfig(_),
        Tags: (_) => de_TagList(_),
    });
};
const de_ModelDashboardMonitoringSchedule = (output, context) => {
    return smithyClient.take(output, {
        BatchTransformInput: (_) => de_BatchTransformInput(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndpointName: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastMonitoringExecutionSummary: (_) => de_MonitoringExecutionSummary(_),
        MonitoringAlertSummaries: (_) => de_MonitoringAlertSummaryList(_),
        MonitoringScheduleArn: smithyClient.expectString,
        MonitoringScheduleConfig: (_) => de_MonitoringScheduleConfig(_),
        MonitoringScheduleName: smithyClient.expectString,
        MonitoringScheduleStatus: smithyClient.expectString,
        MonitoringType: smithyClient.expectString,
    });
};
const de_ModelDashboardMonitoringSchedules = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelDashboardMonitoringSchedule(entry);
    });
    return retVal;
};
const de_ModelDataQuality = (output, context) => {
    return smithyClient.take(output, {
        Constraints: (_) => de_MetricsSource(_),
        Statistics: (_) => de_MetricsSource(_),
    });
};
const de_ModelDataSource = (output, context) => {
    return smithyClient.take(output, {
        S3DataSource: (_) => de_S3ModelDataSource(_),
    });
};
const de_ModelDeployConfig = (output, context) => {
    return smithyClient.take(output, {
        AutoGenerateEndpointName: smithyClient.expectBoolean,
        EndpointName: smithyClient.expectString,
    });
};
const de_ModelDeployResult = (output, context) => {
    return smithyClient.take(output, {
        EndpointName: smithyClient.expectString,
    });
};
const de_ModelDigests = (output, context) => {
    return smithyClient.take(output, {
        ArtifactDigest: smithyClient.expectString,
    });
};
const de_ModelExplainabilityAppSpecification = (output, context) => {
    return smithyClient.take(output, {
        ConfigUri: smithyClient.expectString,
        Environment: (_) => de_MonitoringEnvironmentMap(_),
        ImageUri: smithyClient.expectString,
    });
};
const de_ModelExplainabilityBaselineConfig = (output, context) => {
    return smithyClient.take(output, {
        BaseliningJobName: smithyClient.expectString,
        ConstraintsResource: (_) => de_MonitoringConstraintsResource(_),
    });
};
const de_ModelExplainabilityJobInput = (output, context) => {
    return smithyClient.take(output, {
        BatchTransformInput: (_) => de_BatchTransformInput(_),
        EndpointInput: (_) => de_EndpointInput(_),
    });
};
const de_ModelInfrastructureConfig = (output, context) => {
    return smithyClient.take(output, {
        InfrastructureType: smithyClient.expectString,
        RealTimeInferenceConfig: (_) => de_RealTimeInferenceConfig(_),
    });
};
const de_ModelInput = (output, context) => {
    return smithyClient.take(output, {
        DataInputConfig: smithyClient.expectString,
    });
};
const de_ModelLatencyThreshold = (output, context) => {
    return smithyClient.take(output, {
        Percentile: smithyClient.expectString,
        ValueInMilliseconds: smithyClient.expectInt32,
    });
};
const de_ModelLatencyThresholds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelLatencyThreshold(entry);
    });
    return retVal;
};
const de_ModelLifeCycle = (output, context) => {
    return smithyClient.take(output, {
        Stage: smithyClient.expectString,
        StageDescription: smithyClient.expectString,
        StageStatus: smithyClient.expectString,
    });
};
const de_ModelMetadataSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelMetadataSummary(entry);
    });
    return retVal;
};
const de_ModelMetadataSummary = (output, context) => {
    return smithyClient.take(output, {
        Domain: smithyClient.expectString,
        Framework: smithyClient.expectString,
        FrameworkVersion: smithyClient.expectString,
        Model: smithyClient.expectString,
        Task: smithyClient.expectString,
    });
};
const de_ModelMetrics = (output, context) => {
    return smithyClient.take(output, {
        Bias: (_) => de_Bias(_),
        Explainability: (_) => de_Explainability(_),
        ModelDataQuality: (_) => de_ModelDataQuality(_),
        ModelQuality: (_) => de_ModelQuality(_),
    });
};
const de_ModelPackage = (output, context) => {
    return smithyClient.take(output, {
        AdditionalInferenceSpecifications: (_) => de_AdditionalInferenceSpecifications(_),
        ApprovalDescription: smithyClient.expectString,
        CertifyForMarketplace: smithyClient.expectBoolean,
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        CustomerMetadataProperties: (_) => de_CustomerMetadataMap(_),
        Domain: smithyClient.expectString,
        DriftCheckBaselines: (_) => de_DriftCheckBaselines(_),
        InferenceSpecification: (_) => de_InferenceSpecification(_),
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MetadataProperties: (_) => de_MetadataProperties(_),
        ModelApprovalStatus: smithyClient.expectString,
        ModelCard: (_) => de_ModelPackageModelCard(_),
        ModelLifeCycle: (_) => de_ModelLifeCycle(_),
        ModelMetrics: (_) => de_ModelMetrics(_),
        ModelPackageArn: smithyClient.expectString,
        ModelPackageDescription: smithyClient.expectString,
        ModelPackageGroupName: smithyClient.expectString,
        ModelPackageName: smithyClient.expectString,
        ModelPackageStatus: smithyClient.expectString,
        ModelPackageStatusDetails: (_) => de_ModelPackageStatusDetails(_),
        ModelPackageVersion: smithyClient.expectInt32,
        SamplePayloadUrl: smithyClient.expectString,
        SecurityConfig: (_) => de_ModelPackageSecurityConfig(_),
        SkipModelValidation: smithyClient.expectString,
        SourceAlgorithmSpecification: (_) => de_SourceAlgorithmSpecification(_),
        SourceUri: smithyClient.expectString,
        Tags: (_) => de_TagList(_),
        Task: smithyClient.expectString,
        ValidationSpecification: (_) => de_ModelPackageValidationSpecification(_),
    });
};
const de_ModelPackageContainerDefinition = (output, context) => {
    return smithyClient.take(output, {
        AdditionalS3DataSource: (_) => de_AdditionalS3DataSource(_),
        ContainerHostname: smithyClient.expectString,
        Environment: (_) => de_EnvironmentMap(_),
        Framework: smithyClient.expectString,
        FrameworkVersion: smithyClient.expectString,
        Image: smithyClient.expectString,
        ImageDigest: smithyClient.expectString,
        ModelDataETag: smithyClient.expectString,
        ModelDataSource: (_) => de_ModelDataSource(_),
        ModelDataUrl: smithyClient.expectString,
        ModelInput: (_) => de_ModelInput(_),
        NearestModelName: smithyClient.expectString,
        ProductId: smithyClient.expectString,
    });
};
const de_ModelPackageContainerDefinitionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelPackageContainerDefinition(entry);
    });
    return retVal;
};
const de_ModelPackageGroup = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelPackageGroupArn: smithyClient.expectString,
        ModelPackageGroupDescription: smithyClient.expectString,
        ModelPackageGroupName: smithyClient.expectString,
        ModelPackageGroupStatus: smithyClient.expectString,
        Tags: (_) => de_TagList(_),
    });
};
const de_ModelPackageGroupSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelPackageGroupArn: smithyClient.expectString,
        ModelPackageGroupDescription: smithyClient.expectString,
        ModelPackageGroupName: smithyClient.expectString,
        ModelPackageGroupStatus: smithyClient.expectString,
    });
};
const de_ModelPackageGroupSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelPackageGroupSummary(entry);
    });
    return retVal;
};
const de_ModelPackageModelCard = (output, context) => {
    return smithyClient.take(output, {
        ModelCardContent: smithyClient.expectString,
        ModelCardStatus: smithyClient.expectString,
    });
};
const de_ModelPackageSecurityConfig = (output, context) => {
    return smithyClient.take(output, {
        KmsKeyId: smithyClient.expectString,
    });
};
const de_ModelPackageStatusDetails = (output, context) => {
    return smithyClient.take(output, {
        ImageScanStatuses: (_) => de_ModelPackageStatusItemList(_),
        ValidationStatuses: (_) => de_ModelPackageStatusItemList(_),
    });
};
const de_ModelPackageStatusItem = (output, context) => {
    return smithyClient.take(output, {
        FailureReason: smithyClient.expectString,
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_ModelPackageStatusItemList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelPackageStatusItem(entry);
    });
    return retVal;
};
const de_ModelPackageSummaries = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_BatchDescribeModelPackageSummary(value);
        return acc;
    }, {});
};
const de_ModelPackageSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelApprovalStatus: smithyClient.expectString,
        ModelLifeCycle: (_) => de_ModelLifeCycle(_),
        ModelPackageArn: smithyClient.expectString,
        ModelPackageDescription: smithyClient.expectString,
        ModelPackageGroupName: smithyClient.expectString,
        ModelPackageName: smithyClient.expectString,
        ModelPackageStatus: smithyClient.expectString,
        ModelPackageVersion: smithyClient.expectInt32,
    });
};
const de_ModelPackageSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelPackageSummary(entry);
    });
    return retVal;
};
const de_ModelPackageValidationProfile = (output, context) => {
    return smithyClient.take(output, {
        ProfileName: smithyClient.expectString,
        TransformJobDefinition: (_) => de_TransformJobDefinition(_),
    });
};
const de_ModelPackageValidationProfiles = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelPackageValidationProfile(entry);
    });
    return retVal;
};
const de_ModelPackageValidationSpecification = (output, context) => {
    return smithyClient.take(output, {
        ValidationProfiles: (_) => de_ModelPackageValidationProfiles(_),
        ValidationRole: smithyClient.expectString,
    });
};
const de_ModelQuality = (output, context) => {
    return smithyClient.take(output, {
        Constraints: (_) => de_MetricsSource(_),
        Statistics: (_) => de_MetricsSource(_),
    });
};
const de_ModelQualityAppSpecification = (output, context) => {
    return smithyClient.take(output, {
        ContainerArguments: (_) => de_MonitoringContainerArguments(_),
        ContainerEntrypoint: (_) => de_ContainerEntrypoint(_),
        Environment: (_) => de_MonitoringEnvironmentMap(_),
        ImageUri: smithyClient.expectString,
        PostAnalyticsProcessorSourceUri: smithyClient.expectString,
        ProblemType: smithyClient.expectString,
        RecordPreprocessorSourceUri: smithyClient.expectString,
    });
};
const de_ModelQualityBaselineConfig = (output, context) => {
    return smithyClient.take(output, {
        BaseliningJobName: smithyClient.expectString,
        ConstraintsResource: (_) => de_MonitoringConstraintsResource(_),
    });
};
const de_ModelQualityJobInput = (output, context) => {
    return smithyClient.take(output, {
        BatchTransformInput: (_) => de_BatchTransformInput(_),
        EndpointInput: (_) => de_EndpointInput(_),
        GroundTruthS3Input: (_) => de_MonitoringGroundTruthS3Input(_),
    });
};
const de_ModelQuantizationConfig = (output, context) => {
    return smithyClient.take(output, {
        Image: smithyClient.expectString,
        OverrideEnvironment: (_) => de_OptimizationJobEnvironmentVariables(_),
    });
};
const de_ModelRegisterSettings = (output, context) => {
    return smithyClient.take(output, {
        CrossAccountModelRegisterRoleArn: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_ModelShardingConfig = (output, context) => {
    return smithyClient.take(output, {
        Image: smithyClient.expectString,
        OverrideEnvironment: (_) => de_OptimizationJobEnvironmentVariables(_),
    });
};
const de_ModelStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
    });
};
const de_ModelSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelArn: smithyClient.expectString,
        ModelName: smithyClient.expectString,
    });
};
const de_ModelSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelSummary(entry);
    });
    return retVal;
};
const de_ModelVariantConfigSummary = (output, context) => {
    return smithyClient.take(output, {
        InfrastructureConfig: (_) => de_ModelInfrastructureConfig(_),
        ModelName: smithyClient.expectString,
        Status: smithyClient.expectString,
        VariantName: smithyClient.expectString,
    });
};
const de_ModelVariantConfigSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ModelVariantConfigSummary(entry);
    });
    return retVal;
};
const de_MonitoringAlertActions = (output, context) => {
    return smithyClient.take(output, {
        ModelDashboardIndicator: (_) => de_ModelDashboardIndicatorAction(_),
    });
};
const de_MonitoringAlertHistoryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringAlertHistorySummary(entry);
    });
    return retVal;
};
const de_MonitoringAlertHistorySummary = (output, context) => {
    return smithyClient.take(output, {
        AlertStatus: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MonitoringAlertName: smithyClient.expectString,
        MonitoringScheduleName: smithyClient.expectString,
    });
};
const de_MonitoringAlertSummary = (output, context) => {
    return smithyClient.take(output, {
        Actions: (_) => de_MonitoringAlertActions(_),
        AlertStatus: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DatapointsToAlert: smithyClient.expectInt32,
        EvaluationPeriod: smithyClient.expectInt32,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MonitoringAlertName: smithyClient.expectString,
    });
};
const de_MonitoringAlertSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringAlertSummary(entry);
    });
    return retVal;
};
const de_MonitoringAppSpecification = (output, context) => {
    return smithyClient.take(output, {
        ContainerArguments: (_) => de_MonitoringContainerArguments(_),
        ContainerEntrypoint: (_) => de_ContainerEntrypoint(_),
        ImageUri: smithyClient.expectString,
        PostAnalyticsProcessorSourceUri: smithyClient.expectString,
        RecordPreprocessorSourceUri: smithyClient.expectString,
    });
};
const de_MonitoringBaselineConfig = (output, context) => {
    return smithyClient.take(output, {
        BaseliningJobName: smithyClient.expectString,
        ConstraintsResource: (_) => de_MonitoringConstraintsResource(_),
        StatisticsResource: (_) => de_MonitoringStatisticsResource(_),
    });
};
const de_MonitoringClusterConfig = (output, context) => {
    return smithyClient.take(output, {
        InstanceCount: smithyClient.expectInt32,
        InstanceType: smithyClient.expectString,
        VolumeKmsKeyId: smithyClient.expectString,
        VolumeSizeInGB: smithyClient.expectInt32,
    });
};
const de_MonitoringConstraintsResource = (output, context) => {
    return smithyClient.take(output, {
        S3Uri: smithyClient.expectString,
    });
};
const de_MonitoringContainerArguments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_MonitoringCsvDatasetFormat = (output, context) => {
    return smithyClient.take(output, {
        Header: smithyClient.expectBoolean,
    });
};
const de_MonitoringDatasetFormat = (output, context) => {
    return smithyClient.take(output, {
        Csv: (_) => de_MonitoringCsvDatasetFormat(_),
        Json: (_) => de_MonitoringJsonDatasetFormat(_),
        Parquet: (_) => de_MonitoringParquetDatasetFormat(_),
    });
};
const de_MonitoringEnvironmentMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_MonitoringExecutionSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndpointName: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MonitoringExecutionStatus: smithyClient.expectString,
        MonitoringJobDefinitionName: smithyClient.expectString,
        MonitoringScheduleName: smithyClient.expectString,
        MonitoringType: smithyClient.expectString,
        ProcessingJobArn: smithyClient.expectString,
        ScheduledTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_MonitoringExecutionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringExecutionSummary(entry);
    });
    return retVal;
};
const de_MonitoringGroundTruthS3Input = (output, context) => {
    return smithyClient.take(output, {
        S3Uri: smithyClient.expectString,
    });
};
const de_MonitoringInput = (output, context) => {
    return smithyClient.take(output, {
        BatchTransformInput: (_) => de_BatchTransformInput(_),
        EndpointInput: (_) => de_EndpointInput(_),
    });
};
const de_MonitoringInputs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringInput(entry);
    });
    return retVal;
};
const de_MonitoringJobDefinition = (output, context) => {
    return smithyClient.take(output, {
        BaselineConfig: (_) => de_MonitoringBaselineConfig(_),
        Environment: (_) => de_MonitoringEnvironmentMap(_),
        MonitoringAppSpecification: (_) => de_MonitoringAppSpecification(_),
        MonitoringInputs: (_) => de_MonitoringInputs(_),
        MonitoringOutputConfig: (_) => de_MonitoringOutputConfig(_),
        MonitoringResources: (_) => de_MonitoringResources(_),
        NetworkConfig: (_) => de_NetworkConfig(_),
        RoleArn: smithyClient.expectString,
        StoppingCondition: (_) => de_MonitoringStoppingCondition(_),
    });
};
const de_MonitoringJobDefinitionSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndpointName: smithyClient.expectString,
        MonitoringJobDefinitionArn: smithyClient.expectString,
        MonitoringJobDefinitionName: smithyClient.expectString,
    });
};
const de_MonitoringJobDefinitionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringJobDefinitionSummary(entry);
    });
    return retVal;
};
const de_MonitoringJsonDatasetFormat = (output, context) => {
    return smithyClient.take(output, {
        Line: smithyClient.expectBoolean,
    });
};
const de_MonitoringNetworkConfig = (output, context) => {
    return smithyClient.take(output, {
        EnableInterContainerTrafficEncryption: smithyClient.expectBoolean,
        EnableNetworkIsolation: smithyClient.expectBoolean,
        VpcConfig: (_) => de_VpcConfig(_),
    });
};
const de_MonitoringOutput = (output, context) => {
    return smithyClient.take(output, {
        S3Output: (_) => de_MonitoringS3Output(_),
    });
};
const de_MonitoringOutputConfig = (output, context) => {
    return smithyClient.take(output, {
        KmsKeyId: smithyClient.expectString,
        MonitoringOutputs: (_) => de_MonitoringOutputs(_),
    });
};
const de_MonitoringOutputs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringOutput(entry);
    });
    return retVal;
};
const de_MonitoringParquetDatasetFormat = (output, context) => {
    return smithyClient.take(output, {});
};
const de_MonitoringResources = (output, context) => {
    return smithyClient.take(output, {
        ClusterConfig: (_) => de_MonitoringClusterConfig(_),
    });
};
const de_MonitoringS3Output = (output, context) => {
    return smithyClient.take(output, {
        LocalPath: smithyClient.expectString,
        S3UploadMode: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_MonitoringSchedule = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndpointName: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastMonitoringExecutionSummary: (_) => de_MonitoringExecutionSummary(_),
        MonitoringScheduleArn: smithyClient.expectString,
        MonitoringScheduleConfig: (_) => de_MonitoringScheduleConfig(_),
        MonitoringScheduleName: smithyClient.expectString,
        MonitoringScheduleStatus: smithyClient.expectString,
        MonitoringType: smithyClient.expectString,
        Tags: (_) => de_TagList(_),
    });
};
const de_MonitoringScheduleConfig = (output, context) => {
    return smithyClient.take(output, {
        MonitoringJobDefinition: (_) => de_MonitoringJobDefinition(_),
        MonitoringJobDefinitionName: smithyClient.expectString,
        MonitoringType: smithyClient.expectString,
        ScheduleConfig: (_) => de_ScheduleConfig(_),
    });
};
const de_MonitoringScheduleList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringSchedule(entry);
    });
    return retVal;
};
const de_MonitoringScheduleSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        EndpointName: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MonitoringJobDefinitionName: smithyClient.expectString,
        MonitoringScheduleArn: smithyClient.expectString,
        MonitoringScheduleName: smithyClient.expectString,
        MonitoringScheduleStatus: smithyClient.expectString,
        MonitoringType: smithyClient.expectString,
    });
};
const de_MonitoringScheduleSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_MonitoringScheduleSummary(entry);
    });
    return retVal;
};
const de_MonitoringStatisticsResource = (output, context) => {
    return smithyClient.take(output, {
        S3Uri: smithyClient.expectString,
    });
};
const de_MonitoringStoppingCondition = (output, context) => {
    return smithyClient.take(output, {
        MaxRuntimeInSeconds: smithyClient.expectInt32,
    });
};
const de_MultiModelConfig = (output, context) => {
    return smithyClient.take(output, {
        ModelCacheSetting: smithyClient.expectString,
    });
};
const de_NeoVpcConfig = (output, context) => {
    return smithyClient.take(output, {
        SecurityGroupIds: (_) => de_NeoVpcSecurityGroupIds(_),
        Subnets: (_) => de_NeoVpcSubnets(_),
    });
};
const de_NeoVpcSecurityGroupIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_NeoVpcSubnets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_NetworkConfig = (output, context) => {
    return smithyClient.take(output, {
        EnableInterContainerTrafficEncryption: smithyClient.expectBoolean,
        EnableNetworkIsolation: smithyClient.expectBoolean,
        VpcConfig: (_) => de_VpcConfig(_),
    });
};
const de_NodeAdditionResult = (output, context) => {
    return smithyClient.take(output, {
        InstanceGroupName: smithyClient.expectString,
        NodeLogicalId: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_NodeAdditionResultList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NodeAdditionResult(entry);
    });
    return retVal;
};
const de_NotebookInstanceAcceleratorTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_NotebookInstanceLifecycleConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NotebookInstanceLifecycleHook(entry);
    });
    return retVal;
};
const de_NotebookInstanceLifecycleConfigSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        NotebookInstanceLifecycleConfigArn: smithyClient.expectString,
        NotebookInstanceLifecycleConfigName: smithyClient.expectString,
    });
};
const de_NotebookInstanceLifecycleConfigSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NotebookInstanceLifecycleConfigSummary(entry);
    });
    return retVal;
};
const de_NotebookInstanceLifecycleHook = (output, context) => {
    return smithyClient.take(output, {
        Content: smithyClient.expectString,
    });
};
const de_NotebookInstanceSummary = (output, context) => {
    return smithyClient.take(output, {
        AdditionalCodeRepositories: (_) => de_AdditionalCodeRepositoryNamesOrUrls(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DefaultCodeRepository: smithyClient.expectString,
        InstanceType: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        NotebookInstanceArn: smithyClient.expectString,
        NotebookInstanceLifecycleConfigName: smithyClient.expectString,
        NotebookInstanceName: smithyClient.expectString,
        NotebookInstanceStatus: smithyClient.expectString,
        Url: smithyClient.expectString,
    });
};
const de_NotebookInstanceSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_NotebookInstanceSummary(entry);
    });
    return retVal;
};
const de_NotificationConfiguration = (output, context) => {
    return smithyClient.take(output, {
        NotificationTopicArn: smithyClient.expectString,
    });
};
const de_ObjectiveStatusCounters = (output, context) => {
    return smithyClient.take(output, {
        Failed: smithyClient.expectInt32,
        Pending: smithyClient.expectInt32,
        Succeeded: smithyClient.expectInt32,
    });
};
const de_OfflineStoreConfig = (output, context) => {
    return smithyClient.take(output, {
        DataCatalogConfig: (_) => de_DataCatalogConfig(_),
        DisableGlueTableCreation: smithyClient.expectBoolean,
        S3StorageConfig: (_) => de_S3StorageConfig(_),
        TableFormat: smithyClient.expectString,
    });
};
const de_OfflineStoreStatus = (output, context) => {
    return smithyClient.take(output, {
        BlockedReason: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_OidcConfigForResponse = (output, context) => {
    return smithyClient.take(output, {
        AuthenticationRequestExtraParams: (_) => de_AuthenticationRequestExtraParams(_),
        AuthorizationEndpoint: smithyClient.expectString,
        ClientId: smithyClient.expectString,
        Issuer: smithyClient.expectString,
        JwksUri: smithyClient.expectString,
        LogoutEndpoint: smithyClient.expectString,
        Scope: smithyClient.expectString,
        TokenEndpoint: smithyClient.expectString,
        UserInfoEndpoint: smithyClient.expectString,
    });
};
const de_OidcMemberDefinition = (output, context) => {
    return smithyClient.take(output, {
        Groups: (_) => de_Groups(_),
    });
};
const de_OnlineStoreConfig = (output, context) => {
    return smithyClient.take(output, {
        EnableOnlineStore: smithyClient.expectBoolean,
        SecurityConfig: (_) => de_OnlineStoreSecurityConfig(_),
        StorageType: smithyClient.expectString,
        TtlDuration: (_) => de_TtlDuration(_),
    });
};
const de_OnlineStoreSecurityConfig = (output, context) => {
    return smithyClient.take(output, {
        KmsKeyId: smithyClient.expectString,
    });
};
const de_OnStartDeepHealthChecks = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_OptimizationConfig = (output, context) => {
    if (output.ModelCompilationConfig != null) {
        return {
            ModelCompilationConfig: de_ModelCompilationConfig(output.ModelCompilationConfig),
        };
    }
    if (output.ModelQuantizationConfig != null) {
        return {
            ModelQuantizationConfig: de_ModelQuantizationConfig(output.ModelQuantizationConfig),
        };
    }
    if (output.ModelShardingConfig != null) {
        return {
            ModelShardingConfig: de_ModelShardingConfig(output.ModelShardingConfig),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_OptimizationConfigs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OptimizationConfig(core$1.awsExpectUnion(entry));
    });
    return retVal;
};
const de_OptimizationJobEnvironmentVariables = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_OptimizationJobModelSource = (output, context) => {
    return smithyClient.take(output, {
        S3: (_) => de_OptimizationJobModelSourceS3(_),
    });
};
const de_OptimizationJobModelSourceS3 = (output, context) => {
    return smithyClient.take(output, {
        ModelAccessConfig: (_) => de_OptimizationModelAccessConfig(_),
        S3Uri: smithyClient.expectString,
    });
};
const de_OptimizationJobOutputConfig = (output, context) => {
    return smithyClient.take(output, {
        KmsKeyId: smithyClient.expectString,
        S3OutputLocation: smithyClient.expectString,
    });
};
const de_OptimizationJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OptimizationJobSummary(entry);
    });
    return retVal;
};
const de_OptimizationJobSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DeploymentInstanceType: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        OptimizationEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        OptimizationJobArn: smithyClient.expectString,
        OptimizationJobName: smithyClient.expectString,
        OptimizationJobStatus: smithyClient.expectString,
        OptimizationStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        OptimizationTypes: (_) => de_OptimizationTypes(_),
    });
};
const de_OptimizationModelAccessConfig = (output, context) => {
    return smithyClient.take(output, {
        AcceptEula: smithyClient.expectBoolean,
    });
};
const de_OptimizationOutput = (output, context) => {
    return smithyClient.take(output, {
        RecommendedInferenceImage: smithyClient.expectString,
    });
};
const de_OptimizationTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_OptimizationVpcConfig = (output, context) => {
    return smithyClient.take(output, {
        SecurityGroupIds: (_) => de_OptimizationVpcSecurityGroupIds(_),
        Subnets: (_) => de_OptimizationVpcSubnets(_),
    });
};
const de_OptimizationVpcSecurityGroupIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_OptimizationVpcSubnets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_OutputConfig = (output, context) => {
    return smithyClient.take(output, {
        CompilerOptions: smithyClient.expectString,
        KmsKeyId: smithyClient.expectString,
        S3OutputLocation: smithyClient.expectString,
        TargetDevice: smithyClient.expectString,
        TargetPlatform: (_) => de_TargetPlatform(_),
    });
};
const de_OutputDataConfig = (output, context) => {
    return smithyClient.take(output, {
        CompressionType: smithyClient.expectString,
        KmsKeyId: smithyClient.expectString,
        S3OutputPath: smithyClient.expectString,
    });
};
const de_OutputParameter = (output, context) => {
    return smithyClient.take(output, {
        Name: smithyClient.expectString,
        Value: smithyClient.expectString,
    });
};
const de_OutputParameterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_OutputParameter(entry);
    });
    return retVal;
};
const de_OwnershipSettings = (output, context) => {
    return smithyClient.take(output, {
        OwnerUserProfileName: smithyClient.expectString,
    });
};
const de_OwnershipSettingsSummary = (output, context) => {
    return smithyClient.take(output, {
        OwnerUserProfileName: smithyClient.expectString,
    });
};
const de_ParallelismConfiguration = (output, context) => {
    return smithyClient.take(output, {
        MaxParallelExecutionSteps: smithyClient.expectInt32,
    });
};
const de_Parameter = (output, context) => {
    return smithyClient.take(output, {
        Name: smithyClient.expectString,
        Value: smithyClient.expectString,
    });
};
const de_ParameterList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Parameter(entry);
    });
    return retVal;
};
const de_ParameterRange = (output, context) => {
    return smithyClient.take(output, {
        CategoricalParameterRangeSpecification: (_) => de_CategoricalParameterRangeSpecification(_),
        ContinuousParameterRangeSpecification: (_) => de_ContinuousParameterRangeSpecification(_),
        IntegerParameterRangeSpecification: (_) => de_IntegerParameterRangeSpecification(_),
    });
};
const de_ParameterRanges = (output, context) => {
    return smithyClient.take(output, {
        AutoParameters: (_) => de_AutoParameters(_),
        CategoricalParameterRanges: (_) => de_CategoricalParameterRanges(_),
        ContinuousParameterRanges: (_) => de_ContinuousParameterRanges(_),
        IntegerParameterRanges: (_) => de_IntegerParameterRanges(_),
    });
};
const de_ParameterValues = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_Parent = (output, context) => {
    return smithyClient.take(output, {
        ExperimentName: smithyClient.expectString,
        TrialName: smithyClient.expectString,
    });
};
const de_ParentHyperParameterTuningJob = (output, context) => {
    return smithyClient.take(output, {
        HyperParameterTuningJobName: smithyClient.expectString,
    });
};
const de_ParentHyperParameterTuningJobs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ParentHyperParameterTuningJob(entry);
    });
    return retVal;
};
const de_Parents = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Parent(entry);
    });
    return retVal;
};
const de_PartnerAppAdminUserList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_PartnerAppArguments = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_PartnerAppConfig = (output, context) => {
    return smithyClient.take(output, {
        AdminUsers: (_) => de_PartnerAppAdminUserList(_),
        Arguments: (_) => de_PartnerAppArguments(_),
    });
};
const de_PartnerAppMaintenanceConfig = (output, context) => {
    return smithyClient.take(output, {
        MaintenanceWindowStart: smithyClient.expectString,
    });
};
const de_PartnerAppSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PartnerAppSummary(entry);
    });
    return retVal;
};
const de_PartnerAppSummary = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Name: smithyClient.expectString,
        Status: smithyClient.expectString,
        Type: smithyClient.expectString,
    });
};
const de_PendingDeploymentSummary = (output, context) => {
    return smithyClient.take(output, {
        EndpointConfigName: smithyClient.expectString,
        ProductionVariants: (_) => de_PendingProductionVariantSummaryList(_),
        ShadowProductionVariants: (_) => de_PendingProductionVariantSummaryList(_),
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_PendingProductionVariantSummary = (output, context) => {
    return smithyClient.take(output, {
        AcceleratorType: smithyClient.expectString,
        CurrentInstanceCount: smithyClient.expectInt32,
        CurrentServerlessConfig: (_) => de_ProductionVariantServerlessConfig(_),
        CurrentWeight: smithyClient.limitedParseFloat32,
        DeployedImages: (_) => de_DeployedImages(_),
        DesiredInstanceCount: smithyClient.expectInt32,
        DesiredServerlessConfig: (_) => de_ProductionVariantServerlessConfig(_),
        DesiredWeight: smithyClient.limitedParseFloat32,
        InstanceType: smithyClient.expectString,
        ManagedInstanceScaling: (_) => de_ProductionVariantManagedInstanceScaling(_),
        RoutingConfig: (_) => de_ProductionVariantRoutingConfig(_),
        VariantName: smithyClient.expectString,
        VariantStatus: (_) => de_ProductionVariantStatusList(_),
    });
};
const de_PendingProductionVariantSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PendingProductionVariantSummary(entry);
    });
    return retVal;
};
const de_Phase = (output, context) => {
    return smithyClient.take(output, {
        DurationInSeconds: smithyClient.expectInt32,
        InitialNumberOfUsers: smithyClient.expectInt32,
        SpawnRate: smithyClient.expectInt32,
    });
};
const de_Phases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Phase(entry);
    });
    return retVal;
};
const de_Pipeline = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastRunTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ParallelismConfiguration: (_) => de_ParallelismConfiguration(_),
        PipelineArn: smithyClient.expectString,
        PipelineDescription: smithyClient.expectString,
        PipelineDisplayName: smithyClient.expectString,
        PipelineName: smithyClient.expectString,
        PipelineStatus: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
        Tags: (_) => de_TagList(_),
    });
};
const de_PipelineExecution = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ParallelismConfiguration: (_) => de_ParallelismConfiguration(_),
        PipelineArn: smithyClient.expectString,
        PipelineExecutionArn: smithyClient.expectString,
        PipelineExecutionDescription: smithyClient.expectString,
        PipelineExecutionDisplayName: smithyClient.expectString,
        PipelineExecutionStatus: smithyClient.expectString,
        PipelineExperimentConfig: (_) => de_PipelineExperimentConfig(_),
        PipelineParameters: (_) => de_ParameterList(_),
        PipelineVersionDisplayName: smithyClient.expectString,
        PipelineVersionId: smithyClient.expectLong,
        SelectiveExecutionConfig: (_) => de_SelectiveExecutionConfig(_),
    });
};
const de_PipelineExecutionStep = (output, context) => {
    return smithyClient.take(output, {
        AttemptCount: smithyClient.expectInt32,
        CacheHitResult: (_) => de_CacheHitResult(_),
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        Metadata: (_) => de_PipelineExecutionStepMetadata(_),
        SelectiveExecutionResult: (_) => de_SelectiveExecutionResult(_),
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        StepDescription: smithyClient.expectString,
        StepDisplayName: smithyClient.expectString,
        StepName: smithyClient.expectString,
        StepStatus: smithyClient.expectString,
    });
};
const de_PipelineExecutionStepList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PipelineExecutionStep(entry);
    });
    return retVal;
};
const de_PipelineExecutionStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        AutoMLJob: (_) => de_AutoMLJobStepMetadata(_),
        Callback: (_) => de_CallbackStepMetadata(_),
        ClarifyCheck: (_) => de_ClarifyCheckStepMetadata(_),
        Condition: (_) => de_ConditionStepMetadata(_),
        EMR: (_) => de_EMRStepMetadata(_),
        Endpoint: (_) => de_EndpointStepMetadata(_),
        EndpointConfig: (_) => de_EndpointConfigStepMetadata(_),
        Fail: (_) => de_FailStepMetadata(_),
        Lambda: (_) => de_LambdaStepMetadata(_),
        Model: (_) => de_ModelStepMetadata(_),
        ProcessingJob: (_) => de_ProcessingJobStepMetadata(_),
        QualityCheck: (_) => de_QualityCheckStepMetadata(_),
        RegisterModel: (_) => de_RegisterModelStepMetadata(_),
        TrainingJob: (_) => de_TrainingJobStepMetadata(_),
        TransformJob: (_) => de_TransformJobStepMetadata(_),
        TuningJob: (_) => de_TuningJobStepMetaData(_),
    });
};
const de_PipelineExecutionSummary = (output, context) => {
    return smithyClient.take(output, {
        PipelineExecutionArn: smithyClient.expectString,
        PipelineExecutionDescription: smithyClient.expectString,
        PipelineExecutionDisplayName: smithyClient.expectString,
        PipelineExecutionFailureReason: smithyClient.expectString,
        PipelineExecutionStatus: smithyClient.expectString,
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_PipelineExecutionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PipelineExecutionSummary(entry);
    });
    return retVal;
};
const de_PipelineExperimentConfig = (output, context) => {
    return smithyClient.take(output, {
        ExperimentName: smithyClient.expectString,
        TrialName: smithyClient.expectString,
    });
};
const de_PipelineSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastExecutionTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        PipelineArn: smithyClient.expectString,
        PipelineDescription: smithyClient.expectString,
        PipelineDisplayName: smithyClient.expectString,
        PipelineName: smithyClient.expectString,
        RoleArn: smithyClient.expectString,
    });
};
const de_PipelineSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PipelineSummary(entry);
    });
    return retVal;
};
const de_PipelineVersion = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastExecutedPipelineExecutionArn: smithyClient.expectString,
        LastExecutedPipelineExecutionDisplayName: smithyClient.expectString,
        LastExecutedPipelineExecutionStatus: smithyClient.expectString,
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        PipelineArn: smithyClient.expectString,
        PipelineVersionDescription: smithyClient.expectString,
        PipelineVersionDisplayName: smithyClient.expectString,
        PipelineVersionId: smithyClient.expectLong,
    });
};
const de_PipelineVersionSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastExecutionPipelineExecutionArn: smithyClient.expectString,
        PipelineArn: smithyClient.expectString,
        PipelineVersionDescription: smithyClient.expectString,
        PipelineVersionDisplayName: smithyClient.expectString,
        PipelineVersionId: smithyClient.expectLong,
    });
};
const de_PipelineVersionSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PipelineVersionSummary(entry);
    });
    return retVal;
};
const de_PlacementSpecification = (output, context) => {
    return smithyClient.take(output, {
        InstanceCount: smithyClient.expectInt32,
        UltraServerId: smithyClient.expectString,
    });
};
const de_PlacementSpecifications = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PlacementSpecification(entry);
    });
    return retVal;
};
const de_PredefinedMetricSpecification = (output, context) => {
    return smithyClient.take(output, {
        PredefinedMetricType: smithyClient.expectString,
    });
};
const de_PriorityClass = (output, context) => {
    return smithyClient.take(output, {
        Name: smithyClient.expectString,
        Weight: smithyClient.expectInt32,
    });
};
const de_PriorityClassList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PriorityClass(entry);
    });
    return retVal;
};
const de_ProcessingClusterConfig = (output, context) => {
    return smithyClient.take(output, {
        InstanceCount: smithyClient.expectInt32,
        InstanceType: smithyClient.expectString,
        VolumeKmsKeyId: smithyClient.expectString,
        VolumeSizeInGB: smithyClient.expectInt32,
    });
};
const de_ProcessingEnvironmentMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_ProcessingFeatureStoreOutput = (output, context) => {
    return smithyClient.take(output, {
        FeatureGroupName: smithyClient.expectString,
    });
};
const de_ProcessingInput = (output, context) => {
    return smithyClient.take(output, {
        AppManaged: smithyClient.expectBoolean,
        DatasetDefinition: (_) => de_DatasetDefinition(_),
        InputName: smithyClient.expectString,
        S3Input: (_) => de_ProcessingS3Input(_),
    });
};
const de_ProcessingInputs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProcessingInput(entry);
    });
    return retVal;
};
const de_ProcessingJob = (output, context) => {
    return smithyClient.take(output, {
        AppSpecification: (_) => de_AppSpecification(_),
        AutoMLJobArn: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Environment: (_) => de_ProcessingEnvironmentMap(_),
        ExitMessage: smithyClient.expectString,
        ExperimentConfig: (_) => de_ExperimentConfig(_),
        FailureReason: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MonitoringScheduleArn: smithyClient.expectString,
        NetworkConfig: (_) => de_NetworkConfig(_),
        ProcessingEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ProcessingInputs: (_) => de_ProcessingInputs(_),
        ProcessingJobArn: smithyClient.expectString,
        ProcessingJobName: smithyClient.expectString,
        ProcessingJobStatus: smithyClient.expectString,
        ProcessingOutputConfig: (_) => de_ProcessingOutputConfig(_),
        ProcessingResources: (_) => de_ProcessingResources(_),
        ProcessingStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        RoleArn: smithyClient.expectString,
        StoppingCondition: (_) => de_ProcessingStoppingCondition(_),
        Tags: (_) => de_TagList(_),
        TrainingJobArn: smithyClient.expectString,
    });
};
const de_ProcessingJobStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
    });
};
const de_ProcessingJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProcessingJobSummary(entry);
    });
    return retVal;
};
const de_ProcessingJobSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ExitMessage: smithyClient.expectString,
        FailureReason: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ProcessingEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ProcessingJobArn: smithyClient.expectString,
        ProcessingJobName: smithyClient.expectString,
        ProcessingJobStatus: smithyClient.expectString,
    });
};
const de_ProcessingOutput = (output, context) => {
    return smithyClient.take(output, {
        AppManaged: smithyClient.expectBoolean,
        FeatureStoreOutput: (_) => de_ProcessingFeatureStoreOutput(_),
        OutputName: smithyClient.expectString,
        S3Output: (_) => de_ProcessingS3Output(_),
    });
};
const de_ProcessingOutputConfig = (output, context) => {
    return smithyClient.take(output, {
        KmsKeyId: smithyClient.expectString,
        Outputs: (_) => de_ProcessingOutputs(_),
    });
};
const de_ProcessingOutputs = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProcessingOutput(entry);
    });
    return retVal;
};
const de_ProcessingResources = (output, context) => {
    return smithyClient.take(output, {
        ClusterConfig: (_) => de_ProcessingClusterConfig(_),
    });
};
const de_ProcessingS3Input = (output, context) => {
    return smithyClient.take(output, {
        LocalPath: smithyClient.expectString,
        S3CompressionType: smithyClient.expectString,
        S3DataDistributionType: smithyClient.expectString,
        S3DataType: smithyClient.expectString,
        S3InputMode: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_ProcessingS3Output = (output, context) => {
    return smithyClient.take(output, {
        LocalPath: smithyClient.expectString,
        S3UploadMode: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_ProcessingStoppingCondition = (output, context) => {
    return smithyClient.take(output, {
        MaxRuntimeInSeconds: smithyClient.expectInt32,
    });
};
const de_ProductionVariant = (output, context) => {
    return smithyClient.take(output, {
        AcceleratorType: smithyClient.expectString,
        CapacityReservationConfig: (_) => de_ProductionVariantCapacityReservationConfig(_),
        ContainerStartupHealthCheckTimeoutInSeconds: smithyClient.expectInt32,
        CoreDumpConfig: (_) => de_ProductionVariantCoreDumpConfig(_),
        EnableSSMAccess: smithyClient.expectBoolean,
        InferenceAmiVersion: smithyClient.expectString,
        InitialInstanceCount: smithyClient.expectInt32,
        InitialVariantWeight: smithyClient.limitedParseFloat32,
        InstanceType: smithyClient.expectString,
        ManagedInstanceScaling: (_) => de_ProductionVariantManagedInstanceScaling(_),
        ModelDataDownloadTimeoutInSeconds: smithyClient.expectInt32,
        ModelName: smithyClient.expectString,
        RoutingConfig: (_) => de_ProductionVariantRoutingConfig(_),
        ServerlessConfig: (_) => de_ProductionVariantServerlessConfig(_),
        VariantName: smithyClient.expectString,
        VolumeSizeInGB: smithyClient.expectInt32,
    });
};
const de_ProductionVariantCapacityReservationConfig = (output, context) => {
    return smithyClient.take(output, {
        CapacityReservationPreference: smithyClient.expectString,
        MlReservationArn: smithyClient.expectString,
    });
};
const de_ProductionVariantCapacityReservationSummary = (output, context) => {
    return smithyClient.take(output, {
        AvailableInstanceCount: smithyClient.expectInt32,
        CapacityReservationPreference: smithyClient.expectString,
        Ec2CapacityReservations: (_) => de_Ec2CapacityReservationsList(_),
        MlReservationArn: smithyClient.expectString,
        TotalInstanceCount: smithyClient.expectInt32,
        UsedByCurrentEndpoint: smithyClient.expectInt32,
    });
};
const de_ProductionVariantCoreDumpConfig = (output, context) => {
    return smithyClient.take(output, {
        DestinationS3Uri: smithyClient.expectString,
        KmsKeyId: smithyClient.expectString,
    });
};
const de_ProductionVariantList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProductionVariant(entry);
    });
    return retVal;
};
const de_ProductionVariantManagedInstanceScaling = (output, context) => {
    return smithyClient.take(output, {
        MaxInstanceCount: smithyClient.expectInt32,
        MinInstanceCount: smithyClient.expectInt32,
        Status: smithyClient.expectString,
    });
};
const de_ProductionVariantRoutingConfig = (output, context) => {
    return smithyClient.take(output, {
        RoutingStrategy: smithyClient.expectString,
    });
};
const de_ProductionVariantServerlessConfig = (output, context) => {
    return smithyClient.take(output, {
        MaxConcurrency: smithyClient.expectInt32,
        MemorySizeInMB: smithyClient.expectInt32,
        ProvisionedConcurrency: smithyClient.expectInt32,
    });
};
const de_ProductionVariantStatus = (output, context) => {
    return smithyClient.take(output, {
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
    });
};
const de_ProductionVariantStatusList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProductionVariantStatus(entry);
    });
    return retVal;
};
const de_ProductionVariantSummary = (output, context) => {
    return smithyClient.take(output, {
        CapacityReservationConfig: (_) => de_ProductionVariantCapacityReservationSummary(_),
        CurrentInstanceCount: smithyClient.expectInt32,
        CurrentServerlessConfig: (_) => de_ProductionVariantServerlessConfig(_),
        CurrentWeight: smithyClient.limitedParseFloat32,
        DeployedImages: (_) => de_DeployedImages(_),
        DesiredInstanceCount: smithyClient.expectInt32,
        DesiredServerlessConfig: (_) => de_ProductionVariantServerlessConfig(_),
        DesiredWeight: smithyClient.limitedParseFloat32,
        ManagedInstanceScaling: (_) => de_ProductionVariantManagedInstanceScaling(_),
        RoutingConfig: (_) => de_ProductionVariantRoutingConfig(_),
        VariantName: smithyClient.expectString,
        VariantStatus: (_) => de_ProductionVariantStatusList(_),
    });
};
const de_ProductionVariantSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProductionVariantSummary(entry);
    });
    return retVal;
};
const de_ProductListings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ProfilerConfig = (output, context) => {
    return smithyClient.take(output, {
        DisableProfiler: smithyClient.expectBoolean,
        ProfilingIntervalInMilliseconds: smithyClient.expectLong,
        ProfilingParameters: (_) => de_ProfilingParameters(_),
        S3OutputPath: smithyClient.expectString,
    });
};
const de_ProfilerRuleConfiguration = (output, context) => {
    return smithyClient.take(output, {
        InstanceType: smithyClient.expectString,
        LocalPath: smithyClient.expectString,
        RuleConfigurationName: smithyClient.expectString,
        RuleEvaluatorImage: smithyClient.expectString,
        RuleParameters: (_) => de_RuleParameters(_),
        S3OutputPath: smithyClient.expectString,
        VolumeSizeInGB: smithyClient.expectInt32,
    });
};
const de_ProfilerRuleConfigurations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProfilerRuleConfiguration(entry);
    });
    return retVal;
};
const de_ProfilerRuleEvaluationStatus = (output, context) => {
    return smithyClient.take(output, {
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        RuleConfigurationName: smithyClient.expectString,
        RuleEvaluationJobArn: smithyClient.expectString,
        RuleEvaluationStatus: smithyClient.expectString,
        StatusDetails: smithyClient.expectString,
    });
};
const de_ProfilerRuleEvaluationStatuses = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProfilerRuleEvaluationStatus(entry);
    });
    return retVal;
};
const de_ProfilingParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_Project = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ProjectArn: smithyClient.expectString,
        ProjectDescription: smithyClient.expectString,
        ProjectId: smithyClient.expectString,
        ProjectName: smithyClient.expectString,
        ProjectStatus: smithyClient.expectString,
        ServiceCatalogProvisionedProductDetails: (_) => de_ServiceCatalogProvisionedProductDetails(_),
        ServiceCatalogProvisioningDetails: (_) => de_ServiceCatalogProvisioningDetails(_),
        Tags: (_) => de_TagList(_),
        TemplateProviderDetails: (_) => de_TemplateProviderDetailList(_),
    });
};
const de_ProjectSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ProjectArn: smithyClient.expectString,
        ProjectDescription: smithyClient.expectString,
        ProjectId: smithyClient.expectString,
        ProjectName: smithyClient.expectString,
        ProjectStatus: smithyClient.expectString,
    });
};
const de_ProjectSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProjectSummary(entry);
    });
    return retVal;
};
const de_PropertyNameSuggestion = (output, context) => {
    return smithyClient.take(output, {
        PropertyName: smithyClient.expectString,
    });
};
const de_PropertyNameSuggestionList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_PropertyNameSuggestion(entry);
    });
    return retVal;
};
const de_ProvisioningParameter = (output, context) => {
    return smithyClient.take(output, {
        Key: smithyClient.expectString,
        Value: smithyClient.expectString,
    });
};
const de_ProvisioningParameters = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ProvisioningParameter(entry);
    });
    return retVal;
};
const de_PublicWorkforceTaskPrice = (output, context) => {
    return smithyClient.take(output, {
        AmountInUsd: (_) => de_USD(_),
    });
};
const de_PutModelPackageGroupPolicyOutput = (output, context) => {
    return smithyClient.take(output, {
        ModelPackageGroupArn: smithyClient.expectString,
    });
};
const de_QualityCheckStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        BaselineUsedForDriftCheckConstraints: smithyClient.expectString,
        BaselineUsedForDriftCheckStatistics: smithyClient.expectString,
        CalculatedBaselineConstraints: smithyClient.expectString,
        CalculatedBaselineStatistics: smithyClient.expectString,
        CheckJobArn: smithyClient.expectString,
        CheckType: smithyClient.expectString,
        ModelPackageGroupName: smithyClient.expectString,
        RegisterNewBaseline: smithyClient.expectBoolean,
        SkipCheck: smithyClient.expectBoolean,
        ViolationReport: smithyClient.expectString,
    });
};
const de_QueryLineageResponse = (output, context) => {
    return smithyClient.take(output, {
        Edges: (_) => de_Edges(_),
        NextToken: smithyClient.expectString,
        Vertices: (_) => de_Vertices(_),
    });
};
const de_RealTimeInferenceConfig = (output, context) => {
    return smithyClient.take(output, {
        InstanceCount: smithyClient.expectInt32,
        InstanceType: smithyClient.expectString,
    });
};
const de_RealtimeInferenceInstanceTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_RealTimeInferenceRecommendation = (output, context) => {
    return smithyClient.take(output, {
        Environment: (_) => de_EnvironmentMap(_),
        InstanceType: smithyClient.expectString,
        RecommendationId: smithyClient.expectString,
    });
};
const de_RealTimeInferenceRecommendations = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RealTimeInferenceRecommendation(entry);
    });
    return retVal;
};
const de_RecommendationJobContainerConfig = (output, context) => {
    return smithyClient.take(output, {
        DataInputConfig: smithyClient.expectString,
        Domain: smithyClient.expectString,
        Framework: smithyClient.expectString,
        FrameworkVersion: smithyClient.expectString,
        NearestModelName: smithyClient.expectString,
        PayloadConfig: (_) => de_RecommendationJobPayloadConfig(_),
        SupportedEndpointType: smithyClient.expectString,
        SupportedInstanceTypes: (_) => de_RecommendationJobSupportedInstanceTypes(_),
        SupportedResponseMIMETypes: (_) => de_RecommendationJobSupportedResponseMIMETypes(_),
        Task: smithyClient.expectString,
    });
};
const de_RecommendationJobInferenceBenchmark = (output, context) => {
    return smithyClient.take(output, {
        EndpointConfiguration: (_) => de_EndpointOutputConfiguration(_),
        EndpointMetrics: (_) => de_InferenceMetrics(_),
        FailureReason: smithyClient.expectString,
        InvocationEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InvocationStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Metrics: (_) => de_RecommendationMetrics(_),
        ModelConfiguration: (_) => de_ModelConfiguration(_),
    });
};
const de_RecommendationJobInputConfig = (output, context) => {
    return smithyClient.take(output, {
        ContainerConfig: (_) => de_RecommendationJobContainerConfig(_),
        EndpointConfigurations: (_) => de_EndpointInputConfigurations(_),
        Endpoints: (_) => de_Endpoints(_),
        JobDurationInSeconds: smithyClient.expectInt32,
        ModelName: smithyClient.expectString,
        ModelPackageVersionArn: smithyClient.expectString,
        ResourceLimit: (_) => de_RecommendationJobResourceLimit(_),
        TrafficPattern: (_) => de_TrafficPattern(_),
        VolumeKmsKeyId: smithyClient.expectString,
        VpcConfig: (_) => de_RecommendationJobVpcConfig(_),
    });
};
const de_RecommendationJobPayloadConfig = (output, context) => {
    return smithyClient.take(output, {
        SamplePayloadUrl: smithyClient.expectString,
        SupportedContentTypes: (_) => de_RecommendationJobSupportedContentTypes(_),
    });
};
const de_RecommendationJobResourceLimit = (output, context) => {
    return smithyClient.take(output, {
        MaxNumberOfTests: smithyClient.expectInt32,
        MaxParallelOfTests: smithyClient.expectInt32,
    });
};
const de_RecommendationJobStoppingConditions = (output, context) => {
    return smithyClient.take(output, {
        FlatInvocations: smithyClient.expectString,
        MaxInvocations: smithyClient.expectInt32,
        ModelLatencyThresholds: (_) => de_ModelLatencyThresholds(_),
    });
};
const de_RecommendationJobSupportedContentTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_RecommendationJobSupportedInstanceTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_RecommendationJobSupportedResponseMIMETypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_RecommendationJobVpcConfig = (output, context) => {
    return smithyClient.take(output, {
        SecurityGroupIds: (_) => de_RecommendationJobVpcSecurityGroupIds(_),
        Subnets: (_) => de_RecommendationJobVpcSubnets(_),
    });
};
const de_RecommendationJobVpcSecurityGroupIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_RecommendationJobVpcSubnets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_RecommendationMetrics = (output, context) => {
    return smithyClient.take(output, {
        CostPerHour: smithyClient.limitedParseFloat32,
        CostPerInference: smithyClient.limitedParseFloat32,
        CpuUtilization: smithyClient.limitedParseFloat32,
        MaxInvocations: smithyClient.expectInt32,
        MemoryUtilization: smithyClient.limitedParseFloat32,
        ModelLatency: smithyClient.expectInt32,
        ModelSetupTime: smithyClient.expectInt32,
    });
};
const de_RedshiftDatasetDefinition = (output, context) => {
    return smithyClient.take(output, {
        ClusterId: smithyClient.expectString,
        ClusterRoleArn: smithyClient.expectString,
        Database: smithyClient.expectString,
        DbUser: smithyClient.expectString,
        KmsKeyId: smithyClient.expectString,
        OutputCompression: smithyClient.expectString,
        OutputFormat: smithyClient.expectString,
        OutputS3Uri: smithyClient.expectString,
        QueryString: smithyClient.expectString,
    });
};
const de_RegisterModelStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
    });
};
const de_RemoteDebugConfig = (output, context) => {
    return smithyClient.take(output, {
        EnableRemoteDebug: smithyClient.expectBoolean,
    });
};
const de_RenderingError = (output, context) => {
    return smithyClient.take(output, {
        Code: smithyClient.expectString,
        Message: smithyClient.expectString,
    });
};
const de_RenderingErrorList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_RenderingError(entry);
    });
    return retVal;
};
const de_RenderUiTemplateResponse = (output, context) => {
    return smithyClient.take(output, {
        Errors: (_) => de_RenderingErrorList(_),
        RenderedContent: smithyClient.expectString,
    });
};
const de_RepositoryAuthConfig = (output, context) => {
    return smithyClient.take(output, {
        RepositoryCredentialsProviderArn: smithyClient.expectString,
    });
};
const de_ReservedCapacityOffering = (output, context) => {
    return smithyClient.take(output, {
        AvailabilityZone: smithyClient.expectString,
        DurationHours: smithyClient.expectLong,
        DurationMinutes: smithyClient.expectLong,
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InstanceCount: smithyClient.expectInt32,
        InstanceType: smithyClient.expectString,
        ReservedCapacityType: smithyClient.expectString,
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        UltraServerCount: smithyClient.expectInt32,
        UltraServerType: smithyClient.expectString,
    });
};
const de_ReservedCapacityOfferings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedCapacityOffering(entry);
    });
    return retVal;
};
const de_ReservedCapacitySummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ReservedCapacitySummary(entry);
    });
    return retVal;
};
const de_ReservedCapacitySummary = (output, context) => {
    return smithyClient.take(output, {
        AvailabilityZone: smithyClient.expectString,
        DurationHours: smithyClient.expectLong,
        DurationMinutes: smithyClient.expectLong,
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InstanceType: smithyClient.expectString,
        ReservedCapacityArn: smithyClient.expectString,
        ReservedCapacityType: smithyClient.expectString,
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: smithyClient.expectString,
        TotalInstanceCount: smithyClient.expectInt32,
        UltraServerCount: smithyClient.expectInt32,
        UltraServerType: smithyClient.expectString,
    });
};
const de_ResolvedAttributes = (output, context) => {
    return smithyClient.take(output, {
        AutoMLJobObjective: (_) => de_AutoMLJobObjective(_),
        CompletionCriteria: (_) => de_AutoMLJobCompletionCriteria(_),
        ProblemType: smithyClient.expectString,
    });
};
const de_ResourceCatalog = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        ResourceCatalogArn: smithyClient.expectString,
        ResourceCatalogName: smithyClient.expectString,
    });
};
const de_ResourceCatalogList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ResourceCatalog(entry);
    });
    return retVal;
};
const de_ResourceConfig = (output, context) => {
    return smithyClient.take(output, {
        InstanceCount: smithyClient.expectInt32,
        InstanceGroups: (_) => de_InstanceGroups(_),
        InstancePlacementConfig: (_) => de_InstancePlacementConfig(_),
        InstanceType: smithyClient.expectString,
        KeepAlivePeriodInSeconds: smithyClient.expectInt32,
        TrainingPlanArn: smithyClient.expectString,
        VolumeKmsKeyId: smithyClient.expectString,
        VolumeSizeInGB: smithyClient.expectInt32,
    });
};
const de_ResourceLimits = (output, context) => {
    return smithyClient.take(output, {
        MaxNumberOfTrainingJobs: smithyClient.expectInt32,
        MaxParallelTrainingJobs: smithyClient.expectInt32,
        MaxRuntimeInSeconds: smithyClient.expectInt32,
    });
};
const de_ResourceSharingConfig = (output, context) => {
    return smithyClient.take(output, {
        BorrowLimit: smithyClient.expectInt32,
        Strategy: smithyClient.expectString,
    });
};
const de_ResourceSpec = (output, context) => {
    return smithyClient.take(output, {
        InstanceType: smithyClient.expectString,
        LifecycleConfigArn: smithyClient.expectString,
        SageMakerImageArn: smithyClient.expectString,
        SageMakerImageVersionAlias: smithyClient.expectString,
        SageMakerImageVersionArn: smithyClient.expectString,
    });
};
const de_ResponseMIMETypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_RetryPipelineExecutionResponse = (output, context) => {
    return smithyClient.take(output, {
        PipelineExecutionArn: smithyClient.expectString,
    });
};
const de_RetryStrategy = (output, context) => {
    return smithyClient.take(output, {
        MaximumRetryAttempts: smithyClient.expectInt32,
    });
};
const de_RollingDeploymentPolicy = (output, context) => {
    return smithyClient.take(output, {
        MaximumBatchSize: (_) => de_CapacitySizeConfig(_),
        RollbackMaximumBatchSize: (_) => de_CapacitySizeConfig(_),
    });
};
const de_RollingUpdatePolicy = (output, context) => {
    return smithyClient.take(output, {
        MaximumBatchSize: (_) => de_CapacitySize(_),
        MaximumExecutionTimeoutInSeconds: smithyClient.expectInt32,
        RollbackMaximumBatchSize: (_) => de_CapacitySize(_),
        WaitIntervalInSeconds: smithyClient.expectInt32,
    });
};
const de_RSessionAppSettings = (output, context) => {
    return smithyClient.take(output, {
        CustomImages: (_) => de_CustomImages(_),
        DefaultResourceSpec: (_) => de_ResourceSpec(_),
    });
};
const de_RStudioServerProAppSettings = (output, context) => {
    return smithyClient.take(output, {
        AccessStatus: smithyClient.expectString,
        UserGroup: smithyClient.expectString,
    });
};
const de_RStudioServerProDomainSettings = (output, context) => {
    return smithyClient.take(output, {
        DefaultResourceSpec: (_) => de_ResourceSpec(_),
        DomainExecutionRoleArn: smithyClient.expectString,
        RStudioConnectUrl: smithyClient.expectString,
        RStudioPackageManagerUrl: smithyClient.expectString,
    });
};
const de_RuleParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_S3DataSource = (output, context) => {
    return smithyClient.take(output, {
        AttributeNames: (_) => de_AttributeNames(_),
        HubAccessConfig: (_) => de_HubAccessConfig(_),
        InstanceGroupNames: (_) => de_InstanceGroupNames(_),
        ModelAccessConfig: (_) => de_ModelAccessConfig(_),
        S3DataDistributionType: smithyClient.expectString,
        S3DataType: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_S3FileSystem = (output, context) => {
    return smithyClient.take(output, {
        S3Uri: smithyClient.expectString,
    });
};
const de_S3FileSystemConfig = (output, context) => {
    return smithyClient.take(output, {
        MountPath: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_S3ModelDataSource = (output, context) => {
    return smithyClient.take(output, {
        CompressionType: smithyClient.expectString,
        ETag: smithyClient.expectString,
        HubAccessConfig: (_) => de_InferenceHubAccessConfig(_),
        ManifestEtag: smithyClient.expectString,
        ManifestS3Uri: smithyClient.expectString,
        ModelAccessConfig: (_) => de_ModelAccessConfig(_),
        S3DataType: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_S3Presign = (output, context) => {
    return smithyClient.take(output, {
        IamPolicyConstraints: (_) => de_IamPolicyConstraints(_),
    });
};
const de_S3StorageConfig = (output, context) => {
    return smithyClient.take(output, {
        KmsKeyId: smithyClient.expectString,
        ResolvedOutputS3Uri: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_SageMakerImageVersionAliases = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_SageMakerResourceNames = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_ScalingPolicies = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ScalingPolicy(core$1.awsExpectUnion(entry));
    });
    return retVal;
};
const de_ScalingPolicy = (output, context) => {
    if (output.TargetTracking != null) {
        return {
            TargetTracking: de_TargetTrackingScalingPolicyConfiguration(output.TargetTracking),
        };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_ScalingPolicyMetric = (output, context) => {
    return smithyClient.take(output, {
        InvocationsPerInstance: smithyClient.expectInt32,
        ModelLatency: smithyClient.expectInt32,
    });
};
const de_ScalingPolicyObjective = (output, context) => {
    return smithyClient.take(output, {
        MaxInvocationsPerMinute: smithyClient.expectInt32,
        MinInvocationsPerMinute: smithyClient.expectInt32,
    });
};
const de_ScheduleConfig = (output, context) => {
    return smithyClient.take(output, {
        DataAnalysisEndTime: smithyClient.expectString,
        DataAnalysisStartTime: smithyClient.expectString,
        ScheduleExpression: smithyClient.expectString,
    });
};
const de_ScheduledUpdateConfig = (output, context) => {
    return smithyClient.take(output, {
        DeploymentConfig: (_) => de_DeploymentConfiguration(_),
        ScheduleExpression: smithyClient.expectString,
    });
};
const de_SchedulerConfig = (output, context) => {
    return smithyClient.take(output, {
        FairShare: smithyClient.expectString,
        PriorityClasses: (_) => de_PriorityClassList(_),
    });
};
const de_SearchRecord = (output, context) => {
    return smithyClient.take(output, {
        Endpoint: (_) => de_Endpoint(_),
        Experiment: (_) => de_Experiment(_),
        FeatureGroup: (_) => de_FeatureGroup(_),
        FeatureMetadata: (_) => de_FeatureMetadata(_),
        HyperParameterTuningJob: (_) => de_HyperParameterTuningJobSearchEntity(_),
        Model: (_) => de_ModelDashboardModel(_),
        ModelCard: (_) => de_ModelCard(_),
        ModelPackage: (_) => de_ModelPackage(_),
        ModelPackageGroup: (_) => de_ModelPackageGroup(_),
        Pipeline: (_) => de_Pipeline(_),
        PipelineExecution: (_) => de_PipelineExecution(_),
        PipelineVersion: (_) => de_PipelineVersion(_),
        Project: (_) => de_Project(_),
        TrainingJob: (_) => de_TrainingJob(_),
        Trial: (_) => de_Trial(_),
        TrialComponent: (_) => de_TrialComponent(_),
    });
};
const de_SearchResponse = (output, context) => {
    return smithyClient.take(output, {
        NextToken: smithyClient.expectString,
        Results: (_) => de_SearchResultsList(_),
        TotalHits: (_) => de_TotalHits(_),
    });
};
const de_SearchResultsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SearchRecord(entry);
    });
    return retVal;
};
const de_SearchTrainingPlanOfferingsResponse = (output, context) => {
    return smithyClient.take(output, {
        TrainingPlanOfferings: (_) => de_TrainingPlanOfferings(_),
    });
};
const de_SecondaryStatusTransition = (output, context) => {
    return smithyClient.take(output, {
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
    });
};
const de_SecondaryStatusTransitions = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SecondaryStatusTransition(entry);
    });
    return retVal;
};
const de_SecurityGroupIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_SelectedStep = (output, context) => {
    return smithyClient.take(output, {
        StepName: smithyClient.expectString,
    });
};
const de_SelectedStepList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SelectedStep(entry);
    });
    return retVal;
};
const de_SelectiveExecutionConfig = (output, context) => {
    return smithyClient.take(output, {
        SelectedSteps: (_) => de_SelectedStepList(_),
        SourcePipelineExecutionArn: smithyClient.expectString,
    });
};
const de_SelectiveExecutionResult = (output, context) => {
    return smithyClient.take(output, {
        SourcePipelineExecutionArn: smithyClient.expectString,
    });
};
const de_SendPipelineExecutionStepFailureResponse = (output, context) => {
    return smithyClient.take(output, {
        PipelineExecutionArn: smithyClient.expectString,
    });
};
const de_SendPipelineExecutionStepSuccessResponse = (output, context) => {
    return smithyClient.take(output, {
        PipelineExecutionArn: smithyClient.expectString,
    });
};
const de_ServiceCatalogProvisionedProductDetails = (output, context) => {
    return smithyClient.take(output, {
        ProvisionedProductId: smithyClient.expectString,
        ProvisionedProductStatusMessage: smithyClient.expectString,
    });
};
const de_ServiceCatalogProvisioningDetails = (output, context) => {
    return smithyClient.take(output, {
        PathId: smithyClient.expectString,
        ProductId: smithyClient.expectString,
        ProvisioningArtifactId: smithyClient.expectString,
        ProvisioningParameters: (_) => de_ProvisioningParameters(_),
    });
};
const de_ShadowModeConfig = (output, context) => {
    return smithyClient.take(output, {
        ShadowModelVariants: (_) => de_ShadowModelVariantConfigList(_),
        SourceModelVariantName: smithyClient.expectString,
    });
};
const de_ShadowModelVariantConfig = (output, context) => {
    return smithyClient.take(output, {
        SamplingPercentage: smithyClient.expectInt32,
        ShadowModelVariantName: smithyClient.expectString,
    });
};
const de_ShadowModelVariantConfigList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_ShadowModelVariantConfig(entry);
    });
    return retVal;
};
const de_SharingSettings = (output, context) => {
    return smithyClient.take(output, {
        NotebookOutputOption: smithyClient.expectString,
        S3KmsKeyId: smithyClient.expectString,
        S3OutputPath: smithyClient.expectString,
    });
};
const de_ShuffleConfig = (output, context) => {
    return smithyClient.take(output, {
        Seed: smithyClient.expectLong,
    });
};
const de_SourceAlgorithm = (output, context) => {
    return smithyClient.take(output, {
        AlgorithmName: smithyClient.expectString,
        ModelDataETag: smithyClient.expectString,
        ModelDataSource: (_) => de_ModelDataSource(_),
        ModelDataUrl: smithyClient.expectString,
    });
};
const de_SourceAlgorithmList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SourceAlgorithm(entry);
    });
    return retVal;
};
const de_SourceAlgorithmSpecification = (output, context) => {
    return smithyClient.take(output, {
        SourceAlgorithms: (_) => de_SourceAlgorithmList(_),
    });
};
const de_SourceIpConfig = (output, context) => {
    return smithyClient.take(output, {
        Cidrs: (_) => de_Cidrs(_),
    });
};
const de_SpaceAppLifecycleManagement = (output, context) => {
    return smithyClient.take(output, {
        IdleSettings: (_) => de_SpaceIdleSettings(_),
    });
};
const de_SpaceCodeEditorAppSettings = (output, context) => {
    return smithyClient.take(output, {
        AppLifecycleManagement: (_) => de_SpaceAppLifecycleManagement(_),
        DefaultResourceSpec: (_) => de_ResourceSpec(_),
    });
};
const de_SpaceDetails = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DomainId: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        OwnershipSettingsSummary: (_) => de_OwnershipSettingsSummary(_),
        SpaceDisplayName: smithyClient.expectString,
        SpaceName: smithyClient.expectString,
        SpaceSettingsSummary: (_) => de_SpaceSettingsSummary(_),
        SpaceSharingSettingsSummary: (_) => de_SpaceSharingSettingsSummary(_),
        Status: smithyClient.expectString,
    });
};
const de_SpaceIdleSettings = (output, context) => {
    return smithyClient.take(output, {
        IdleTimeoutInMinutes: smithyClient.expectInt32,
    });
};
const de_SpaceJupyterLabAppSettings = (output, context) => {
    return smithyClient.take(output, {
        AppLifecycleManagement: (_) => de_SpaceAppLifecycleManagement(_),
        CodeRepositories: (_) => de_CodeRepositories(_),
        DefaultResourceSpec: (_) => de_ResourceSpec(_),
    });
};
const de_SpaceList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SpaceDetails(entry);
    });
    return retVal;
};
const de_SpaceSettings = (output, context) => {
    return smithyClient.take(output, {
        AppType: smithyClient.expectString,
        CodeEditorAppSettings: (_) => de_SpaceCodeEditorAppSettings(_),
        CustomFileSystems: (_) => de_CustomFileSystems(_),
        JupyterLabAppSettings: (_) => de_SpaceJupyterLabAppSettings(_),
        JupyterServerAppSettings: (_) => de_JupyterServerAppSettings(_),
        KernelGatewayAppSettings: (_) => de_KernelGatewayAppSettings(_),
        RemoteAccess: smithyClient.expectString,
        SpaceManagedResources: smithyClient.expectString,
        SpaceStorageSettings: (_) => de_SpaceStorageSettings(_),
    });
};
const de_SpaceSettingsSummary = (output, context) => {
    return smithyClient.take(output, {
        AppType: smithyClient.expectString,
        RemoteAccess: smithyClient.expectString,
        SpaceStorageSettings: (_) => de_SpaceStorageSettings(_),
    });
};
const de_SpaceSharingSettings = (output, context) => {
    return smithyClient.take(output, {
        SharingType: smithyClient.expectString,
    });
};
const de_SpaceSharingSettingsSummary = (output, context) => {
    return smithyClient.take(output, {
        SharingType: smithyClient.expectString,
    });
};
const de_SpaceStorageSettings = (output, context) => {
    return smithyClient.take(output, {
        EbsStorageSettings: (_) => de_EbsStorageSettings(_),
    });
};
const de_Stairs = (output, context) => {
    return smithyClient.take(output, {
        DurationInSeconds: smithyClient.expectInt32,
        NumberOfSteps: smithyClient.expectInt32,
        UsersPerStep: smithyClient.expectInt32,
    });
};
const de_StartInferenceExperimentResponse = (output, context) => {
    return smithyClient.take(output, {
        InferenceExperimentArn: smithyClient.expectString,
    });
};
const de_StartMlflowTrackingServerResponse = (output, context) => {
    return smithyClient.take(output, {
        TrackingServerArn: smithyClient.expectString,
    });
};
const de_StartPipelineExecutionResponse = (output, context) => {
    return smithyClient.take(output, {
        PipelineExecutionArn: smithyClient.expectString,
    });
};
const de_StartSessionResponse = (output, context) => {
    return smithyClient.take(output, {
        SessionId: smithyClient.expectString,
        StreamUrl: smithyClient.expectString,
        TokenValue: smithyClient.expectString,
    });
};
const de_StopInferenceExperimentResponse = (output, context) => {
    return smithyClient.take(output, {
        InferenceExperimentArn: smithyClient.expectString,
    });
};
const de_StopMlflowTrackingServerResponse = (output, context) => {
    return smithyClient.take(output, {
        TrackingServerArn: smithyClient.expectString,
    });
};
const de_StoppingCondition = (output, context) => {
    return smithyClient.take(output, {
        MaxPendingTimeInSeconds: smithyClient.expectInt32,
        MaxRuntimeInSeconds: smithyClient.expectInt32,
        MaxWaitTimeInSeconds: smithyClient.expectInt32,
    });
};
const de_StopPipelineExecutionResponse = (output, context) => {
    return smithyClient.take(output, {
        PipelineExecutionArn: smithyClient.expectString,
    });
};
const de_StudioLifecycleConfigDetails = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        StudioLifecycleConfigAppType: smithyClient.expectString,
        StudioLifecycleConfigArn: smithyClient.expectString,
        StudioLifecycleConfigName: smithyClient.expectString,
    });
};
const de_StudioLifecycleConfigsList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_StudioLifecycleConfigDetails(entry);
    });
    return retVal;
};
const de_StudioWebPortalSettings = (output, context) => {
    return smithyClient.take(output, {
        HiddenAppTypes: (_) => de_HiddenAppTypesList(_),
        HiddenInstanceTypes: (_) => de_HiddenInstanceTypesList(_),
        HiddenMlTools: (_) => de_HiddenMlToolsList(_),
        HiddenSageMakerImageVersionAliases: (_) => de_HiddenSageMakerImageVersionAliasesList(_),
    });
};
const de_Subnets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_SubscribedWorkteam = (output, context) => {
    return smithyClient.take(output, {
        ListingId: smithyClient.expectString,
        MarketplaceDescription: smithyClient.expectString,
        MarketplaceTitle: smithyClient.expectString,
        SellerName: smithyClient.expectString,
        WorkteamArn: smithyClient.expectString,
    });
};
const de_SubscribedWorkteams = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_SubscribedWorkteam(entry);
    });
    return retVal;
};
const de_TabularJobConfig = (output, context) => {
    return smithyClient.take(output, {
        CandidateGenerationConfig: (_) => de_CandidateGenerationConfig(_),
        CompletionCriteria: (_) => de_AutoMLJobCompletionCriteria(_),
        FeatureSpecificationS3Uri: smithyClient.expectString,
        GenerateCandidateDefinitionsOnly: smithyClient.expectBoolean,
        Mode: smithyClient.expectString,
        ProblemType: smithyClient.expectString,
        SampleWeightAttributeName: smithyClient.expectString,
        TargetAttributeName: smithyClient.expectString,
    });
};
const de_TabularResolvedAttributes = (output, context) => {
    return smithyClient.take(output, {
        ProblemType: smithyClient.expectString,
    });
};
const de_Tag = (output, context) => {
    return smithyClient.take(output, {
        Key: smithyClient.expectString,
        Value: smithyClient.expectString,
    });
};
const de_TagList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Tag(entry);
    });
    return retVal;
};
const de_TargetPlatform = (output, context) => {
    return smithyClient.take(output, {
        Accelerator: smithyClient.expectString,
        Arch: smithyClient.expectString,
        Os: smithyClient.expectString,
    });
};
const de_TargetTrackingScalingPolicyConfiguration = (output, context) => {
    return smithyClient.take(output, {
        MetricSpecification: (_) => de_MetricSpecification(core$1.awsExpectUnion(_)),
        TargetValue: smithyClient.limitedParseDouble,
    });
};
const de_TaskKeywords = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_TemplateProviderDetail = (output, context) => {
    return smithyClient.take(output, {
        CfnTemplateProviderDetail: (_) => de_CfnTemplateProviderDetail(_),
    });
};
const de_TemplateProviderDetailList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TemplateProviderDetail(entry);
    });
    return retVal;
};
const de_TensorBoardAppSettings = (output, context) => {
    return smithyClient.take(output, {
        DefaultResourceSpec: (_) => de_ResourceSpec(_),
    });
};
const de_TensorBoardOutputConfig = (output, context) => {
    return smithyClient.take(output, {
        LocalPath: smithyClient.expectString,
        S3OutputPath: smithyClient.expectString,
    });
};
const de_TextClassificationJobConfig = (output, context) => {
    return smithyClient.take(output, {
        CompletionCriteria: (_) => de_AutoMLJobCompletionCriteria(_),
        ContentColumn: smithyClient.expectString,
        TargetLabelColumn: smithyClient.expectString,
    });
};
const de_TextGenerationHyperParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_TextGenerationJobConfig = (output, context) => {
    return smithyClient.take(output, {
        BaseModelName: smithyClient.expectString,
        CompletionCriteria: (_) => de_AutoMLJobCompletionCriteria(_),
        ModelAccessConfig: (_) => de_ModelAccessConfig(_),
        TextGenerationHyperParameters: (_) => de_TextGenerationHyperParameters(_),
    });
};
const de_TextGenerationResolvedAttributes = (output, context) => {
    return smithyClient.take(output, {
        BaseModelName: smithyClient.expectString,
    });
};
const de_ThroughputConfigDescription = (output, context) => {
    return smithyClient.take(output, {
        ProvisionedReadCapacityUnits: smithyClient.expectInt32,
        ProvisionedWriteCapacityUnits: smithyClient.expectInt32,
        ThroughputMode: smithyClient.expectString,
    });
};
const de_TimeSeriesConfig = (output, context) => {
    return smithyClient.take(output, {
        GroupingAttributeNames: (_) => de_GroupingAttributeNames(_),
        ItemIdentifierAttributeName: smithyClient.expectString,
        TargetAttributeName: smithyClient.expectString,
        TimestampAttributeName: smithyClient.expectString,
    });
};
const de_TimeSeriesForecastingJobConfig = (output, context) => {
    return smithyClient.take(output, {
        CandidateGenerationConfig: (_) => de_CandidateGenerationConfig(_),
        CompletionCriteria: (_) => de_AutoMLJobCompletionCriteria(_),
        FeatureSpecificationS3Uri: smithyClient.expectString,
        ForecastFrequency: smithyClient.expectString,
        ForecastHorizon: smithyClient.expectInt32,
        ForecastQuantiles: (_) => de_ForecastQuantiles(_),
        HolidayConfig: (_) => de_HolidayConfig(_),
        TimeSeriesConfig: (_) => de_TimeSeriesConfig(_),
        Transformations: (_) => de_TimeSeriesTransformations(_),
    });
};
const de_TimeSeriesForecastingSettings = (output, context) => {
    return smithyClient.take(output, {
        AmazonForecastRoleArn: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_TimeSeriesTransformations = (output, context) => {
    return smithyClient.take(output, {
        Aggregation: (_) => de_AggregationTransformations(_),
        Filling: (_) => de_FillingTransformations(_),
    });
};
const de_TotalHits = (output, context) => {
    return smithyClient.take(output, {
        Relation: smithyClient.expectString,
        Value: smithyClient.expectLong,
    });
};
const de_TrackingServerSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        IsActive: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MlflowVersion: smithyClient.expectString,
        TrackingServerArn: smithyClient.expectString,
        TrackingServerName: smithyClient.expectString,
        TrackingServerStatus: smithyClient.expectString,
    });
};
const de_TrackingServerSummaryList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrackingServerSummary(entry);
    });
    return retVal;
};
const de_TrafficPattern = (output, context) => {
    return smithyClient.take(output, {
        Phases: (_) => de_Phases(_),
        Stairs: (_) => de_Stairs(_),
        TrafficType: smithyClient.expectString,
    });
};
const de_TrafficRoutingConfig = (output, context) => {
    return smithyClient.take(output, {
        CanarySize: (_) => de_CapacitySize(_),
        LinearStepSize: (_) => de_CapacitySize(_),
        Type: smithyClient.expectString,
        WaitIntervalInSeconds: smithyClient.expectInt32,
    });
};
const de_TrainingContainerArguments = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_TrainingContainerEntrypoint = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_TrainingEnvironmentMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_TrainingImageConfig = (output, context) => {
    return smithyClient.take(output, {
        TrainingRepositoryAccessMode: smithyClient.expectString,
        TrainingRepositoryAuthConfig: (_) => de_TrainingRepositoryAuthConfig(_),
    });
};
const de_TrainingInstanceTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_TrainingJob = (output, context) => {
    return smithyClient.take(output, {
        AlgorithmSpecification: (_) => de_AlgorithmSpecification(_),
        AutoMLJobArn: smithyClient.expectString,
        BillableTimeInSeconds: smithyClient.expectInt32,
        CheckpointConfig: (_) => de_CheckpointConfig(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DebugHookConfig: (_) => de_DebugHookConfig(_),
        DebugRuleConfigurations: (_) => de_DebugRuleConfigurations(_),
        DebugRuleEvaluationStatuses: (_) => de_DebugRuleEvaluationStatuses(_),
        EnableInterContainerTrafficEncryption: smithyClient.expectBoolean,
        EnableManagedSpotTraining: smithyClient.expectBoolean,
        EnableNetworkIsolation: smithyClient.expectBoolean,
        Environment: (_) => de_TrainingEnvironmentMap(_),
        ExperimentConfig: (_) => de_ExperimentConfig(_),
        FailureReason: smithyClient.expectString,
        FinalMetricDataList: (_) => de_FinalMetricDataList(_),
        HyperParameters: (_) => de_HyperParameters(_),
        InputDataConfig: (_) => de_InputDataConfig(_),
        LabelingJobArn: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ModelArtifacts: (_) => de_ModelArtifacts(_),
        OutputDataConfig: (_) => de_OutputDataConfig(_),
        ProfilerConfig: (_) => de_ProfilerConfig(_),
        ResourceConfig: (_) => de_ResourceConfig(_),
        RetryStrategy: (_) => de_RetryStrategy(_),
        RoleArn: smithyClient.expectString,
        SecondaryStatus: smithyClient.expectString,
        SecondaryStatusTransitions: (_) => de_SecondaryStatusTransitions(_),
        StoppingCondition: (_) => de_StoppingCondition(_),
        Tags: (_) => de_TagList(_),
        TensorBoardOutputConfig: (_) => de_TensorBoardOutputConfig(_),
        TrainingEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TrainingJobArn: smithyClient.expectString,
        TrainingJobName: smithyClient.expectString,
        TrainingJobStatus: smithyClient.expectString,
        TrainingStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TrainingTimeInSeconds: smithyClient.expectInt32,
        TuningJobArn: smithyClient.expectString,
        VpcConfig: (_) => de_VpcConfig(_),
    });
};
const de_TrainingJobDefinition = (output, context) => {
    return smithyClient.take(output, {
        HyperParameters: (_) => de_HyperParameters(_),
        InputDataConfig: (_) => de_InputDataConfig(_),
        OutputDataConfig: (_) => de_OutputDataConfig(_),
        ResourceConfig: (_) => de_ResourceConfig(_),
        StoppingCondition: (_) => de_StoppingCondition(_),
        TrainingInputMode: smithyClient.expectString,
    });
};
const de_TrainingJobStatusCounters = (output, context) => {
    return smithyClient.take(output, {
        Completed: smithyClient.expectInt32,
        InProgress: smithyClient.expectInt32,
        NonRetryableError: smithyClient.expectInt32,
        RetryableError: smithyClient.expectInt32,
        Stopped: smithyClient.expectInt32,
    });
};
const de_TrainingJobStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
    });
};
const de_TrainingJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrainingJobSummary(entry);
    });
    return retVal;
};
const de_TrainingJobSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        SecondaryStatus: smithyClient.expectString,
        TrainingEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TrainingJobArn: smithyClient.expectString,
        TrainingJobName: smithyClient.expectString,
        TrainingJobStatus: smithyClient.expectString,
        TrainingPlanArn: smithyClient.expectString,
        WarmPoolStatus: (_) => de_WarmPoolStatus(_),
    });
};
const de_TrainingPlanArns = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_TrainingPlanOffering = (output, context) => {
    return smithyClient.take(output, {
        CurrencyCode: smithyClient.expectString,
        DurationHours: smithyClient.expectLong,
        DurationMinutes: smithyClient.expectLong,
        RequestedEndTimeBefore: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        RequestedStartTimeAfter: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        ReservedCapacityOfferings: (_) => de_ReservedCapacityOfferings(_),
        TargetResources: (_) => de_SageMakerResourceNames(_),
        TrainingPlanOfferingId: smithyClient.expectString,
        UpfrontFee: smithyClient.expectString,
    });
};
const de_TrainingPlanOfferings = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrainingPlanOffering(entry);
    });
    return retVal;
};
const de_TrainingPlanSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrainingPlanSummary(entry);
    });
    return retVal;
};
const de_TrainingPlanSummary = (output, context) => {
    return smithyClient.take(output, {
        AvailableInstanceCount: smithyClient.expectInt32,
        CurrencyCode: smithyClient.expectString,
        DurationHours: smithyClient.expectLong,
        DurationMinutes: smithyClient.expectLong,
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InUseInstanceCount: smithyClient.expectInt32,
        ReservedCapacitySummaries: (_) => de_ReservedCapacitySummaries(_),
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: smithyClient.expectString,
        StatusMessage: smithyClient.expectString,
        TargetResources: (_) => de_SageMakerResourceNames(_),
        TotalInstanceCount: smithyClient.expectInt32,
        TotalUltraServerCount: smithyClient.expectInt32,
        TrainingPlanArn: smithyClient.expectString,
        TrainingPlanName: smithyClient.expectString,
        UpfrontFee: smithyClient.expectString,
    });
};
const de_TrainingRepositoryAuthConfig = (output, context) => {
    return smithyClient.take(output, {
        TrainingRepositoryCredentialsProviderArn: smithyClient.expectString,
    });
};
const de_TrainingSpecification = (output, context) => {
    return smithyClient.take(output, {
        AdditionalS3DataSource: (_) => de_AdditionalS3DataSource(_),
        MetricDefinitions: (_) => de_MetricDefinitionList(_),
        SupportedHyperParameters: (_) => de_HyperParameterSpecifications(_),
        SupportedTrainingInstanceTypes: (_) => de_TrainingInstanceTypes(_),
        SupportedTuningJobObjectiveMetrics: (_) => de_HyperParameterTuningJobObjectives(_),
        SupportsDistributedTraining: smithyClient.expectBoolean,
        TrainingChannels: (_) => de_ChannelSpecifications(_),
        TrainingImage: smithyClient.expectString,
        TrainingImageDigest: smithyClient.expectString,
    });
};
const de_TransformDataSource = (output, context) => {
    return smithyClient.take(output, {
        S3DataSource: (_) => de_TransformS3DataSource(_),
    });
};
const de_TransformEnvironmentMap = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = smithyClient.expectString(value);
        return acc;
    }, {});
};
const de_TransformInput = (output, context) => {
    return smithyClient.take(output, {
        CompressionType: smithyClient.expectString,
        ContentType: smithyClient.expectString,
        DataSource: (_) => de_TransformDataSource(_),
        SplitType: smithyClient.expectString,
    });
};
const de_TransformInstanceTypes = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_TransformJob = (output, context) => {
    return smithyClient.take(output, {
        AutoMLJobArn: smithyClient.expectString,
        BatchStrategy: smithyClient.expectString,
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DataCaptureConfig: (_) => de_BatchDataCaptureConfig(_),
        DataProcessing: (_) => de_DataProcessing(_),
        Environment: (_) => de_TransformEnvironmentMap(_),
        ExperimentConfig: (_) => de_ExperimentConfig(_),
        FailureReason: smithyClient.expectString,
        LabelingJobArn: smithyClient.expectString,
        MaxConcurrentTransforms: smithyClient.expectInt32,
        MaxPayloadInMB: smithyClient.expectInt32,
        ModelClientConfig: (_) => de_ModelClientConfig(_),
        ModelName: smithyClient.expectString,
        Tags: (_) => de_TagList(_),
        TransformEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TransformInput: (_) => de_TransformInput(_),
        TransformJobArn: smithyClient.expectString,
        TransformJobName: smithyClient.expectString,
        TransformJobStatus: smithyClient.expectString,
        TransformOutput: (_) => de_TransformOutput(_),
        TransformResources: (_) => de_TransformResources(_),
        TransformStartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_TransformJobDefinition = (output, context) => {
    return smithyClient.take(output, {
        BatchStrategy: smithyClient.expectString,
        Environment: (_) => de_TransformEnvironmentMap(_),
        MaxConcurrentTransforms: smithyClient.expectInt32,
        MaxPayloadInMB: smithyClient.expectInt32,
        TransformInput: (_) => de_TransformInput(_),
        TransformOutput: (_) => de_TransformOutput(_),
        TransformResources: (_) => de_TransformResources(_),
    });
};
const de_TransformJobStepMetadata = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
    });
};
const de_TransformJobSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TransformJobSummary(entry);
    });
    return retVal;
};
const de_TransformJobSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TransformEndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TransformJobArn: smithyClient.expectString,
        TransformJobName: smithyClient.expectString,
        TransformJobStatus: smithyClient.expectString,
    });
};
const de_TransformOutput = (output, context) => {
    return smithyClient.take(output, {
        Accept: smithyClient.expectString,
        AssembleWith: smithyClient.expectString,
        KmsKeyId: smithyClient.expectString,
        S3OutputPath: smithyClient.expectString,
    });
};
const de_TransformResources = (output, context) => {
    return smithyClient.take(output, {
        InstanceCount: smithyClient.expectInt32,
        InstanceType: smithyClient.expectString,
        TransformAmiVersion: smithyClient.expectString,
        VolumeKmsKeyId: smithyClient.expectString,
    });
};
const de_TransformS3DataSource = (output, context) => {
    return smithyClient.take(output, {
        S3DataType: smithyClient.expectString,
        S3Uri: smithyClient.expectString,
    });
};
const de_Trial = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DisplayName: smithyClient.expectString,
        ExperimentName: smithyClient.expectString,
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MetadataProperties: (_) => de_MetadataProperties(_),
        Source: (_) => de_TrialSource(_),
        Tags: (_) => de_TagList(_),
        TrialArn: smithyClient.expectString,
        TrialComponentSummaries: (_) => de_TrialComponentSimpleSummaries(_),
        TrialName: smithyClient.expectString,
    });
};
const de_TrialComponent = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DisplayName: smithyClient.expectString,
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        InputArtifacts: (_) => de_TrialComponentArtifacts(_),
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LineageGroupArn: smithyClient.expectString,
        MetadataProperties: (_) => de_MetadataProperties(_),
        Metrics: (_) => de_TrialComponentMetricSummaries(_),
        OutputArtifacts: (_) => de_TrialComponentArtifacts(_),
        Parameters: (_) => de_TrialComponentParameters(_),
        Parents: (_) => de_Parents(_),
        RunName: smithyClient.expectString,
        Source: (_) => de_TrialComponentSource(_),
        SourceDetail: (_) => de_TrialComponentSourceDetail(_),
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: (_) => de_TrialComponentStatus(_),
        Tags: (_) => de_TagList(_),
        TrialComponentArn: smithyClient.expectString,
        TrialComponentName: smithyClient.expectString,
    });
};
const de_TrialComponentArtifact = (output, context) => {
    return smithyClient.take(output, {
        MediaType: smithyClient.expectString,
        Value: smithyClient.expectString,
    });
};
const de_TrialComponentArtifacts = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_TrialComponentArtifact(value);
        return acc;
    }, {});
};
const de_TrialComponentMetricSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrialComponentMetricSummary(entry);
    });
    return retVal;
};
const de_TrialComponentMetricSummary = (output, context) => {
    return smithyClient.take(output, {
        Avg: smithyClient.limitedParseDouble,
        Count: smithyClient.expectInt32,
        Last: smithyClient.limitedParseDouble,
        Max: smithyClient.limitedParseDouble,
        MetricName: smithyClient.expectString,
        Min: smithyClient.limitedParseDouble,
        SourceArn: smithyClient.expectString,
        StdDev: smithyClient.limitedParseDouble,
        TimeStamp: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
    });
};
const de_TrialComponentParameters = (output, context) => {
    return Object.entries(output).reduce((acc, [key, value]) => {
        if (value === null) {
            return acc;
        }
        acc[key] = de_TrialComponentParameterValue(core$1.awsExpectUnion(value));
        return acc;
    }, {});
};
const de_TrialComponentParameterValue = (output, context) => {
    if (smithyClient.limitedParseDouble(output.NumberValue) !== undefined) {
        return { NumberValue: smithyClient.limitedParseDouble(output.NumberValue) };
    }
    if (smithyClient.expectString(output.StringValue) !== undefined) {
        return { StringValue: smithyClient.expectString(output.StringValue) };
    }
    return { $unknown: Object.entries(output)[0] };
};
const de_TrialComponentSimpleSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrialComponentSimpleSummary(entry);
    });
    return retVal;
};
const de_TrialComponentSimpleSummary = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TrialComponentArn: smithyClient.expectString,
        TrialComponentName: smithyClient.expectString,
        TrialComponentSource: (_) => de_TrialComponentSource(_),
    });
};
const de_TrialComponentSource = (output, context) => {
    return smithyClient.take(output, {
        SourceArn: smithyClient.expectString,
        SourceType: smithyClient.expectString,
    });
};
const de_TrialComponentSourceDetail = (output, context) => {
    return smithyClient.take(output, {
        ProcessingJob: (_) => de_ProcessingJob(_),
        SourceArn: smithyClient.expectString,
        TrainingJob: (_) => de_TrainingJob(_),
        TransformJob: (_) => de_TransformJob(_),
    });
};
const de_TrialComponentSources = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrialComponentSource(entry);
    });
    return retVal;
};
const de_TrialComponentStatus = (output, context) => {
    return smithyClient.take(output, {
        Message: smithyClient.expectString,
        PrimaryStatus: smithyClient.expectString,
    });
};
const de_TrialComponentSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrialComponentSummary(entry);
    });
    return retVal;
};
const de_TrialComponentSummary = (output, context) => {
    return smithyClient.take(output, {
        CreatedBy: (_) => de_UserContext(_),
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DisplayName: smithyClient.expectString,
        EndTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        LastModifiedBy: (_) => de_UserContext(_),
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        StartTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: (_) => de_TrialComponentStatus(_),
        TrialComponentArn: smithyClient.expectString,
        TrialComponentName: smithyClient.expectString,
        TrialComponentSource: (_) => de_TrialComponentSource(_),
    });
};
const de_TrialSource = (output, context) => {
    return smithyClient.take(output, {
        SourceArn: smithyClient.expectString,
        SourceType: smithyClient.expectString,
    });
};
const de_TrialSummaries = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_TrialSummary(entry);
    });
    return retVal;
};
const de_TrialSummary = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DisplayName: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        TrialArn: smithyClient.expectString,
        TrialName: smithyClient.expectString,
        TrialSource: (_) => de_TrialSource(_),
    });
};
const de_TrustedIdentityPropagationSettings = (output, context) => {
    return smithyClient.take(output, {
        Status: smithyClient.expectString,
    });
};
const de_TtlDuration = (output, context) => {
    return smithyClient.take(output, {
        Unit: smithyClient.expectString,
        Value: smithyClient.expectInt32,
    });
};
const de_TuningJobCompletionCriteria = (output, context) => {
    return smithyClient.take(output, {
        BestObjectiveNotImproving: (_) => de_BestObjectiveNotImproving(_),
        ConvergenceDetected: (_) => de_ConvergenceDetected(_),
        TargetObjectiveMetricValue: smithyClient.limitedParseFloat32,
    });
};
const de_TuningJobStepMetaData = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
    });
};
const de_UiConfig = (output, context) => {
    return smithyClient.take(output, {
        HumanTaskUiArn: smithyClient.expectString,
        UiTemplateS3Uri: smithyClient.expectString,
    });
};
const de_UiTemplateInfo = (output, context) => {
    return smithyClient.take(output, {
        ContentSha256: smithyClient.expectString,
        Url: smithyClient.expectString,
    });
};
const de_UltraServer = (output, context) => {
    return smithyClient.take(output, {
        AvailabilityZone: smithyClient.expectString,
        AvailableInstanceCount: smithyClient.expectInt32,
        AvailableSpareInstanceCount: smithyClient.expectInt32,
        ConfiguredSpareInstanceCount: smithyClient.expectInt32,
        HealthStatus: smithyClient.expectString,
        InUseInstanceCount: smithyClient.expectInt32,
        InstanceType: smithyClient.expectString,
        TotalInstanceCount: smithyClient.expectInt32,
        UltraServerId: smithyClient.expectString,
        UltraServerType: smithyClient.expectString,
        UnhealthyInstanceCount: smithyClient.expectInt32,
    });
};
const de_UltraServerInfo = (output, context) => {
    return smithyClient.take(output, {
        Id: smithyClient.expectString,
    });
};
const de_UltraServers = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UltraServer(entry);
    });
    return retVal;
};
const de_UltraServerSummary = (output, context) => {
    return smithyClient.take(output, {
        AvailableSpareInstanceCount: smithyClient.expectInt32,
        InstanceType: smithyClient.expectString,
        UltraServerCount: smithyClient.expectInt32,
        UltraServerType: smithyClient.expectString,
        UnhealthyInstanceCount: smithyClient.expectInt32,
    });
};
const de_UnifiedStudioSettings = (output, context) => {
    return smithyClient.take(output, {
        DomainAccountId: smithyClient.expectString,
        DomainId: smithyClient.expectString,
        DomainRegion: smithyClient.expectString,
        EnvironmentId: smithyClient.expectString,
        ProjectId: smithyClient.expectString,
        ProjectS3Path: smithyClient.expectString,
        SingleSignOnApplicationArn: smithyClient.expectString,
        StudioWebPortalAccess: smithyClient.expectString,
    });
};
const de_UpdateActionResponse = (output, context) => {
    return smithyClient.take(output, {
        ActionArn: smithyClient.expectString,
    });
};
const de_UpdateAppImageConfigResponse = (output, context) => {
    return smithyClient.take(output, {
        AppImageConfigArn: smithyClient.expectString,
    });
};
const de_UpdateArtifactResponse = (output, context) => {
    return smithyClient.take(output, {
        ArtifactArn: smithyClient.expectString,
    });
};
const de_UpdateClusterResponse = (output, context) => {
    return smithyClient.take(output, {
        ClusterArn: smithyClient.expectString,
    });
};
const de_UpdateClusterSchedulerConfigResponse = (output, context) => {
    return smithyClient.take(output, {
        ClusterSchedulerConfigArn: smithyClient.expectString,
        ClusterSchedulerConfigVersion: smithyClient.expectInt32,
    });
};
const de_UpdateClusterSoftwareResponse = (output, context) => {
    return smithyClient.take(output, {
        ClusterArn: smithyClient.expectString,
    });
};
const de_UpdateCodeRepositoryOutput = (output, context) => {
    return smithyClient.take(output, {
        CodeRepositoryArn: smithyClient.expectString,
    });
};
const de_UpdateComputeQuotaResponse = (output, context) => {
    return smithyClient.take(output, {
        ComputeQuotaArn: smithyClient.expectString,
        ComputeQuotaVersion: smithyClient.expectInt32,
    });
};
const de_UpdateContextResponse = (output, context) => {
    return smithyClient.take(output, {
        ContextArn: smithyClient.expectString,
    });
};
const de_UpdateDomainResponse = (output, context) => {
    return smithyClient.take(output, {
        DomainArn: smithyClient.expectString,
    });
};
const de_UpdateEndpointOutput = (output, context) => {
    return smithyClient.take(output, {
        EndpointArn: smithyClient.expectString,
    });
};
const de_UpdateEndpointWeightsAndCapacitiesOutput = (output, context) => {
    return smithyClient.take(output, {
        EndpointArn: smithyClient.expectString,
    });
};
const de_UpdateExperimentResponse = (output, context) => {
    return smithyClient.take(output, {
        ExperimentArn: smithyClient.expectString,
    });
};
const de_UpdateFeatureGroupResponse = (output, context) => {
    return smithyClient.take(output, {
        FeatureGroupArn: smithyClient.expectString,
    });
};
const de_UpdateHubContentReferenceResponse = (output, context) => {
    return smithyClient.take(output, {
        HubArn: smithyClient.expectString,
        HubContentArn: smithyClient.expectString,
    });
};
const de_UpdateHubContentResponse = (output, context) => {
    return smithyClient.take(output, {
        HubArn: smithyClient.expectString,
        HubContentArn: smithyClient.expectString,
    });
};
const de_UpdateHubResponse = (output, context) => {
    return smithyClient.take(output, {
        HubArn: smithyClient.expectString,
    });
};
const de_UpdateImageResponse = (output, context) => {
    return smithyClient.take(output, {
        ImageArn: smithyClient.expectString,
    });
};
const de_UpdateImageVersionResponse = (output, context) => {
    return smithyClient.take(output, {
        ImageVersionArn: smithyClient.expectString,
    });
};
const de_UpdateInferenceComponentOutput = (output, context) => {
    return smithyClient.take(output, {
        InferenceComponentArn: smithyClient.expectString,
    });
};
const de_UpdateInferenceComponentRuntimeConfigOutput = (output, context) => {
    return smithyClient.take(output, {
        InferenceComponentArn: smithyClient.expectString,
    });
};
const de_UpdateInferenceExperimentResponse = (output, context) => {
    return smithyClient.take(output, {
        InferenceExperimentArn: smithyClient.expectString,
    });
};
const de_UpdateMlflowTrackingServerResponse = (output, context) => {
    return smithyClient.take(output, {
        TrackingServerArn: smithyClient.expectString,
    });
};
const de_UpdateModelCardResponse = (output, context) => {
    return smithyClient.take(output, {
        ModelCardArn: smithyClient.expectString,
    });
};
const de_UpdateModelPackageOutput = (output, context) => {
    return smithyClient.take(output, {
        ModelPackageArn: smithyClient.expectString,
    });
};
const de_UpdateMonitoringAlertResponse = (output, context) => {
    return smithyClient.take(output, {
        MonitoringAlertName: smithyClient.expectString,
        MonitoringScheduleArn: smithyClient.expectString,
    });
};
const de_UpdateMonitoringScheduleResponse = (output, context) => {
    return smithyClient.take(output, {
        MonitoringScheduleArn: smithyClient.expectString,
    });
};
const de_UpdateNotebookInstanceLifecycleConfigOutput = (output, context) => {
    return smithyClient.take(output, {});
};
const de_UpdateNotebookInstanceOutput = (output, context) => {
    return smithyClient.take(output, {});
};
const de_UpdatePartnerAppResponse = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
    });
};
const de_UpdatePipelineExecutionResponse = (output, context) => {
    return smithyClient.take(output, {
        PipelineExecutionArn: smithyClient.expectString,
    });
};
const de_UpdatePipelineResponse = (output, context) => {
    return smithyClient.take(output, {
        PipelineArn: smithyClient.expectString,
        PipelineVersionId: smithyClient.expectLong,
    });
};
const de_UpdatePipelineVersionResponse = (output, context) => {
    return smithyClient.take(output, {
        PipelineArn: smithyClient.expectString,
        PipelineVersionId: smithyClient.expectLong,
    });
};
const de_UpdateProjectOutput = (output, context) => {
    return smithyClient.take(output, {
        ProjectArn: smithyClient.expectString,
    });
};
const de_UpdateSpaceResponse = (output, context) => {
    return smithyClient.take(output, {
        SpaceArn: smithyClient.expectString,
    });
};
const de_UpdateTrainingJobResponse = (output, context) => {
    return smithyClient.take(output, {
        TrainingJobArn: smithyClient.expectString,
    });
};
const de_UpdateTrialComponentResponse = (output, context) => {
    return smithyClient.take(output, {
        TrialComponentArn: smithyClient.expectString,
    });
};
const de_UpdateTrialResponse = (output, context) => {
    return smithyClient.take(output, {
        TrialArn: smithyClient.expectString,
    });
};
const de_UpdateUserProfileResponse = (output, context) => {
    return smithyClient.take(output, {
        UserProfileArn: smithyClient.expectString,
    });
};
const de_UpdateWorkforceResponse = (output, context) => {
    return smithyClient.take(output, {
        Workforce: (_) => de_Workforce(_),
    });
};
const de_UpdateWorkteamResponse = (output, context) => {
    return smithyClient.take(output, {
        Workteam: (_) => de_Workteam(_),
    });
};
const de_USD = (output, context) => {
    return smithyClient.take(output, {
        Cents: smithyClient.expectInt32,
        Dollars: smithyClient.expectInt32,
        TenthFractionsOfACent: smithyClient.expectInt32,
    });
};
const de_UserContext = (output, context) => {
    return smithyClient.take(output, {
        DomainId: smithyClient.expectString,
        IamIdentity: (_) => de_IamIdentity(_),
        UserProfileArn: smithyClient.expectString,
        UserProfileName: smithyClient.expectString,
    });
};
const de_UserProfileDetails = (output, context) => {
    return smithyClient.take(output, {
        CreationTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        DomainId: smithyClient.expectString,
        LastModifiedTime: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Status: smithyClient.expectString,
        UserProfileName: smithyClient.expectString,
    });
};
const de_UserProfileList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_UserProfileDetails(entry);
    });
    return retVal;
};
const de_UserSettings = (output, context) => {
    return smithyClient.take(output, {
        AutoMountHomeEFS: smithyClient.expectString,
        CanvasAppSettings: (_) => de_CanvasAppSettings(_),
        CodeEditorAppSettings: (_) => de_CodeEditorAppSettings(_),
        CustomFileSystemConfigs: (_) => de_CustomFileSystemConfigs(_),
        CustomPosixUserConfig: (_) => de_CustomPosixUserConfig(_),
        DefaultLandingUri: smithyClient.expectString,
        ExecutionRole: smithyClient.expectString,
        JupyterLabAppSettings: (_) => de_JupyterLabAppSettings(_),
        JupyterServerAppSettings: (_) => de_JupyterServerAppSettings(_),
        KernelGatewayAppSettings: (_) => de_KernelGatewayAppSettings(_),
        RSessionAppSettings: (_) => de_RSessionAppSettings(_),
        RStudioServerProAppSettings: (_) => de_RStudioServerProAppSettings(_),
        SecurityGroups: (_) => de_SecurityGroupIds(_),
        SharingSettings: (_) => de_SharingSettings(_),
        SpaceStorageSettings: (_) => de_DefaultSpaceStorageSettings(_),
        StudioWebPortal: smithyClient.expectString,
        StudioWebPortalSettings: (_) => de_StudioWebPortalSettings(_),
        TensorBoardAppSettings: (_) => de_TensorBoardAppSettings(_),
    });
};
const de_VectorConfig = (output, context) => {
    return smithyClient.take(output, {
        Dimension: smithyClient.expectInt32,
    });
};
const de_VersionAliasesList = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_Vertex = (output, context) => {
    return smithyClient.take(output, {
        Arn: smithyClient.expectString,
        LineageType: smithyClient.expectString,
        Type: smithyClient.expectString,
    });
};
const de_Vertices = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Vertex(entry);
    });
    return retVal;
};
const de_VpcConfig = (output, context) => {
    return smithyClient.take(output, {
        SecurityGroupIds: (_) => de_VpcSecurityGroupIds(_),
        Subnets: (_) => de_Subnets(_),
    });
};
const de_VpcOnlyTrustedAccounts = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_VpcSecurityGroupIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_WarmPoolStatus = (output, context) => {
    return smithyClient.take(output, {
        ResourceRetainedBillableTimeInSeconds: smithyClient.expectInt32,
        ReusedByJob: smithyClient.expectString,
        Status: smithyClient.expectString,
    });
};
const de_WorkerAccessConfiguration = (output, context) => {
    return smithyClient.take(output, {
        S3Presign: (_) => de_S3Presign(_),
    });
};
const de_Workforce = (output, context) => {
    return smithyClient.take(output, {
        CognitoConfig: (_) => de_CognitoConfig(_),
        CreateDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        FailureReason: smithyClient.expectString,
        IpAddressType: smithyClient.expectString,
        LastUpdatedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        OidcConfig: (_) => de_OidcConfigForResponse(_),
        SourceIpConfig: (_) => de_SourceIpConfig(_),
        Status: smithyClient.expectString,
        SubDomain: smithyClient.expectString,
        WorkforceArn: smithyClient.expectString,
        WorkforceName: smithyClient.expectString,
        WorkforceVpcConfig: (_) => de_WorkforceVpcConfigResponse(_),
    });
};
const de_Workforces = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Workforce(entry);
    });
    return retVal;
};
const de_WorkforceSecurityGroupIds = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_WorkforceSubnets = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return smithyClient.expectString(entry);
    });
    return retVal;
};
const de_WorkforceVpcConfigResponse = (output, context) => {
    return smithyClient.take(output, {
        SecurityGroupIds: (_) => de_WorkforceSecurityGroupIds(_),
        Subnets: (_) => de_WorkforceSubnets(_),
        VpcEndpointId: smithyClient.expectString,
        VpcId: smithyClient.expectString,
    });
};
const de_WorkspaceSettings = (output, context) => {
    return smithyClient.take(output, {
        S3ArtifactPath: smithyClient.expectString,
        S3KmsKeyId: smithyClient.expectString,
    });
};
const de_Workteam = (output, context) => {
    return smithyClient.take(output, {
        CreateDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        Description: smithyClient.expectString,
        LastUpdatedDate: (_) => smithyClient.expectNonNull(smithyClient.parseEpochTimestamp(smithyClient.expectNumber(_))),
        MemberDefinitions: (_) => de_MemberDefinitions(_),
        NotificationConfiguration: (_) => de_NotificationConfiguration(_),
        ProductListingIds: (_) => de_ProductListings(_),
        SubDomain: smithyClient.expectString,
        WorkerAccessConfiguration: (_) => de_WorkerAccessConfiguration(_),
        WorkforceArn: smithyClient.expectString,
        WorkteamArn: smithyClient.expectString,
        WorkteamName: smithyClient.expectString,
    });
};
const de_Workteams = (output, context) => {
    const retVal = (output || [])
        .filter((e) => e != null)
        .map((entry) => {
        return de_Workteam(entry);
    });
    return retVal;
};
const deserializeMetadata = (output) => ({
    httpStatusCode: output.statusCode,
    requestId: output.headers["x-amzn-requestid"] ?? output.headers["x-amzn-request-id"] ?? output.headers["x-amz-request-id"],
    extendedRequestId: output.headers["x-amz-id-2"],
    cfId: output.headers["x-amz-cf-id"],
});
const throwDefaultError = smithyClient.withBaseException(SageMakerServiceException);
const buildHttpRpcRequest = async (context, headers, path, resolvedHostname, body) => {
    const { hostname, protocol = "https", port, path: basePath } = await context.endpoint();
    const contents = {
        protocol,
        hostname,
        port,
        method: "POST",
        path: basePath.endsWith("/") ? basePath.slice(0, -1) + path : basePath + path,
        headers,
    };
    if (body !== undefined) {
        contents.body = body;
    }
    return new protocolHttp.HttpRequest(contents);
};
function sharedHeaders(operation) {
    return {
        "content-type": "application/x-amz-json-1.1",
        "x-amz-target": `SageMaker.${operation}`,
    };
}

class AddAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "AddAssociation", {})
    .n("SageMakerClient", "AddAssociationCommand")
    .f(void 0, void 0)
    .ser(se_AddAssociationCommand)
    .de(de_AddAssociationCommand)
    .build() {
}

class AddTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "AddTags", {})
    .n("SageMakerClient", "AddTagsCommand")
    .f(void 0, void 0)
    .ser(se_AddTagsCommand)
    .de(de_AddTagsCommand)
    .build() {
}

class AssociateTrialComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "AssociateTrialComponent", {})
    .n("SageMakerClient", "AssociateTrialComponentCommand")
    .f(void 0, void 0)
    .ser(se_AssociateTrialComponentCommand)
    .de(de_AssociateTrialComponentCommand)
    .build() {
}

class AttachClusterNodeVolumeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "AttachClusterNodeVolume", {})
    .n("SageMakerClient", "AttachClusterNodeVolumeCommand")
    .f(void 0, void 0)
    .ser(se_AttachClusterNodeVolumeCommand)
    .de(de_AttachClusterNodeVolumeCommand)
    .build() {
}

class BatchAddClusterNodesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "BatchAddClusterNodes", {})
    .n("SageMakerClient", "BatchAddClusterNodesCommand")
    .f(void 0, void 0)
    .ser(se_BatchAddClusterNodesCommand)
    .de(de_BatchAddClusterNodesCommand)
    .build() {
}

class BatchDeleteClusterNodesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "BatchDeleteClusterNodes", {})
    .n("SageMakerClient", "BatchDeleteClusterNodesCommand")
    .f(void 0, void 0)
    .ser(se_BatchDeleteClusterNodesCommand)
    .de(de_BatchDeleteClusterNodesCommand)
    .build() {
}

class BatchDescribeModelPackageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "BatchDescribeModelPackage", {})
    .n("SageMakerClient", "BatchDescribeModelPackageCommand")
    .f(void 0, void 0)
    .ser(se_BatchDescribeModelPackageCommand)
    .de(de_BatchDescribeModelPackageCommand)
    .build() {
}

class CreateActionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateAction", {})
    .n("SageMakerClient", "CreateActionCommand")
    .f(void 0, void 0)
    .ser(se_CreateActionCommand)
    .de(de_CreateActionCommand)
    .build() {
}

class CreateAlgorithmCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateAlgorithm", {})
    .n("SageMakerClient", "CreateAlgorithmCommand")
    .f(void 0, void 0)
    .ser(se_CreateAlgorithmCommand)
    .de(de_CreateAlgorithmCommand)
    .build() {
}

class CreateAppCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateApp", {})
    .n("SageMakerClient", "CreateAppCommand")
    .f(void 0, void 0)
    .ser(se_CreateAppCommand)
    .de(de_CreateAppCommand)
    .build() {
}

class CreateAppImageConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateAppImageConfig", {})
    .n("SageMakerClient", "CreateAppImageConfigCommand")
    .f(void 0, void 0)
    .ser(se_CreateAppImageConfigCommand)
    .de(de_CreateAppImageConfigCommand)
    .build() {
}

class CreateArtifactCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateArtifact", {})
    .n("SageMakerClient", "CreateArtifactCommand")
    .f(void 0, void 0)
    .ser(se_CreateArtifactCommand)
    .de(de_CreateArtifactCommand)
    .build() {
}

class CreateAutoMLJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateAutoMLJob", {})
    .n("SageMakerClient", "CreateAutoMLJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateAutoMLJobCommand)
    .de(de_CreateAutoMLJobCommand)
    .build() {
}

class CreateAutoMLJobV2Command extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateAutoMLJobV2", {})
    .n("SageMakerClient", "CreateAutoMLJobV2Command")
    .f(void 0, void 0)
    .ser(se_CreateAutoMLJobV2Command)
    .de(de_CreateAutoMLJobV2Command)
    .build() {
}

class CreateClusterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateCluster", {})
    .n("SageMakerClient", "CreateClusterCommand")
    .f(void 0, void 0)
    .ser(se_CreateClusterCommand)
    .de(de_CreateClusterCommand)
    .build() {
}

class CreateClusterSchedulerConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateClusterSchedulerConfig", {})
    .n("SageMakerClient", "CreateClusterSchedulerConfigCommand")
    .f(void 0, void 0)
    .ser(se_CreateClusterSchedulerConfigCommand)
    .de(de_CreateClusterSchedulerConfigCommand)
    .build() {
}

class CreateCodeRepositoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateCodeRepository", {})
    .n("SageMakerClient", "CreateCodeRepositoryCommand")
    .f(void 0, void 0)
    .ser(se_CreateCodeRepositoryCommand)
    .de(de_CreateCodeRepositoryCommand)
    .build() {
}

class CreateCompilationJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateCompilationJob", {})
    .n("SageMakerClient", "CreateCompilationJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateCompilationJobCommand)
    .de(de_CreateCompilationJobCommand)
    .build() {
}

class CreateComputeQuotaCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateComputeQuota", {})
    .n("SageMakerClient", "CreateComputeQuotaCommand")
    .f(void 0, void 0)
    .ser(se_CreateComputeQuotaCommand)
    .de(de_CreateComputeQuotaCommand)
    .build() {
}

class CreateContextCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateContext", {})
    .n("SageMakerClient", "CreateContextCommand")
    .f(void 0, void 0)
    .ser(se_CreateContextCommand)
    .de(de_CreateContextCommand)
    .build() {
}

class CreateDataQualityJobDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateDataQualityJobDefinition", {})
    .n("SageMakerClient", "CreateDataQualityJobDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_CreateDataQualityJobDefinitionCommand)
    .de(de_CreateDataQualityJobDefinitionCommand)
    .build() {
}

class CreateDeviceFleetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateDeviceFleet", {})
    .n("SageMakerClient", "CreateDeviceFleetCommand")
    .f(void 0, void 0)
    .ser(se_CreateDeviceFleetCommand)
    .de(de_CreateDeviceFleetCommand)
    .build() {
}

class CreateDomainCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateDomain", {})
    .n("SageMakerClient", "CreateDomainCommand")
    .f(void 0, void 0)
    .ser(se_CreateDomainCommand)
    .de(de_CreateDomainCommand)
    .build() {
}

class CreateEdgeDeploymentPlanCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateEdgeDeploymentPlan", {})
    .n("SageMakerClient", "CreateEdgeDeploymentPlanCommand")
    .f(void 0, void 0)
    .ser(se_CreateEdgeDeploymentPlanCommand)
    .de(de_CreateEdgeDeploymentPlanCommand)
    .build() {
}

class CreateEdgeDeploymentStageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateEdgeDeploymentStage", {})
    .n("SageMakerClient", "CreateEdgeDeploymentStageCommand")
    .f(void 0, void 0)
    .ser(se_CreateEdgeDeploymentStageCommand)
    .de(de_CreateEdgeDeploymentStageCommand)
    .build() {
}

class CreateEdgePackagingJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateEdgePackagingJob", {})
    .n("SageMakerClient", "CreateEdgePackagingJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateEdgePackagingJobCommand)
    .de(de_CreateEdgePackagingJobCommand)
    .build() {
}

class CreateEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateEndpoint", {})
    .n("SageMakerClient", "CreateEndpointCommand")
    .f(void 0, void 0)
    .ser(se_CreateEndpointCommand)
    .de(de_CreateEndpointCommand)
    .build() {
}

class CreateEndpointConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateEndpointConfig", {})
    .n("SageMakerClient", "CreateEndpointConfigCommand")
    .f(void 0, void 0)
    .ser(se_CreateEndpointConfigCommand)
    .de(de_CreateEndpointConfigCommand)
    .build() {
}

class CreateExperimentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateExperiment", {})
    .n("SageMakerClient", "CreateExperimentCommand")
    .f(void 0, void 0)
    .ser(se_CreateExperimentCommand)
    .de(de_CreateExperimentCommand)
    .build() {
}

class CreateFeatureGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateFeatureGroup", {})
    .n("SageMakerClient", "CreateFeatureGroupCommand")
    .f(void 0, void 0)
    .ser(se_CreateFeatureGroupCommand)
    .de(de_CreateFeatureGroupCommand)
    .build() {
}

class CreateFlowDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateFlowDefinition", {})
    .n("SageMakerClient", "CreateFlowDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_CreateFlowDefinitionCommand)
    .de(de_CreateFlowDefinitionCommand)
    .build() {
}

class CreateHubCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateHub", {})
    .n("SageMakerClient", "CreateHubCommand")
    .f(void 0, void 0)
    .ser(se_CreateHubCommand)
    .de(de_CreateHubCommand)
    .build() {
}

class CreateHubContentPresignedUrlsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateHubContentPresignedUrls", {})
    .n("SageMakerClient", "CreateHubContentPresignedUrlsCommand")
    .f(void 0, void 0)
    .ser(se_CreateHubContentPresignedUrlsCommand)
    .de(de_CreateHubContentPresignedUrlsCommand)
    .build() {
}

class CreateHubContentReferenceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateHubContentReference", {})
    .n("SageMakerClient", "CreateHubContentReferenceCommand")
    .f(void 0, void 0)
    .ser(se_CreateHubContentReferenceCommand)
    .de(de_CreateHubContentReferenceCommand)
    .build() {
}

class CreateHumanTaskUiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateHumanTaskUi", {})
    .n("SageMakerClient", "CreateHumanTaskUiCommand")
    .f(void 0, void 0)
    .ser(se_CreateHumanTaskUiCommand)
    .de(de_CreateHumanTaskUiCommand)
    .build() {
}

class CreateHyperParameterTuningJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateHyperParameterTuningJob", {})
    .n("SageMakerClient", "CreateHyperParameterTuningJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateHyperParameterTuningJobCommand)
    .de(de_CreateHyperParameterTuningJobCommand)
    .build() {
}

class CreateImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateImage", {})
    .n("SageMakerClient", "CreateImageCommand")
    .f(void 0, void 0)
    .ser(se_CreateImageCommand)
    .de(de_CreateImageCommand)
    .build() {
}

class CreateImageVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateImageVersion", {})
    .n("SageMakerClient", "CreateImageVersionCommand")
    .f(void 0, void 0)
    .ser(se_CreateImageVersionCommand)
    .de(de_CreateImageVersionCommand)
    .build() {
}

class CreateInferenceComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateInferenceComponent", {})
    .n("SageMakerClient", "CreateInferenceComponentCommand")
    .f(void 0, void 0)
    .ser(se_CreateInferenceComponentCommand)
    .de(de_CreateInferenceComponentCommand)
    .build() {
}

class CreateInferenceExperimentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateInferenceExperiment", {})
    .n("SageMakerClient", "CreateInferenceExperimentCommand")
    .f(void 0, void 0)
    .ser(se_CreateInferenceExperimentCommand)
    .de(de_CreateInferenceExperimentCommand)
    .build() {
}

class CreateInferenceRecommendationsJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateInferenceRecommendationsJob", {})
    .n("SageMakerClient", "CreateInferenceRecommendationsJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateInferenceRecommendationsJobCommand)
    .de(de_CreateInferenceRecommendationsJobCommand)
    .build() {
}

class CreateLabelingJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateLabelingJob", {})
    .n("SageMakerClient", "CreateLabelingJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateLabelingJobCommand)
    .de(de_CreateLabelingJobCommand)
    .build() {
}

class CreateMlflowTrackingServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateMlflowTrackingServer", {})
    .n("SageMakerClient", "CreateMlflowTrackingServerCommand")
    .f(void 0, void 0)
    .ser(se_CreateMlflowTrackingServerCommand)
    .de(de_CreateMlflowTrackingServerCommand)
    .build() {
}

class CreateModelBiasJobDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateModelBiasJobDefinition", {})
    .n("SageMakerClient", "CreateModelBiasJobDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_CreateModelBiasJobDefinitionCommand)
    .de(de_CreateModelBiasJobDefinitionCommand)
    .build() {
}

class CreateModelCardCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateModelCard", {})
    .n("SageMakerClient", "CreateModelCardCommand")
    .f(CreateModelCardRequestFilterSensitiveLog, void 0)
    .ser(se_CreateModelCardCommand)
    .de(de_CreateModelCardCommand)
    .build() {
}

class CreateModelCardExportJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateModelCardExportJob", {})
    .n("SageMakerClient", "CreateModelCardExportJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateModelCardExportJobCommand)
    .de(de_CreateModelCardExportJobCommand)
    .build() {
}

class CreateModelCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateModel", {})
    .n("SageMakerClient", "CreateModelCommand")
    .f(void 0, void 0)
    .ser(se_CreateModelCommand)
    .de(de_CreateModelCommand)
    .build() {
}

class CreateModelExplainabilityJobDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateModelExplainabilityJobDefinition", {})
    .n("SageMakerClient", "CreateModelExplainabilityJobDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_CreateModelExplainabilityJobDefinitionCommand)
    .de(de_CreateModelExplainabilityJobDefinitionCommand)
    .build() {
}

class CreateModelPackageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateModelPackage", {})
    .n("SageMakerClient", "CreateModelPackageCommand")
    .f(CreateModelPackageInputFilterSensitiveLog, void 0)
    .ser(se_CreateModelPackageCommand)
    .de(de_CreateModelPackageCommand)
    .build() {
}

class CreateModelPackageGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateModelPackageGroup", {})
    .n("SageMakerClient", "CreateModelPackageGroupCommand")
    .f(void 0, void 0)
    .ser(se_CreateModelPackageGroupCommand)
    .de(de_CreateModelPackageGroupCommand)
    .build() {
}

class CreateModelQualityJobDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateModelQualityJobDefinition", {})
    .n("SageMakerClient", "CreateModelQualityJobDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_CreateModelQualityJobDefinitionCommand)
    .de(de_CreateModelQualityJobDefinitionCommand)
    .build() {
}

class CreateMonitoringScheduleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateMonitoringSchedule", {})
    .n("SageMakerClient", "CreateMonitoringScheduleCommand")
    .f(void 0, void 0)
    .ser(se_CreateMonitoringScheduleCommand)
    .de(de_CreateMonitoringScheduleCommand)
    .build() {
}

class CreateNotebookInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateNotebookInstance", {})
    .n("SageMakerClient", "CreateNotebookInstanceCommand")
    .f(void 0, void 0)
    .ser(se_CreateNotebookInstanceCommand)
    .de(de_CreateNotebookInstanceCommand)
    .build() {
}

class CreateNotebookInstanceLifecycleConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateNotebookInstanceLifecycleConfig", {})
    .n("SageMakerClient", "CreateNotebookInstanceLifecycleConfigCommand")
    .f(void 0, void 0)
    .ser(se_CreateNotebookInstanceLifecycleConfigCommand)
    .de(de_CreateNotebookInstanceLifecycleConfigCommand)
    .build() {
}

class CreateOptimizationJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateOptimizationJob", {})
    .n("SageMakerClient", "CreateOptimizationJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateOptimizationJobCommand)
    .de(de_CreateOptimizationJobCommand)
    .build() {
}

class CreatePartnerAppCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreatePartnerApp", {})
    .n("SageMakerClient", "CreatePartnerAppCommand")
    .f(void 0, void 0)
    .ser(se_CreatePartnerAppCommand)
    .de(de_CreatePartnerAppCommand)
    .build() {
}

class CreatePartnerAppPresignedUrlCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreatePartnerAppPresignedUrl", {})
    .n("SageMakerClient", "CreatePartnerAppPresignedUrlCommand")
    .f(void 0, void 0)
    .ser(se_CreatePartnerAppPresignedUrlCommand)
    .de(de_CreatePartnerAppPresignedUrlCommand)
    .build() {
}

class CreatePipelineCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreatePipeline", {})
    .n("SageMakerClient", "CreatePipelineCommand")
    .f(void 0, void 0)
    .ser(se_CreatePipelineCommand)
    .de(de_CreatePipelineCommand)
    .build() {
}

class CreatePresignedDomainUrlCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreatePresignedDomainUrl", {})
    .n("SageMakerClient", "CreatePresignedDomainUrlCommand")
    .f(void 0, void 0)
    .ser(se_CreatePresignedDomainUrlCommand)
    .de(de_CreatePresignedDomainUrlCommand)
    .build() {
}

class CreatePresignedMlflowTrackingServerUrlCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreatePresignedMlflowTrackingServerUrl", {})
    .n("SageMakerClient", "CreatePresignedMlflowTrackingServerUrlCommand")
    .f(void 0, void 0)
    .ser(se_CreatePresignedMlflowTrackingServerUrlCommand)
    .de(de_CreatePresignedMlflowTrackingServerUrlCommand)
    .build() {
}

class CreatePresignedNotebookInstanceUrlCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreatePresignedNotebookInstanceUrl", {})
    .n("SageMakerClient", "CreatePresignedNotebookInstanceUrlCommand")
    .f(void 0, void 0)
    .ser(se_CreatePresignedNotebookInstanceUrlCommand)
    .de(de_CreatePresignedNotebookInstanceUrlCommand)
    .build() {
}

class CreateProcessingJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateProcessingJob", {})
    .n("SageMakerClient", "CreateProcessingJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateProcessingJobCommand)
    .de(de_CreateProcessingJobCommand)
    .build() {
}

class CreateProjectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateProject", {})
    .n("SageMakerClient", "CreateProjectCommand")
    .f(void 0, void 0)
    .ser(se_CreateProjectCommand)
    .de(de_CreateProjectCommand)
    .build() {
}

class CreateSpaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateSpace", {})
    .n("SageMakerClient", "CreateSpaceCommand")
    .f(void 0, void 0)
    .ser(se_CreateSpaceCommand)
    .de(de_CreateSpaceCommand)
    .build() {
}

class CreateStudioLifecycleConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateStudioLifecycleConfig", {})
    .n("SageMakerClient", "CreateStudioLifecycleConfigCommand")
    .f(void 0, void 0)
    .ser(se_CreateStudioLifecycleConfigCommand)
    .de(de_CreateStudioLifecycleConfigCommand)
    .build() {
}

class CreateTrainingJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateTrainingJob", {})
    .n("SageMakerClient", "CreateTrainingJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateTrainingJobCommand)
    .de(de_CreateTrainingJobCommand)
    .build() {
}

class CreateTrainingPlanCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateTrainingPlan", {})
    .n("SageMakerClient", "CreateTrainingPlanCommand")
    .f(void 0, void 0)
    .ser(se_CreateTrainingPlanCommand)
    .de(de_CreateTrainingPlanCommand)
    .build() {
}

class CreateTransformJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateTransformJob", {})
    .n("SageMakerClient", "CreateTransformJobCommand")
    .f(void 0, void 0)
    .ser(se_CreateTransformJobCommand)
    .de(de_CreateTransformJobCommand)
    .build() {
}

class CreateTrialCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateTrial", {})
    .n("SageMakerClient", "CreateTrialCommand")
    .f(void 0, void 0)
    .ser(se_CreateTrialCommand)
    .de(de_CreateTrialCommand)
    .build() {
}

class CreateTrialComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateTrialComponent", {})
    .n("SageMakerClient", "CreateTrialComponentCommand")
    .f(void 0, void 0)
    .ser(se_CreateTrialComponentCommand)
    .de(de_CreateTrialComponentCommand)
    .build() {
}

class CreateUserProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateUserProfile", {})
    .n("SageMakerClient", "CreateUserProfileCommand")
    .f(void 0, void 0)
    .ser(se_CreateUserProfileCommand)
    .de(de_CreateUserProfileCommand)
    .build() {
}

class CreateWorkforceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateWorkforce", {})
    .n("SageMakerClient", "CreateWorkforceCommand")
    .f(CreateWorkforceRequestFilterSensitiveLog, void 0)
    .ser(se_CreateWorkforceCommand)
    .de(de_CreateWorkforceCommand)
    .build() {
}

class CreateWorkteamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "CreateWorkteam", {})
    .n("SageMakerClient", "CreateWorkteamCommand")
    .f(void 0, void 0)
    .ser(se_CreateWorkteamCommand)
    .de(de_CreateWorkteamCommand)
    .build() {
}

class DeleteActionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteAction", {})
    .n("SageMakerClient", "DeleteActionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteActionCommand)
    .de(de_DeleteActionCommand)
    .build() {
}

class DeleteAlgorithmCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteAlgorithm", {})
    .n("SageMakerClient", "DeleteAlgorithmCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAlgorithmCommand)
    .de(de_DeleteAlgorithmCommand)
    .build() {
}

class DeleteAppCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteApp", {})
    .n("SageMakerClient", "DeleteAppCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAppCommand)
    .de(de_DeleteAppCommand)
    .build() {
}

class DeleteAppImageConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteAppImageConfig", {})
    .n("SageMakerClient", "DeleteAppImageConfigCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAppImageConfigCommand)
    .de(de_DeleteAppImageConfigCommand)
    .build() {
}

class DeleteArtifactCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteArtifact", {})
    .n("SageMakerClient", "DeleteArtifactCommand")
    .f(void 0, void 0)
    .ser(se_DeleteArtifactCommand)
    .de(de_DeleteArtifactCommand)
    .build() {
}

class DeleteAssociationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteAssociation", {})
    .n("SageMakerClient", "DeleteAssociationCommand")
    .f(void 0, void 0)
    .ser(se_DeleteAssociationCommand)
    .de(de_DeleteAssociationCommand)
    .build() {
}

class DeleteClusterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteCluster", {})
    .n("SageMakerClient", "DeleteClusterCommand")
    .f(void 0, void 0)
    .ser(se_DeleteClusterCommand)
    .de(de_DeleteClusterCommand)
    .build() {
}

class DeleteClusterSchedulerConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteClusterSchedulerConfig", {})
    .n("SageMakerClient", "DeleteClusterSchedulerConfigCommand")
    .f(void 0, void 0)
    .ser(se_DeleteClusterSchedulerConfigCommand)
    .de(de_DeleteClusterSchedulerConfigCommand)
    .build() {
}

class DeleteCodeRepositoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteCodeRepository", {})
    .n("SageMakerClient", "DeleteCodeRepositoryCommand")
    .f(void 0, void 0)
    .ser(se_DeleteCodeRepositoryCommand)
    .de(de_DeleteCodeRepositoryCommand)
    .build() {
}

class DeleteCompilationJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteCompilationJob", {})
    .n("SageMakerClient", "DeleteCompilationJobCommand")
    .f(void 0, void 0)
    .ser(se_DeleteCompilationJobCommand)
    .de(de_DeleteCompilationJobCommand)
    .build() {
}

class DeleteComputeQuotaCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteComputeQuota", {})
    .n("SageMakerClient", "DeleteComputeQuotaCommand")
    .f(void 0, void 0)
    .ser(se_DeleteComputeQuotaCommand)
    .de(de_DeleteComputeQuotaCommand)
    .build() {
}

class DeleteContextCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteContext", {})
    .n("SageMakerClient", "DeleteContextCommand")
    .f(void 0, void 0)
    .ser(se_DeleteContextCommand)
    .de(de_DeleteContextCommand)
    .build() {
}

class DeleteDataQualityJobDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteDataQualityJobDefinition", {})
    .n("SageMakerClient", "DeleteDataQualityJobDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDataQualityJobDefinitionCommand)
    .de(de_DeleteDataQualityJobDefinitionCommand)
    .build() {
}

class DeleteDeviceFleetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteDeviceFleet", {})
    .n("SageMakerClient", "DeleteDeviceFleetCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDeviceFleetCommand)
    .de(de_DeleteDeviceFleetCommand)
    .build() {
}

class DeleteDomainCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteDomain", {})
    .n("SageMakerClient", "DeleteDomainCommand")
    .f(void 0, void 0)
    .ser(se_DeleteDomainCommand)
    .de(de_DeleteDomainCommand)
    .build() {
}

class DeleteEdgeDeploymentPlanCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteEdgeDeploymentPlan", {})
    .n("SageMakerClient", "DeleteEdgeDeploymentPlanCommand")
    .f(void 0, void 0)
    .ser(se_DeleteEdgeDeploymentPlanCommand)
    .de(de_DeleteEdgeDeploymentPlanCommand)
    .build() {
}

class DeleteEdgeDeploymentStageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteEdgeDeploymentStage", {})
    .n("SageMakerClient", "DeleteEdgeDeploymentStageCommand")
    .f(void 0, void 0)
    .ser(se_DeleteEdgeDeploymentStageCommand)
    .de(de_DeleteEdgeDeploymentStageCommand)
    .build() {
}

class DeleteEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteEndpoint", {})
    .n("SageMakerClient", "DeleteEndpointCommand")
    .f(void 0, void 0)
    .ser(se_DeleteEndpointCommand)
    .de(de_DeleteEndpointCommand)
    .build() {
}

class DeleteEndpointConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteEndpointConfig", {})
    .n("SageMakerClient", "DeleteEndpointConfigCommand")
    .f(void 0, void 0)
    .ser(se_DeleteEndpointConfigCommand)
    .de(de_DeleteEndpointConfigCommand)
    .build() {
}

class DeleteExperimentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteExperiment", {})
    .n("SageMakerClient", "DeleteExperimentCommand")
    .f(void 0, void 0)
    .ser(se_DeleteExperimentCommand)
    .de(de_DeleteExperimentCommand)
    .build() {
}

class DeleteFeatureGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteFeatureGroup", {})
    .n("SageMakerClient", "DeleteFeatureGroupCommand")
    .f(void 0, void 0)
    .ser(se_DeleteFeatureGroupCommand)
    .de(de_DeleteFeatureGroupCommand)
    .build() {
}

class DeleteFlowDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteFlowDefinition", {})
    .n("SageMakerClient", "DeleteFlowDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteFlowDefinitionCommand)
    .de(de_DeleteFlowDefinitionCommand)
    .build() {
}

class DeleteHubCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteHub", {})
    .n("SageMakerClient", "DeleteHubCommand")
    .f(void 0, void 0)
    .ser(se_DeleteHubCommand)
    .de(de_DeleteHubCommand)
    .build() {
}

class DeleteHubContentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteHubContent", {})
    .n("SageMakerClient", "DeleteHubContentCommand")
    .f(void 0, void 0)
    .ser(se_DeleteHubContentCommand)
    .de(de_DeleteHubContentCommand)
    .build() {
}

class DeleteHubContentReferenceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteHubContentReference", {})
    .n("SageMakerClient", "DeleteHubContentReferenceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteHubContentReferenceCommand)
    .de(de_DeleteHubContentReferenceCommand)
    .build() {
}

class DeleteHumanTaskUiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteHumanTaskUi", {})
    .n("SageMakerClient", "DeleteHumanTaskUiCommand")
    .f(void 0, void 0)
    .ser(se_DeleteHumanTaskUiCommand)
    .de(de_DeleteHumanTaskUiCommand)
    .build() {
}

class DeleteHyperParameterTuningJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteHyperParameterTuningJob", {})
    .n("SageMakerClient", "DeleteHyperParameterTuningJobCommand")
    .f(void 0, void 0)
    .ser(se_DeleteHyperParameterTuningJobCommand)
    .de(de_DeleteHyperParameterTuningJobCommand)
    .build() {
}

class DeleteImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteImage", {})
    .n("SageMakerClient", "DeleteImageCommand")
    .f(void 0, void 0)
    .ser(se_DeleteImageCommand)
    .de(de_DeleteImageCommand)
    .build() {
}

class DeleteImageVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteImageVersion", {})
    .n("SageMakerClient", "DeleteImageVersionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteImageVersionCommand)
    .de(de_DeleteImageVersionCommand)
    .build() {
}

class DeleteInferenceComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteInferenceComponent", {})
    .n("SageMakerClient", "DeleteInferenceComponentCommand")
    .f(void 0, void 0)
    .ser(se_DeleteInferenceComponentCommand)
    .de(de_DeleteInferenceComponentCommand)
    .build() {
}

class DeleteInferenceExperimentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteInferenceExperiment", {})
    .n("SageMakerClient", "DeleteInferenceExperimentCommand")
    .f(void 0, void 0)
    .ser(se_DeleteInferenceExperimentCommand)
    .de(de_DeleteInferenceExperimentCommand)
    .build() {
}

class DeleteMlflowTrackingServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteMlflowTrackingServer", {})
    .n("SageMakerClient", "DeleteMlflowTrackingServerCommand")
    .f(void 0, void 0)
    .ser(se_DeleteMlflowTrackingServerCommand)
    .de(de_DeleteMlflowTrackingServerCommand)
    .build() {
}

class DeleteModelBiasJobDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteModelBiasJobDefinition", {})
    .n("SageMakerClient", "DeleteModelBiasJobDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteModelBiasJobDefinitionCommand)
    .de(de_DeleteModelBiasJobDefinitionCommand)
    .build() {
}

class DeleteModelCardCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteModelCard", {})
    .n("SageMakerClient", "DeleteModelCardCommand")
    .f(void 0, void 0)
    .ser(se_DeleteModelCardCommand)
    .de(de_DeleteModelCardCommand)
    .build() {
}

class DeleteModelCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteModel", {})
    .n("SageMakerClient", "DeleteModelCommand")
    .f(void 0, void 0)
    .ser(se_DeleteModelCommand)
    .de(de_DeleteModelCommand)
    .build() {
}

class DeleteModelExplainabilityJobDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteModelExplainabilityJobDefinition", {})
    .n("SageMakerClient", "DeleteModelExplainabilityJobDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteModelExplainabilityJobDefinitionCommand)
    .de(de_DeleteModelExplainabilityJobDefinitionCommand)
    .build() {
}

class DeleteModelPackageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteModelPackage", {})
    .n("SageMakerClient", "DeleteModelPackageCommand")
    .f(void 0, void 0)
    .ser(se_DeleteModelPackageCommand)
    .de(de_DeleteModelPackageCommand)
    .build() {
}

class DeleteModelPackageGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteModelPackageGroup", {})
    .n("SageMakerClient", "DeleteModelPackageGroupCommand")
    .f(void 0, void 0)
    .ser(se_DeleteModelPackageGroupCommand)
    .de(de_DeleteModelPackageGroupCommand)
    .build() {
}

class DeleteModelPackageGroupPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteModelPackageGroupPolicy", {})
    .n("SageMakerClient", "DeleteModelPackageGroupPolicyCommand")
    .f(void 0, void 0)
    .ser(se_DeleteModelPackageGroupPolicyCommand)
    .de(de_DeleteModelPackageGroupPolicyCommand)
    .build() {
}

class DeleteModelQualityJobDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteModelQualityJobDefinition", {})
    .n("SageMakerClient", "DeleteModelQualityJobDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_DeleteModelQualityJobDefinitionCommand)
    .de(de_DeleteModelQualityJobDefinitionCommand)
    .build() {
}

class DeleteMonitoringScheduleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteMonitoringSchedule", {})
    .n("SageMakerClient", "DeleteMonitoringScheduleCommand")
    .f(void 0, void 0)
    .ser(se_DeleteMonitoringScheduleCommand)
    .de(de_DeleteMonitoringScheduleCommand)
    .build() {
}

class DeleteNotebookInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteNotebookInstance", {})
    .n("SageMakerClient", "DeleteNotebookInstanceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteNotebookInstanceCommand)
    .de(de_DeleteNotebookInstanceCommand)
    .build() {
}

class DeleteNotebookInstanceLifecycleConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteNotebookInstanceLifecycleConfig", {})
    .n("SageMakerClient", "DeleteNotebookInstanceLifecycleConfigCommand")
    .f(void 0, void 0)
    .ser(se_DeleteNotebookInstanceLifecycleConfigCommand)
    .de(de_DeleteNotebookInstanceLifecycleConfigCommand)
    .build() {
}

class DeleteOptimizationJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteOptimizationJob", {})
    .n("SageMakerClient", "DeleteOptimizationJobCommand")
    .f(void 0, void 0)
    .ser(se_DeleteOptimizationJobCommand)
    .de(de_DeleteOptimizationJobCommand)
    .build() {
}

class DeletePartnerAppCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeletePartnerApp", {})
    .n("SageMakerClient", "DeletePartnerAppCommand")
    .f(void 0, void 0)
    .ser(se_DeletePartnerAppCommand)
    .de(de_DeletePartnerAppCommand)
    .build() {
}

class DeletePipelineCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeletePipeline", {})
    .n("SageMakerClient", "DeletePipelineCommand")
    .f(void 0, void 0)
    .ser(se_DeletePipelineCommand)
    .de(de_DeletePipelineCommand)
    .build() {
}

class DeleteProjectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteProject", {})
    .n("SageMakerClient", "DeleteProjectCommand")
    .f(void 0, void 0)
    .ser(se_DeleteProjectCommand)
    .de(de_DeleteProjectCommand)
    .build() {
}

class DeleteSpaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteSpace", {})
    .n("SageMakerClient", "DeleteSpaceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteSpaceCommand)
    .de(de_DeleteSpaceCommand)
    .build() {
}

class DeleteStudioLifecycleConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteStudioLifecycleConfig", {})
    .n("SageMakerClient", "DeleteStudioLifecycleConfigCommand")
    .f(void 0, void 0)
    .ser(se_DeleteStudioLifecycleConfigCommand)
    .de(de_DeleteStudioLifecycleConfigCommand)
    .build() {
}

class DeleteTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteTags", {})
    .n("SageMakerClient", "DeleteTagsCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTagsCommand)
    .de(de_DeleteTagsCommand)
    .build() {
}

class DeleteTrialCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteTrial", {})
    .n("SageMakerClient", "DeleteTrialCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTrialCommand)
    .de(de_DeleteTrialCommand)
    .build() {
}

class DeleteTrialComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteTrialComponent", {})
    .n("SageMakerClient", "DeleteTrialComponentCommand")
    .f(void 0, void 0)
    .ser(se_DeleteTrialComponentCommand)
    .de(de_DeleteTrialComponentCommand)
    .build() {
}

class DeleteUserProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteUserProfile", {})
    .n("SageMakerClient", "DeleteUserProfileCommand")
    .f(void 0, void 0)
    .ser(se_DeleteUserProfileCommand)
    .de(de_DeleteUserProfileCommand)
    .build() {
}

class DeleteWorkforceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteWorkforce", {})
    .n("SageMakerClient", "DeleteWorkforceCommand")
    .f(void 0, void 0)
    .ser(se_DeleteWorkforceCommand)
    .de(de_DeleteWorkforceCommand)
    .build() {
}

class DeleteWorkteamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeleteWorkteam", {})
    .n("SageMakerClient", "DeleteWorkteamCommand")
    .f(void 0, void 0)
    .ser(se_DeleteWorkteamCommand)
    .de(de_DeleteWorkteamCommand)
    .build() {
}

class DeregisterDevicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DeregisterDevices", {})
    .n("SageMakerClient", "DeregisterDevicesCommand")
    .f(void 0, void 0)
    .ser(se_DeregisterDevicesCommand)
    .de(de_DeregisterDevicesCommand)
    .build() {
}

class DescribeActionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeAction", {})
    .n("SageMakerClient", "DescribeActionCommand")
    .f(void 0, void 0)
    .ser(se_DescribeActionCommand)
    .de(de_DescribeActionCommand)
    .build() {
}

class DescribeAlgorithmCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeAlgorithm", {})
    .n("SageMakerClient", "DescribeAlgorithmCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAlgorithmCommand)
    .de(de_DescribeAlgorithmCommand)
    .build() {
}

class DescribeAppCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeApp", {})
    .n("SageMakerClient", "DescribeAppCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAppCommand)
    .de(de_DescribeAppCommand)
    .build() {
}

class DescribeAppImageConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeAppImageConfig", {})
    .n("SageMakerClient", "DescribeAppImageConfigCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAppImageConfigCommand)
    .de(de_DescribeAppImageConfigCommand)
    .build() {
}

class DescribeArtifactCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeArtifact", {})
    .n("SageMakerClient", "DescribeArtifactCommand")
    .f(void 0, void 0)
    .ser(se_DescribeArtifactCommand)
    .de(de_DescribeArtifactCommand)
    .build() {
}

class DescribeAutoMLJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeAutoMLJob", {})
    .n("SageMakerClient", "DescribeAutoMLJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeAutoMLJobCommand)
    .de(de_DescribeAutoMLJobCommand)
    .build() {
}

class DescribeAutoMLJobV2Command extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeAutoMLJobV2", {})
    .n("SageMakerClient", "DescribeAutoMLJobV2Command")
    .f(void 0, void 0)
    .ser(se_DescribeAutoMLJobV2Command)
    .de(de_DescribeAutoMLJobV2Command)
    .build() {
}

class DescribeClusterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeCluster", {})
    .n("SageMakerClient", "DescribeClusterCommand")
    .f(void 0, void 0)
    .ser(se_DescribeClusterCommand)
    .de(de_DescribeClusterCommand)
    .build() {
}

class DescribeClusterEventCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeClusterEvent", {})
    .n("SageMakerClient", "DescribeClusterEventCommand")
    .f(void 0, void 0)
    .ser(se_DescribeClusterEventCommand)
    .de(de_DescribeClusterEventCommand)
    .build() {
}

class DescribeClusterNodeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeClusterNode", {})
    .n("SageMakerClient", "DescribeClusterNodeCommand")
    .f(void 0, void 0)
    .ser(se_DescribeClusterNodeCommand)
    .de(de_DescribeClusterNodeCommand)
    .build() {
}

class DescribeClusterSchedulerConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeClusterSchedulerConfig", {})
    .n("SageMakerClient", "DescribeClusterSchedulerConfigCommand")
    .f(void 0, void 0)
    .ser(se_DescribeClusterSchedulerConfigCommand)
    .de(de_DescribeClusterSchedulerConfigCommand)
    .build() {
}

class DescribeCodeRepositoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeCodeRepository", {})
    .n("SageMakerClient", "DescribeCodeRepositoryCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCodeRepositoryCommand)
    .de(de_DescribeCodeRepositoryCommand)
    .build() {
}

class DescribeCompilationJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeCompilationJob", {})
    .n("SageMakerClient", "DescribeCompilationJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeCompilationJobCommand)
    .de(de_DescribeCompilationJobCommand)
    .build() {
}

class DescribeComputeQuotaCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeComputeQuota", {})
    .n("SageMakerClient", "DescribeComputeQuotaCommand")
    .f(void 0, void 0)
    .ser(se_DescribeComputeQuotaCommand)
    .de(de_DescribeComputeQuotaCommand)
    .build() {
}

class DescribeContextCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeContext", {})
    .n("SageMakerClient", "DescribeContextCommand")
    .f(void 0, void 0)
    .ser(se_DescribeContextCommand)
    .de(de_DescribeContextCommand)
    .build() {
}

class DescribeDataQualityJobDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeDataQualityJobDefinition", {})
    .n("SageMakerClient", "DescribeDataQualityJobDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_DescribeDataQualityJobDefinitionCommand)
    .de(de_DescribeDataQualityJobDefinitionCommand)
    .build() {
}

class DescribeDeviceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeDevice", {})
    .n("SageMakerClient", "DescribeDeviceCommand")
    .f(void 0, void 0)
    .ser(se_DescribeDeviceCommand)
    .de(de_DescribeDeviceCommand)
    .build() {
}

class DescribeDeviceFleetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeDeviceFleet", {})
    .n("SageMakerClient", "DescribeDeviceFleetCommand")
    .f(void 0, void 0)
    .ser(se_DescribeDeviceFleetCommand)
    .de(de_DescribeDeviceFleetCommand)
    .build() {
}

class DescribeDomainCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeDomain", {})
    .n("SageMakerClient", "DescribeDomainCommand")
    .f(void 0, void 0)
    .ser(se_DescribeDomainCommand)
    .de(de_DescribeDomainCommand)
    .build() {
}

class DescribeEdgeDeploymentPlanCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeEdgeDeploymentPlan", {})
    .n("SageMakerClient", "DescribeEdgeDeploymentPlanCommand")
    .f(void 0, void 0)
    .ser(se_DescribeEdgeDeploymentPlanCommand)
    .de(de_DescribeEdgeDeploymentPlanCommand)
    .build() {
}

class DescribeEdgePackagingJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeEdgePackagingJob", {})
    .n("SageMakerClient", "DescribeEdgePackagingJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeEdgePackagingJobCommand)
    .de(de_DescribeEdgePackagingJobCommand)
    .build() {
}

class DescribeEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeEndpoint", {})
    .n("SageMakerClient", "DescribeEndpointCommand")
    .f(void 0, void 0)
    .ser(se_DescribeEndpointCommand)
    .de(de_DescribeEndpointCommand)
    .build() {
}

class DescribeEndpointConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeEndpointConfig", {})
    .n("SageMakerClient", "DescribeEndpointConfigCommand")
    .f(void 0, void 0)
    .ser(se_DescribeEndpointConfigCommand)
    .de(de_DescribeEndpointConfigCommand)
    .build() {
}

class DescribeExperimentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeExperiment", {})
    .n("SageMakerClient", "DescribeExperimentCommand")
    .f(void 0, void 0)
    .ser(se_DescribeExperimentCommand)
    .de(de_DescribeExperimentCommand)
    .build() {
}

class DescribeFeatureGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeFeatureGroup", {})
    .n("SageMakerClient", "DescribeFeatureGroupCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFeatureGroupCommand)
    .de(de_DescribeFeatureGroupCommand)
    .build() {
}

class DescribeFeatureMetadataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeFeatureMetadata", {})
    .n("SageMakerClient", "DescribeFeatureMetadataCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFeatureMetadataCommand)
    .de(de_DescribeFeatureMetadataCommand)
    .build() {
}

class DescribeFlowDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeFlowDefinition", {})
    .n("SageMakerClient", "DescribeFlowDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_DescribeFlowDefinitionCommand)
    .de(de_DescribeFlowDefinitionCommand)
    .build() {
}

class DescribeHubCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeHub", {})
    .n("SageMakerClient", "DescribeHubCommand")
    .f(void 0, void 0)
    .ser(se_DescribeHubCommand)
    .de(de_DescribeHubCommand)
    .build() {
}

class DescribeHubContentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeHubContent", {})
    .n("SageMakerClient", "DescribeHubContentCommand")
    .f(void 0, void 0)
    .ser(se_DescribeHubContentCommand)
    .de(de_DescribeHubContentCommand)
    .build() {
}

class DescribeHumanTaskUiCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeHumanTaskUi", {})
    .n("SageMakerClient", "DescribeHumanTaskUiCommand")
    .f(void 0, void 0)
    .ser(se_DescribeHumanTaskUiCommand)
    .de(de_DescribeHumanTaskUiCommand)
    .build() {
}

class DescribeHyperParameterTuningJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeHyperParameterTuningJob", {})
    .n("SageMakerClient", "DescribeHyperParameterTuningJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeHyperParameterTuningJobCommand)
    .de(de_DescribeHyperParameterTuningJobCommand)
    .build() {
}

class DescribeImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeImage", {})
    .n("SageMakerClient", "DescribeImageCommand")
    .f(void 0, void 0)
    .ser(se_DescribeImageCommand)
    .de(de_DescribeImageCommand)
    .build() {
}

class DescribeImageVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeImageVersion", {})
    .n("SageMakerClient", "DescribeImageVersionCommand")
    .f(void 0, void 0)
    .ser(se_DescribeImageVersionCommand)
    .de(de_DescribeImageVersionCommand)
    .build() {
}

class DescribeInferenceComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeInferenceComponent", {})
    .n("SageMakerClient", "DescribeInferenceComponentCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInferenceComponentCommand)
    .de(de_DescribeInferenceComponentCommand)
    .build() {
}

class DescribeInferenceExperimentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeInferenceExperiment", {})
    .n("SageMakerClient", "DescribeInferenceExperimentCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInferenceExperimentCommand)
    .de(de_DescribeInferenceExperimentCommand)
    .build() {
}

class DescribeInferenceRecommendationsJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeInferenceRecommendationsJob", {})
    .n("SageMakerClient", "DescribeInferenceRecommendationsJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeInferenceRecommendationsJobCommand)
    .de(de_DescribeInferenceRecommendationsJobCommand)
    .build() {
}

class DescribeLabelingJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeLabelingJob", {})
    .n("SageMakerClient", "DescribeLabelingJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeLabelingJobCommand)
    .de(de_DescribeLabelingJobCommand)
    .build() {
}

class DescribeLineageGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeLineageGroup", {})
    .n("SageMakerClient", "DescribeLineageGroupCommand")
    .f(void 0, void 0)
    .ser(se_DescribeLineageGroupCommand)
    .de(de_DescribeLineageGroupCommand)
    .build() {
}

class DescribeMlflowTrackingServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeMlflowTrackingServer", {})
    .n("SageMakerClient", "DescribeMlflowTrackingServerCommand")
    .f(void 0, void 0)
    .ser(se_DescribeMlflowTrackingServerCommand)
    .de(de_DescribeMlflowTrackingServerCommand)
    .build() {
}

class DescribeModelBiasJobDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeModelBiasJobDefinition", {})
    .n("SageMakerClient", "DescribeModelBiasJobDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_DescribeModelBiasJobDefinitionCommand)
    .de(de_DescribeModelBiasJobDefinitionCommand)
    .build() {
}

const DomainStatus = {
    Delete_Failed: "Delete_Failed",
    Deleting: "Deleting",
    Failed: "Failed",
    InService: "InService",
    Pending: "Pending",
    Update_Failed: "Update_Failed",
    Updating: "Updating",
};
const EdgePackagingJobStatus = {
    Completed: "COMPLETED",
    Failed: "FAILED",
    InProgress: "INPROGRESS",
    Starting: "STARTING",
    Stopped: "STOPPED",
    Stopping: "STOPPING",
};
const EdgePresetDeploymentStatus = {
    Completed: "COMPLETED",
    Failed: "FAILED",
};
const EndpointStatus = {
    CREATING: "Creating",
    DELETING: "Deleting",
    FAILED: "Failed",
    IN_SERVICE: "InService",
    OUT_OF_SERVICE: "OutOfService",
    ROLLING_BACK: "RollingBack",
    SYSTEM_UPDATING: "SystemUpdating",
    UPDATE_ROLLBACK_FAILED: "UpdateRollbackFailed",
    UPDATING: "Updating",
};
const VariantStatus = {
    ACTIVATING_TRAFFIC: "ActivatingTraffic",
    BAKING: "Baking",
    CREATING: "Creating",
    DELETING: "Deleting",
    UPDATING: "Updating",
};
const FeatureGroupStatus = {
    CREATED: "Created",
    CREATE_FAILED: "CreateFailed",
    CREATING: "Creating",
    DELETE_FAILED: "DeleteFailed",
    DELETING: "Deleting",
};
const LastUpdateStatusValue = {
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    SUCCESSFUL: "Successful",
};
const OfflineStoreStatusValue = {
    ACTIVE: "Active",
    BLOCKED: "Blocked",
    DISABLED: "Disabled",
};
const FlowDefinitionStatus = {
    ACTIVE: "Active",
    DELETING: "Deleting",
    FAILED: "Failed",
    INITIALIZING: "Initializing",
};
const HubStatus = {
    CREATE_FAILED: "CreateFailed",
    CREATING: "Creating",
    DELETE_FAILED: "DeleteFailed",
    DELETING: "Deleting",
    IN_SERVICE: "InService",
    UPDATE_FAILED: "UpdateFailed",
    UPDATING: "Updating",
};
const HubContentStatus = {
    AVAILABLE: "Available",
    DELETE_FAILED: "DeleteFailed",
    DELETING: "Deleting",
    IMPORTING: "Importing",
    IMPORT_FAILED: "ImportFailed",
};
const HubContentSupportStatus = {
    DEPRECATED: "Deprecated",
    RESTRICTED: "Restricted",
    SUPPORTED: "Supported",
};
const HumanTaskUiStatus = {
    ACTIVE: "Active",
    DELETING: "Deleting",
};
const TrainingJobStatus = {
    COMPLETED: "Completed",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
};
const HyperParameterTuningJobStatus = {
    COMPLETED: "Completed",
    DELETE_FAILED: "DeleteFailed",
    DELETING: "Deleting",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
};
const ImageStatus = {
    CREATED: "CREATED",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
    UPDATE_FAILED: "UPDATE_FAILED",
    UPDATING: "UPDATING",
};
const ImageVersionStatus = {
    CREATED: "CREATED",
    CREATE_FAILED: "CREATE_FAILED",
    CREATING: "CREATING",
    DELETE_FAILED: "DELETE_FAILED",
    DELETING: "DELETING",
};
const InferenceComponentStatus = {
    CREATING: "Creating",
    DELETING: "Deleting",
    FAILED: "Failed",
    IN_SERVICE: "InService",
    UPDATING: "Updating",
};
const InferenceComponentCapacitySizeType = {
    CAPACITY_PERCENT: "CAPACITY_PERCENT",
    COPY_COUNT: "COPY_COUNT",
};
const ModelVariantStatus = {
    CREATING: "Creating",
    DELETED: "Deleted",
    DELETING: "Deleting",
    IN_SERVICE: "InService",
    UPDATING: "Updating",
};
const InferenceExperimentStatus = {
    CANCELLED: "Cancelled",
    COMPLETED: "Completed",
    CREATED: "Created",
    CREATING: "Creating",
    RUNNING: "Running",
    STARTING: "Starting",
    STOPPING: "Stopping",
    UPDATING: "Updating",
};
const RecommendationJobStatus = {
    COMPLETED: "COMPLETED",
    DELETED: "DELETED",
    DELETING: "DELETING",
    FAILED: "FAILED",
    IN_PROGRESS: "IN_PROGRESS",
    PENDING: "PENDING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
const LabelingJobStatus = {
    COMPLETED: "Completed",
    FAILED: "Failed",
    INITIALIZING: "Initializing",
    IN_PROGRESS: "InProgress",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
};
const IsTrackingServerActive = {
    ACTIVE: "Active",
    INACTIVE: "Inactive",
};
const TrackingServerMaintenanceStatus = {
    MAINTENANCE_COMPLETE: "MaintenanceComplete",
    MAINTENANCE_FAILED: "MaintenanceFailed",
    MAINTENANCE_IN_PROGRESS: "MaintenanceInProgress",
};
const TrackingServerStatus = {
    CREATED: "Created",
    CREATE_FAILED: "CreateFailed",
    CREATING: "Creating",
    DELETE_FAILED: "DeleteFailed",
    DELETING: "Deleting",
    MAINTENANCE_COMPLETE: "MaintenanceComplete",
    MAINTENANCE_FAILED: "MaintenanceFailed",
    MAINTENANCE_IN_PROGRESS: "MaintenanceInProgress",
    STARTED: "Started",
    STARTING: "Starting",
    START_FAILED: "StartFailed",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
    STOP_FAILED: "StopFailed",
    UPDATED: "Updated",
    UPDATE_FAILED: "UpdateFailed",
    UPDATING: "Updating",
};
const ModelCardProcessingStatus = {
    CONTENT_DELETED: "ContentDeleted",
    DELETE_COMPLETED: "DeleteCompleted",
    DELETE_FAILED: "DeleteFailed",
    DELETE_INPROGRESS: "DeleteInProgress",
    DELETE_PENDING: "DeletePending",
    EXPORTJOBS_DELETED: "ExportJobsDeleted",
};
const ModelCardExportJobStatus = {
    COMPLETED: "Completed",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
};
const DetailedModelPackageStatus = {
    COMPLETED: "Completed",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    NOT_STARTED: "NotStarted",
};
const ModelPackageGroupStatus = {
    COMPLETED: "Completed",
    DELETE_FAILED: "DeleteFailed",
    DELETING: "Deleting",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    PENDING: "Pending",
};
const ExecutionStatus = {
    COMPLETED: "Completed",
    COMPLETED_WITH_VIOLATIONS: "CompletedWithViolations",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    PENDING: "Pending",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
};
const ScheduleStatus = {
    FAILED: "Failed",
    PENDING: "Pending",
    SCHEDULED: "Scheduled",
    STOPPED: "Stopped",
};
const NotebookInstanceStatus = {
    Deleting: "Deleting",
    Failed: "Failed",
    InService: "InService",
    Pending: "Pending",
    Stopped: "Stopped",
    Stopping: "Stopping",
    Updating: "Updating",
};
const OptimizationJobStatus = {
    COMPLETED: "COMPLETED",
    FAILED: "FAILED",
    INPROGRESS: "INPROGRESS",
    STARTING: "STARTING",
    STOPPED: "STOPPED",
    STOPPING: "STOPPING",
};
const PartnerAppStatus = {
    AVAILABLE: "Available",
    CREATING: "Creating",
    DELETED: "Deleted",
    DELETING: "Deleting",
    FAILED: "Failed",
    UPDATE_FAILED: "UpdateFailed",
    UPDATING: "Updating",
};
const PipelineStatus = {
    ACTIVE: "Active",
    DELETING: "Deleting",
};
const PipelineExecutionStatus = {
    EXECUTING: "Executing",
    FAILED: "Failed",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
    SUCCEEDED: "Succeeded",
};
const ProcessingJobStatus = {
    COMPLETED: "Completed",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
};
const ProjectStatus = {
    CREATE_COMPLETED: "CreateCompleted",
    CREATE_FAILED: "CreateFailed",
    CREATE_IN_PROGRESS: "CreateInProgress",
    DELETE_COMPLETED: "DeleteCompleted",
    DELETE_FAILED: "DeleteFailed",
    DELETE_IN_PROGRESS: "DeleteInProgress",
    PENDING: "Pending",
    UPDATE_COMPLETED: "UpdateCompleted",
    UPDATE_FAILED: "UpdateFailed",
    UPDATE_IN_PROGRESS: "UpdateInProgress",
};
const ReservedCapacityInstanceType = {
    ML_P4DE_24XLARGE: "ml.p4de.24xlarge",
    ML_P4D_24XLARGE: "ml.p4d.24xlarge",
    ML_P5EN_48XLARGE: "ml.p5en.48xlarge",
    ML_P5E_48XLARGE: "ml.p5e.48xlarge",
    ML_P5_48XLARGE: "ml.p5.48xlarge",
    ML_P5_4XLARGE: "ml.p5.4xlarge",
    ML_P6E_GB200_36XLARGE: "ml.p6e-gb200.36xlarge",
    ML_P6_B200_48XLARGE: "ml.p6-b200.48xlarge",
    ML_TRN1_32XLARGE: "ml.trn1.32xlarge",
    ML_TRN2_48XLARGE: "ml.trn2.48xlarge",
};
const ReservedCapacityType = {
    INSTANCE: "Instance",
    ULTRASERVER: "UltraServer",
};
const ReservedCapacityStatus = {
    ACTIVE: "Active",
    EXPIRED: "Expired",
    FAILED: "Failed",
    PENDING: "Pending",
    SCHEDULED: "Scheduled",
};
const SpaceStatus = {
    Delete_Failed: "Delete_Failed",
    Deleting: "Deleting",
    Failed: "Failed",
    InService: "InService",
    Pending: "Pending",
    Update_Failed: "Update_Failed",
    Updating: "Updating",
};
const ProfilingStatus = {
    DISABLED: "Disabled",
    ENABLED: "Enabled",
};
const SecondaryStatus = {
    COMPLETED: "Completed",
    DOWNLOADING: "Downloading",
    DOWNLOADING_TRAINING_IMAGE: "DownloadingTrainingImage",
    FAILED: "Failed",
    INTERRUPTED: "Interrupted",
    LAUNCHING_ML_INSTANCES: "LaunchingMLInstances",
    MAX_RUNTIME_EXCEEDED: "MaxRuntimeExceeded",
    MAX_WAIT_TIME_EXCEEDED: "MaxWaitTimeExceeded",
    PENDING: "Pending",
    PREPARING_TRAINING_STACK: "PreparingTrainingStack",
    RESTARTING: "Restarting",
    STARTING: "Starting",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
    TRAINING: "Training",
    UPDATING: "Updating",
    UPLOADING: "Uploading",
};
const WarmPoolResourceStatus = {
    AVAILABLE: "Available",
    INUSE: "InUse",
    REUSED: "Reused",
    TERMINATED: "Terminated",
};
const TrainingPlanStatus = {
    ACTIVE: "Active",
    EXPIRED: "Expired",
    FAILED: "Failed",
    PENDING: "Pending",
    SCHEDULED: "Scheduled",
};
const SageMakerResourceName = {
    HYPERPOD_CLUSTER: "hyperpod-cluster",
    TRAINING_JOB: "training-job",
};
const TransformJobStatus = {
    COMPLETED: "Completed",
    FAILED: "Failed",
    IN_PROGRESS: "InProgress",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
};
const UserProfileStatus = {
    Delete_Failed: "Delete_Failed",
    Deleting: "Deleting",
    Failed: "Failed",
    InService: "InService",
    Pending: "Pending",
    Update_Failed: "Update_Failed",
    Updating: "Updating",
};
const WorkforceStatus = {
    ACTIVE: "Active",
    DELETING: "Deleting",
    FAILED: "Failed",
    INITIALIZING: "Initializing",
    UPDATING: "Updating",
};
const DeviceDeploymentStatus = {
    Deployed: "DEPLOYED",
    Failed: "FAILED",
    InProgress: "INPROGRESS",
    ReadyToDeploy: "READYTODEPLOY",
    Stopped: "STOPPED",
    Stopping: "STOPPING",
};
const Direction = {
    ASCENDANTS: "Ascendants",
    BOTH: "Both",
    DESCENDANTS: "Descendants",
};
exports.MetricSpecification = void 0;
(function (MetricSpecification) {
    MetricSpecification.visit = (value, visitor) => {
        if (value.Predefined !== undefined)
            return visitor.Predefined(value.Predefined);
        if (value.Customized !== undefined)
            return visitor.Customized(value.Customized);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.MetricSpecification || (exports.MetricSpecification = {}));
exports.ScalingPolicy = void 0;
(function (ScalingPolicy) {
    ScalingPolicy.visit = (value, visitor) => {
        if (value.TargetTracking !== undefined)
            return visitor.TargetTracking(value.TargetTracking);
        return visitor._(value.$unknown[0], value.$unknown[1]);
    };
})(exports.ScalingPolicy || (exports.ScalingPolicy = {}));
const EndpointConfigSortKey = {
    CreationTime: "CreationTime",
    Name: "Name",
};
const EndpointSortKey = {
    CreationTime: "CreationTime",
    Name: "Name",
    Status: "Status",
};
const EventSortBy = {
    EVENT_TIME: "EventTime",
};
const FeatureGroupSortBy = {
    CREATION_TIME: "CreationTime",
    FEATURE_GROUP_STATUS: "FeatureGroupStatus",
    NAME: "Name",
    OFFLINE_STORE_STATUS: "OfflineStoreStatus",
};
const FeatureGroupSortOrder = {
    ASCENDING: "Ascending",
    DESCENDING: "Descending",
};
const Operator = {
    CONTAINS: "Contains",
    EQUALS: "Equals",
    EXISTS: "Exists",
    GREATER_THAN: "GreaterThan",
    GREATER_THAN_OR_EQUAL_TO: "GreaterThanOrEqualTo",
    IN: "In",
    LESS_THAN: "LessThan",
    LESS_THAN_OR_EQUAL_TO: "LessThanOrEqualTo",
    NOT_EQUALS: "NotEquals",
    NOT_EXISTS: "NotExists",
};
const SagemakerServicecatalogStatus = {
    DISABLED: "Disabled",
    ENABLED: "Enabled",
};
const ResourceType = {
    ENDPOINT: "Endpoint",
    EXPERIMENT: "Experiment",
    EXPERIMENT_TRIAL: "ExperimentTrial",
    EXPERIMENT_TRIAL_COMPONENT: "ExperimentTrialComponent",
    FEATURE_GROUP: "FeatureGroup",
    FEATURE_METADATA: "FeatureMetadata",
    HYPER_PARAMETER_TUNING_JOB: "HyperParameterTuningJob",
    IMAGE: "Image",
    IMAGE_VERSION: "ImageVersion",
    MODEL: "Model",
    MODEL_CARD: "ModelCard",
    MODEL_PACKAGE: "ModelPackage",
    MODEL_PACKAGE_GROUP: "ModelPackageGroup",
    PIPELINE: "Pipeline",
    PIPELINE_EXECUTION: "PipelineExecution",
    PIPELINE_VERSION: "PipelineVersion",
    PROJECT: "Project",
    TRAINING_JOB: "TrainingJob",
};
const DescribeModelCardResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithyClient.SENSITIVE_STRING }),
});
const DescribeModelPackageOutputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ModelCard && { ModelCard: ModelPackageModelCardFilterSensitiveLog(obj.ModelCard) }),
});

class DescribeModelCardCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeModelCard", {})
    .n("SageMakerClient", "DescribeModelCardCommand")
    .f(void 0, DescribeModelCardResponseFilterSensitiveLog)
    .ser(se_DescribeModelCardCommand)
    .de(de_DescribeModelCardCommand)
    .build() {
}

class DescribeModelCardExportJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeModelCardExportJob", {})
    .n("SageMakerClient", "DescribeModelCardExportJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeModelCardExportJobCommand)
    .de(de_DescribeModelCardExportJobCommand)
    .build() {
}

class DescribeModelCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeModel", {})
    .n("SageMakerClient", "DescribeModelCommand")
    .f(void 0, void 0)
    .ser(se_DescribeModelCommand)
    .de(de_DescribeModelCommand)
    .build() {
}

class DescribeModelExplainabilityJobDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeModelExplainabilityJobDefinition", {})
    .n("SageMakerClient", "DescribeModelExplainabilityJobDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_DescribeModelExplainabilityJobDefinitionCommand)
    .de(de_DescribeModelExplainabilityJobDefinitionCommand)
    .build() {
}

class DescribeModelPackageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeModelPackage", {})
    .n("SageMakerClient", "DescribeModelPackageCommand")
    .f(void 0, DescribeModelPackageOutputFilterSensitiveLog)
    .ser(se_DescribeModelPackageCommand)
    .de(de_DescribeModelPackageCommand)
    .build() {
}

class DescribeModelPackageGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeModelPackageGroup", {})
    .n("SageMakerClient", "DescribeModelPackageGroupCommand")
    .f(void 0, void 0)
    .ser(se_DescribeModelPackageGroupCommand)
    .de(de_DescribeModelPackageGroupCommand)
    .build() {
}

class DescribeModelQualityJobDefinitionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeModelQualityJobDefinition", {})
    .n("SageMakerClient", "DescribeModelQualityJobDefinitionCommand")
    .f(void 0, void 0)
    .ser(se_DescribeModelQualityJobDefinitionCommand)
    .de(de_DescribeModelQualityJobDefinitionCommand)
    .build() {
}

class DescribeMonitoringScheduleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeMonitoringSchedule", {})
    .n("SageMakerClient", "DescribeMonitoringScheduleCommand")
    .f(void 0, void 0)
    .ser(se_DescribeMonitoringScheduleCommand)
    .de(de_DescribeMonitoringScheduleCommand)
    .build() {
}

class DescribeNotebookInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeNotebookInstance", {})
    .n("SageMakerClient", "DescribeNotebookInstanceCommand")
    .f(void 0, void 0)
    .ser(se_DescribeNotebookInstanceCommand)
    .de(de_DescribeNotebookInstanceCommand)
    .build() {
}

class DescribeNotebookInstanceLifecycleConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeNotebookInstanceLifecycleConfig", {})
    .n("SageMakerClient", "DescribeNotebookInstanceLifecycleConfigCommand")
    .f(void 0, void 0)
    .ser(se_DescribeNotebookInstanceLifecycleConfigCommand)
    .de(de_DescribeNotebookInstanceLifecycleConfigCommand)
    .build() {
}

class DescribeOptimizationJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeOptimizationJob", {})
    .n("SageMakerClient", "DescribeOptimizationJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeOptimizationJobCommand)
    .de(de_DescribeOptimizationJobCommand)
    .build() {
}

class DescribePartnerAppCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribePartnerApp", {})
    .n("SageMakerClient", "DescribePartnerAppCommand")
    .f(void 0, void 0)
    .ser(se_DescribePartnerAppCommand)
    .de(de_DescribePartnerAppCommand)
    .build() {
}

class DescribePipelineCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribePipeline", {})
    .n("SageMakerClient", "DescribePipelineCommand")
    .f(void 0, void 0)
    .ser(se_DescribePipelineCommand)
    .de(de_DescribePipelineCommand)
    .build() {
}

class DescribePipelineDefinitionForExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribePipelineDefinitionForExecution", {})
    .n("SageMakerClient", "DescribePipelineDefinitionForExecutionCommand")
    .f(void 0, void 0)
    .ser(se_DescribePipelineDefinitionForExecutionCommand)
    .de(de_DescribePipelineDefinitionForExecutionCommand)
    .build() {
}

class DescribePipelineExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribePipelineExecution", {})
    .n("SageMakerClient", "DescribePipelineExecutionCommand")
    .f(void 0, void 0)
    .ser(se_DescribePipelineExecutionCommand)
    .de(de_DescribePipelineExecutionCommand)
    .build() {
}

class DescribeProcessingJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeProcessingJob", {})
    .n("SageMakerClient", "DescribeProcessingJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeProcessingJobCommand)
    .de(de_DescribeProcessingJobCommand)
    .build() {
}

class DescribeProjectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeProject", {})
    .n("SageMakerClient", "DescribeProjectCommand")
    .f(void 0, void 0)
    .ser(se_DescribeProjectCommand)
    .de(de_DescribeProjectCommand)
    .build() {
}

class DescribeReservedCapacityCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeReservedCapacity", {})
    .n("SageMakerClient", "DescribeReservedCapacityCommand")
    .f(void 0, void 0)
    .ser(se_DescribeReservedCapacityCommand)
    .de(de_DescribeReservedCapacityCommand)
    .build() {
}

class DescribeSpaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeSpace", {})
    .n("SageMakerClient", "DescribeSpaceCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSpaceCommand)
    .de(de_DescribeSpaceCommand)
    .build() {
}

class DescribeStudioLifecycleConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeStudioLifecycleConfig", {})
    .n("SageMakerClient", "DescribeStudioLifecycleConfigCommand")
    .f(void 0, void 0)
    .ser(se_DescribeStudioLifecycleConfigCommand)
    .de(de_DescribeStudioLifecycleConfigCommand)
    .build() {
}

class DescribeSubscribedWorkteamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeSubscribedWorkteam", {})
    .n("SageMakerClient", "DescribeSubscribedWorkteamCommand")
    .f(void 0, void 0)
    .ser(se_DescribeSubscribedWorkteamCommand)
    .de(de_DescribeSubscribedWorkteamCommand)
    .build() {
}

class DescribeTrainingJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeTrainingJob", {})
    .n("SageMakerClient", "DescribeTrainingJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTrainingJobCommand)
    .de(de_DescribeTrainingJobCommand)
    .build() {
}

class DescribeTrainingPlanCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeTrainingPlan", {})
    .n("SageMakerClient", "DescribeTrainingPlanCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTrainingPlanCommand)
    .de(de_DescribeTrainingPlanCommand)
    .build() {
}

class DescribeTransformJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeTransformJob", {})
    .n("SageMakerClient", "DescribeTransformJobCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTransformJobCommand)
    .de(de_DescribeTransformJobCommand)
    .build() {
}

class DescribeTrialCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeTrial", {})
    .n("SageMakerClient", "DescribeTrialCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTrialCommand)
    .de(de_DescribeTrialCommand)
    .build() {
}

class DescribeTrialComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeTrialComponent", {})
    .n("SageMakerClient", "DescribeTrialComponentCommand")
    .f(void 0, void 0)
    .ser(se_DescribeTrialComponentCommand)
    .de(de_DescribeTrialComponentCommand)
    .build() {
}

class DescribeUserProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeUserProfile", {})
    .n("SageMakerClient", "DescribeUserProfileCommand")
    .f(void 0, void 0)
    .ser(se_DescribeUserProfileCommand)
    .de(de_DescribeUserProfileCommand)
    .build() {
}

class DescribeWorkforceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeWorkforce", {})
    .n("SageMakerClient", "DescribeWorkforceCommand")
    .f(void 0, void 0)
    .ser(se_DescribeWorkforceCommand)
    .de(de_DescribeWorkforceCommand)
    .build() {
}

class DescribeWorkteamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DescribeWorkteam", {})
    .n("SageMakerClient", "DescribeWorkteamCommand")
    .f(void 0, void 0)
    .ser(se_DescribeWorkteamCommand)
    .de(de_DescribeWorkteamCommand)
    .build() {
}

class DetachClusterNodeVolumeCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DetachClusterNodeVolume", {})
    .n("SageMakerClient", "DetachClusterNodeVolumeCommand")
    .f(void 0, void 0)
    .ser(se_DetachClusterNodeVolumeCommand)
    .de(de_DetachClusterNodeVolumeCommand)
    .build() {
}

class DisableSagemakerServicecatalogPortfolioCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DisableSagemakerServicecatalogPortfolio", {})
    .n("SageMakerClient", "DisableSagemakerServicecatalogPortfolioCommand")
    .f(void 0, void 0)
    .ser(se_DisableSagemakerServicecatalogPortfolioCommand)
    .de(de_DisableSagemakerServicecatalogPortfolioCommand)
    .build() {
}

class DisassociateTrialComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "DisassociateTrialComponent", {})
    .n("SageMakerClient", "DisassociateTrialComponentCommand")
    .f(void 0, void 0)
    .ser(se_DisassociateTrialComponentCommand)
    .de(de_DisassociateTrialComponentCommand)
    .build() {
}

class EnableSagemakerServicecatalogPortfolioCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "EnableSagemakerServicecatalogPortfolio", {})
    .n("SageMakerClient", "EnableSagemakerServicecatalogPortfolioCommand")
    .f(void 0, void 0)
    .ser(se_EnableSagemakerServicecatalogPortfolioCommand)
    .de(de_EnableSagemakerServicecatalogPortfolioCommand)
    .build() {
}

class GetDeviceFleetReportCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "GetDeviceFleetReport", {})
    .n("SageMakerClient", "GetDeviceFleetReportCommand")
    .f(void 0, void 0)
    .ser(se_GetDeviceFleetReportCommand)
    .de(de_GetDeviceFleetReportCommand)
    .build() {
}

class GetLineageGroupPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "GetLineageGroupPolicy", {})
    .n("SageMakerClient", "GetLineageGroupPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetLineageGroupPolicyCommand)
    .de(de_GetLineageGroupPolicyCommand)
    .build() {
}

class GetModelPackageGroupPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "GetModelPackageGroupPolicy", {})
    .n("SageMakerClient", "GetModelPackageGroupPolicyCommand")
    .f(void 0, void 0)
    .ser(se_GetModelPackageGroupPolicyCommand)
    .de(de_GetModelPackageGroupPolicyCommand)
    .build() {
}

class GetSagemakerServicecatalogPortfolioStatusCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "GetSagemakerServicecatalogPortfolioStatus", {})
    .n("SageMakerClient", "GetSagemakerServicecatalogPortfolioStatusCommand")
    .f(void 0, void 0)
    .ser(se_GetSagemakerServicecatalogPortfolioStatusCommand)
    .de(de_GetSagemakerServicecatalogPortfolioStatusCommand)
    .build() {
}

class GetScalingConfigurationRecommendationCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "GetScalingConfigurationRecommendation", {})
    .n("SageMakerClient", "GetScalingConfigurationRecommendationCommand")
    .f(void 0, void 0)
    .ser(se_GetScalingConfigurationRecommendationCommand)
    .de(de_GetScalingConfigurationRecommendationCommand)
    .build() {
}

class GetSearchSuggestionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "GetSearchSuggestions", {})
    .n("SageMakerClient", "GetSearchSuggestionsCommand")
    .f(void 0, void 0)
    .ser(se_GetSearchSuggestionsCommand)
    .de(de_GetSearchSuggestionsCommand)
    .build() {
}

class ImportHubContentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ImportHubContent", {})
    .n("SageMakerClient", "ImportHubContentCommand")
    .f(void 0, void 0)
    .ser(se_ImportHubContentCommand)
    .de(de_ImportHubContentCommand)
    .build() {
}

class ListActionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListActions", {})
    .n("SageMakerClient", "ListActionsCommand")
    .f(void 0, void 0)
    .ser(se_ListActionsCommand)
    .de(de_ListActionsCommand)
    .build() {
}

class ListAlgorithmsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListAlgorithms", {})
    .n("SageMakerClient", "ListAlgorithmsCommand")
    .f(void 0, void 0)
    .ser(se_ListAlgorithmsCommand)
    .de(de_ListAlgorithmsCommand)
    .build() {
}

class ListAliasesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListAliases", {})
    .n("SageMakerClient", "ListAliasesCommand")
    .f(void 0, void 0)
    .ser(se_ListAliasesCommand)
    .de(de_ListAliasesCommand)
    .build() {
}

class ListAppImageConfigsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListAppImageConfigs", {})
    .n("SageMakerClient", "ListAppImageConfigsCommand")
    .f(void 0, void 0)
    .ser(se_ListAppImageConfigsCommand)
    .de(de_ListAppImageConfigsCommand)
    .build() {
}

class ListAppsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListApps", {})
    .n("SageMakerClient", "ListAppsCommand")
    .f(void 0, void 0)
    .ser(se_ListAppsCommand)
    .de(de_ListAppsCommand)
    .build() {
}

class ListArtifactsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListArtifacts", {})
    .n("SageMakerClient", "ListArtifactsCommand")
    .f(void 0, void 0)
    .ser(se_ListArtifactsCommand)
    .de(de_ListArtifactsCommand)
    .build() {
}

class ListAssociationsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListAssociations", {})
    .n("SageMakerClient", "ListAssociationsCommand")
    .f(void 0, void 0)
    .ser(se_ListAssociationsCommand)
    .de(de_ListAssociationsCommand)
    .build() {
}

class ListAutoMLJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListAutoMLJobs", {})
    .n("SageMakerClient", "ListAutoMLJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListAutoMLJobsCommand)
    .de(de_ListAutoMLJobsCommand)
    .build() {
}

class ListCandidatesForAutoMLJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListCandidatesForAutoMLJob", {})
    .n("SageMakerClient", "ListCandidatesForAutoMLJobCommand")
    .f(void 0, void 0)
    .ser(se_ListCandidatesForAutoMLJobCommand)
    .de(de_ListCandidatesForAutoMLJobCommand)
    .build() {
}

class ListClusterEventsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListClusterEvents", {})
    .n("SageMakerClient", "ListClusterEventsCommand")
    .f(void 0, void 0)
    .ser(se_ListClusterEventsCommand)
    .de(de_ListClusterEventsCommand)
    .build() {
}

class ListClusterNodesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListClusterNodes", {})
    .n("SageMakerClient", "ListClusterNodesCommand")
    .f(void 0, void 0)
    .ser(se_ListClusterNodesCommand)
    .de(de_ListClusterNodesCommand)
    .build() {
}

class ListClusterSchedulerConfigsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListClusterSchedulerConfigs", {})
    .n("SageMakerClient", "ListClusterSchedulerConfigsCommand")
    .f(void 0, void 0)
    .ser(se_ListClusterSchedulerConfigsCommand)
    .de(de_ListClusterSchedulerConfigsCommand)
    .build() {
}

class ListClustersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListClusters", {})
    .n("SageMakerClient", "ListClustersCommand")
    .f(void 0, void 0)
    .ser(se_ListClustersCommand)
    .de(de_ListClustersCommand)
    .build() {
}

class ListCodeRepositoriesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListCodeRepositories", {})
    .n("SageMakerClient", "ListCodeRepositoriesCommand")
    .f(void 0, void 0)
    .ser(se_ListCodeRepositoriesCommand)
    .de(de_ListCodeRepositoriesCommand)
    .build() {
}

class ListCompilationJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListCompilationJobs", {})
    .n("SageMakerClient", "ListCompilationJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListCompilationJobsCommand)
    .de(de_ListCompilationJobsCommand)
    .build() {
}

class ListComputeQuotasCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListComputeQuotas", {})
    .n("SageMakerClient", "ListComputeQuotasCommand")
    .f(void 0, void 0)
    .ser(se_ListComputeQuotasCommand)
    .de(de_ListComputeQuotasCommand)
    .build() {
}

class ListContextsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListContexts", {})
    .n("SageMakerClient", "ListContextsCommand")
    .f(void 0, void 0)
    .ser(se_ListContextsCommand)
    .de(de_ListContextsCommand)
    .build() {
}

class ListDataQualityJobDefinitionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListDataQualityJobDefinitions", {})
    .n("SageMakerClient", "ListDataQualityJobDefinitionsCommand")
    .f(void 0, void 0)
    .ser(se_ListDataQualityJobDefinitionsCommand)
    .de(de_ListDataQualityJobDefinitionsCommand)
    .build() {
}

class ListDeviceFleetsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListDeviceFleets", {})
    .n("SageMakerClient", "ListDeviceFleetsCommand")
    .f(void 0, void 0)
    .ser(se_ListDeviceFleetsCommand)
    .de(de_ListDeviceFleetsCommand)
    .build() {
}

class ListDevicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListDevices", {})
    .n("SageMakerClient", "ListDevicesCommand")
    .f(void 0, void 0)
    .ser(se_ListDevicesCommand)
    .de(de_ListDevicesCommand)
    .build() {
}

class ListDomainsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListDomains", {})
    .n("SageMakerClient", "ListDomainsCommand")
    .f(void 0, void 0)
    .ser(se_ListDomainsCommand)
    .de(de_ListDomainsCommand)
    .build() {
}

class ListEdgeDeploymentPlansCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListEdgeDeploymentPlans", {})
    .n("SageMakerClient", "ListEdgeDeploymentPlansCommand")
    .f(void 0, void 0)
    .ser(se_ListEdgeDeploymentPlansCommand)
    .de(de_ListEdgeDeploymentPlansCommand)
    .build() {
}

class ListEdgePackagingJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListEdgePackagingJobs", {})
    .n("SageMakerClient", "ListEdgePackagingJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListEdgePackagingJobsCommand)
    .de(de_ListEdgePackagingJobsCommand)
    .build() {
}

class ListEndpointConfigsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListEndpointConfigs", {})
    .n("SageMakerClient", "ListEndpointConfigsCommand")
    .f(void 0, void 0)
    .ser(se_ListEndpointConfigsCommand)
    .de(de_ListEndpointConfigsCommand)
    .build() {
}

class ListEndpointsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListEndpoints", {})
    .n("SageMakerClient", "ListEndpointsCommand")
    .f(void 0, void 0)
    .ser(se_ListEndpointsCommand)
    .de(de_ListEndpointsCommand)
    .build() {
}

class ListExperimentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListExperiments", {})
    .n("SageMakerClient", "ListExperimentsCommand")
    .f(void 0, void 0)
    .ser(se_ListExperimentsCommand)
    .de(de_ListExperimentsCommand)
    .build() {
}

class ListFeatureGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListFeatureGroups", {})
    .n("SageMakerClient", "ListFeatureGroupsCommand")
    .f(void 0, void 0)
    .ser(se_ListFeatureGroupsCommand)
    .de(de_ListFeatureGroupsCommand)
    .build() {
}

class ListFlowDefinitionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListFlowDefinitions", {})
    .n("SageMakerClient", "ListFlowDefinitionsCommand")
    .f(void 0, void 0)
    .ser(se_ListFlowDefinitionsCommand)
    .de(de_ListFlowDefinitionsCommand)
    .build() {
}

class ListHubContentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListHubContents", {})
    .n("SageMakerClient", "ListHubContentsCommand")
    .f(void 0, void 0)
    .ser(se_ListHubContentsCommand)
    .de(de_ListHubContentsCommand)
    .build() {
}

class ListHubContentVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListHubContentVersions", {})
    .n("SageMakerClient", "ListHubContentVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListHubContentVersionsCommand)
    .de(de_ListHubContentVersionsCommand)
    .build() {
}

class ListHubsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListHubs", {})
    .n("SageMakerClient", "ListHubsCommand")
    .f(void 0, void 0)
    .ser(se_ListHubsCommand)
    .de(de_ListHubsCommand)
    .build() {
}

class ListHumanTaskUisCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListHumanTaskUis", {})
    .n("SageMakerClient", "ListHumanTaskUisCommand")
    .f(void 0, void 0)
    .ser(se_ListHumanTaskUisCommand)
    .de(de_ListHumanTaskUisCommand)
    .build() {
}

class ListHyperParameterTuningJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListHyperParameterTuningJobs", {})
    .n("SageMakerClient", "ListHyperParameterTuningJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListHyperParameterTuningJobsCommand)
    .de(de_ListHyperParameterTuningJobsCommand)
    .build() {
}

class ListImagesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListImages", {})
    .n("SageMakerClient", "ListImagesCommand")
    .f(void 0, void 0)
    .ser(se_ListImagesCommand)
    .de(de_ListImagesCommand)
    .build() {
}

class ListImageVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListImageVersions", {})
    .n("SageMakerClient", "ListImageVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListImageVersionsCommand)
    .de(de_ListImageVersionsCommand)
    .build() {
}

class ListInferenceComponentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListInferenceComponents", {})
    .n("SageMakerClient", "ListInferenceComponentsCommand")
    .f(void 0, void 0)
    .ser(se_ListInferenceComponentsCommand)
    .de(de_ListInferenceComponentsCommand)
    .build() {
}

class ListInferenceExperimentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListInferenceExperiments", {})
    .n("SageMakerClient", "ListInferenceExperimentsCommand")
    .f(void 0, void 0)
    .ser(se_ListInferenceExperimentsCommand)
    .de(de_ListInferenceExperimentsCommand)
    .build() {
}

class ListInferenceRecommendationsJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListInferenceRecommendationsJobs", {})
    .n("SageMakerClient", "ListInferenceRecommendationsJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListInferenceRecommendationsJobsCommand)
    .de(de_ListInferenceRecommendationsJobsCommand)
    .build() {
}

class ListInferenceRecommendationsJobStepsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListInferenceRecommendationsJobSteps", {})
    .n("SageMakerClient", "ListInferenceRecommendationsJobStepsCommand")
    .f(void 0, void 0)
    .ser(se_ListInferenceRecommendationsJobStepsCommand)
    .de(de_ListInferenceRecommendationsJobStepsCommand)
    .build() {
}

class ListLabelingJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListLabelingJobs", {})
    .n("SageMakerClient", "ListLabelingJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListLabelingJobsCommand)
    .de(de_ListLabelingJobsCommand)
    .build() {
}

class ListLabelingJobsForWorkteamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListLabelingJobsForWorkteam", {})
    .n("SageMakerClient", "ListLabelingJobsForWorkteamCommand")
    .f(void 0, void 0)
    .ser(se_ListLabelingJobsForWorkteamCommand)
    .de(de_ListLabelingJobsForWorkteamCommand)
    .build() {
}

class ListLineageGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListLineageGroups", {})
    .n("SageMakerClient", "ListLineageGroupsCommand")
    .f(void 0, void 0)
    .ser(se_ListLineageGroupsCommand)
    .de(de_ListLineageGroupsCommand)
    .build() {
}

class ListMlflowTrackingServersCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListMlflowTrackingServers", {})
    .n("SageMakerClient", "ListMlflowTrackingServersCommand")
    .f(void 0, void 0)
    .ser(se_ListMlflowTrackingServersCommand)
    .de(de_ListMlflowTrackingServersCommand)
    .build() {
}

class ListModelBiasJobDefinitionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListModelBiasJobDefinitions", {})
    .n("SageMakerClient", "ListModelBiasJobDefinitionsCommand")
    .f(void 0, void 0)
    .ser(se_ListModelBiasJobDefinitionsCommand)
    .de(de_ListModelBiasJobDefinitionsCommand)
    .build() {
}

class ListModelCardExportJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListModelCardExportJobs", {})
    .n("SageMakerClient", "ListModelCardExportJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListModelCardExportJobsCommand)
    .de(de_ListModelCardExportJobsCommand)
    .build() {
}

class ListModelCardsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListModelCards", {})
    .n("SageMakerClient", "ListModelCardsCommand")
    .f(void 0, void 0)
    .ser(se_ListModelCardsCommand)
    .de(de_ListModelCardsCommand)
    .build() {
}

class ListModelCardVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListModelCardVersions", {})
    .n("SageMakerClient", "ListModelCardVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListModelCardVersionsCommand)
    .de(de_ListModelCardVersionsCommand)
    .build() {
}

class ListModelExplainabilityJobDefinitionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListModelExplainabilityJobDefinitions", {})
    .n("SageMakerClient", "ListModelExplainabilityJobDefinitionsCommand")
    .f(void 0, void 0)
    .ser(se_ListModelExplainabilityJobDefinitionsCommand)
    .de(de_ListModelExplainabilityJobDefinitionsCommand)
    .build() {
}

class ListModelMetadataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListModelMetadata", {})
    .n("SageMakerClient", "ListModelMetadataCommand")
    .f(void 0, void 0)
    .ser(se_ListModelMetadataCommand)
    .de(de_ListModelMetadataCommand)
    .build() {
}

class ListModelPackageGroupsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListModelPackageGroups", {})
    .n("SageMakerClient", "ListModelPackageGroupsCommand")
    .f(void 0, void 0)
    .ser(se_ListModelPackageGroupsCommand)
    .de(de_ListModelPackageGroupsCommand)
    .build() {
}

class ListModelPackagesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListModelPackages", {})
    .n("SageMakerClient", "ListModelPackagesCommand")
    .f(void 0, void 0)
    .ser(se_ListModelPackagesCommand)
    .de(de_ListModelPackagesCommand)
    .build() {
}

class ListModelQualityJobDefinitionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListModelQualityJobDefinitions", {})
    .n("SageMakerClient", "ListModelQualityJobDefinitionsCommand")
    .f(void 0, void 0)
    .ser(se_ListModelQualityJobDefinitionsCommand)
    .de(de_ListModelQualityJobDefinitionsCommand)
    .build() {
}

class ListModelsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListModels", {})
    .n("SageMakerClient", "ListModelsCommand")
    .f(void 0, void 0)
    .ser(se_ListModelsCommand)
    .de(de_ListModelsCommand)
    .build() {
}

class ListMonitoringAlertHistoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListMonitoringAlertHistory", {})
    .n("SageMakerClient", "ListMonitoringAlertHistoryCommand")
    .f(void 0, void 0)
    .ser(se_ListMonitoringAlertHistoryCommand)
    .de(de_ListMonitoringAlertHistoryCommand)
    .build() {
}

class ListMonitoringAlertsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListMonitoringAlerts", {})
    .n("SageMakerClient", "ListMonitoringAlertsCommand")
    .f(void 0, void 0)
    .ser(se_ListMonitoringAlertsCommand)
    .de(de_ListMonitoringAlertsCommand)
    .build() {
}

class ListMonitoringExecutionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListMonitoringExecutions", {})
    .n("SageMakerClient", "ListMonitoringExecutionsCommand")
    .f(void 0, void 0)
    .ser(se_ListMonitoringExecutionsCommand)
    .de(de_ListMonitoringExecutionsCommand)
    .build() {
}

class ListMonitoringSchedulesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListMonitoringSchedules", {})
    .n("SageMakerClient", "ListMonitoringSchedulesCommand")
    .f(void 0, void 0)
    .ser(se_ListMonitoringSchedulesCommand)
    .de(de_ListMonitoringSchedulesCommand)
    .build() {
}

class ListNotebookInstanceLifecycleConfigsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListNotebookInstanceLifecycleConfigs", {})
    .n("SageMakerClient", "ListNotebookInstanceLifecycleConfigsCommand")
    .f(void 0, void 0)
    .ser(se_ListNotebookInstanceLifecycleConfigsCommand)
    .de(de_ListNotebookInstanceLifecycleConfigsCommand)
    .build() {
}

class ListNotebookInstancesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListNotebookInstances", {})
    .n("SageMakerClient", "ListNotebookInstancesCommand")
    .f(void 0, void 0)
    .ser(se_ListNotebookInstancesCommand)
    .de(de_ListNotebookInstancesCommand)
    .build() {
}

class ListOptimizationJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListOptimizationJobs", {})
    .n("SageMakerClient", "ListOptimizationJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListOptimizationJobsCommand)
    .de(de_ListOptimizationJobsCommand)
    .build() {
}

class ListPartnerAppsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListPartnerApps", {})
    .n("SageMakerClient", "ListPartnerAppsCommand")
    .f(void 0, void 0)
    .ser(se_ListPartnerAppsCommand)
    .de(de_ListPartnerAppsCommand)
    .build() {
}

class ListPipelineExecutionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListPipelineExecutions", {})
    .n("SageMakerClient", "ListPipelineExecutionsCommand")
    .f(void 0, void 0)
    .ser(se_ListPipelineExecutionsCommand)
    .de(de_ListPipelineExecutionsCommand)
    .build() {
}

class ListPipelineExecutionStepsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListPipelineExecutionSteps", {})
    .n("SageMakerClient", "ListPipelineExecutionStepsCommand")
    .f(void 0, void 0)
    .ser(se_ListPipelineExecutionStepsCommand)
    .de(de_ListPipelineExecutionStepsCommand)
    .build() {
}

class ListPipelineParametersForExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListPipelineParametersForExecution", {})
    .n("SageMakerClient", "ListPipelineParametersForExecutionCommand")
    .f(void 0, void 0)
    .ser(se_ListPipelineParametersForExecutionCommand)
    .de(de_ListPipelineParametersForExecutionCommand)
    .build() {
}

class ListPipelinesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListPipelines", {})
    .n("SageMakerClient", "ListPipelinesCommand")
    .f(void 0, void 0)
    .ser(se_ListPipelinesCommand)
    .de(de_ListPipelinesCommand)
    .build() {
}

class ListPipelineVersionsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListPipelineVersions", {})
    .n("SageMakerClient", "ListPipelineVersionsCommand")
    .f(void 0, void 0)
    .ser(se_ListPipelineVersionsCommand)
    .de(de_ListPipelineVersionsCommand)
    .build() {
}

class ListProcessingJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListProcessingJobs", {})
    .n("SageMakerClient", "ListProcessingJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListProcessingJobsCommand)
    .de(de_ListProcessingJobsCommand)
    .build() {
}

class ListProjectsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListProjects", {})
    .n("SageMakerClient", "ListProjectsCommand")
    .f(void 0, void 0)
    .ser(se_ListProjectsCommand)
    .de(de_ListProjectsCommand)
    .build() {
}

class ListResourceCatalogsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListResourceCatalogs", {})
    .n("SageMakerClient", "ListResourceCatalogsCommand")
    .f(void 0, void 0)
    .ser(se_ListResourceCatalogsCommand)
    .de(de_ListResourceCatalogsCommand)
    .build() {
}

class ListSpacesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListSpaces", {})
    .n("SageMakerClient", "ListSpacesCommand")
    .f(void 0, void 0)
    .ser(se_ListSpacesCommand)
    .de(de_ListSpacesCommand)
    .build() {
}

class ListStageDevicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListStageDevices", {})
    .n("SageMakerClient", "ListStageDevicesCommand")
    .f(void 0, void 0)
    .ser(se_ListStageDevicesCommand)
    .de(de_ListStageDevicesCommand)
    .build() {
}

class ListStudioLifecycleConfigsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListStudioLifecycleConfigs", {})
    .n("SageMakerClient", "ListStudioLifecycleConfigsCommand")
    .f(void 0, void 0)
    .ser(se_ListStudioLifecycleConfigsCommand)
    .de(de_ListStudioLifecycleConfigsCommand)
    .build() {
}

class ListSubscribedWorkteamsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListSubscribedWorkteams", {})
    .n("SageMakerClient", "ListSubscribedWorkteamsCommand")
    .f(void 0, void 0)
    .ser(se_ListSubscribedWorkteamsCommand)
    .de(de_ListSubscribedWorkteamsCommand)
    .build() {
}

class ListTagsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListTags", {})
    .n("SageMakerClient", "ListTagsCommand")
    .f(void 0, void 0)
    .ser(se_ListTagsCommand)
    .de(de_ListTagsCommand)
    .build() {
}

class ListTrainingJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListTrainingJobs", {})
    .n("SageMakerClient", "ListTrainingJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListTrainingJobsCommand)
    .de(de_ListTrainingJobsCommand)
    .build() {
}

class ListTrainingJobsForHyperParameterTuningJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListTrainingJobsForHyperParameterTuningJob", {})
    .n("SageMakerClient", "ListTrainingJobsForHyperParameterTuningJobCommand")
    .f(void 0, void 0)
    .ser(se_ListTrainingJobsForHyperParameterTuningJobCommand)
    .de(de_ListTrainingJobsForHyperParameterTuningJobCommand)
    .build() {
}

class ListTrainingPlansCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListTrainingPlans", {})
    .n("SageMakerClient", "ListTrainingPlansCommand")
    .f(void 0, void 0)
    .ser(se_ListTrainingPlansCommand)
    .de(de_ListTrainingPlansCommand)
    .build() {
}

class ListTransformJobsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListTransformJobs", {})
    .n("SageMakerClient", "ListTransformJobsCommand")
    .f(void 0, void 0)
    .ser(se_ListTransformJobsCommand)
    .de(de_ListTransformJobsCommand)
    .build() {
}

class ListTrialComponentsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListTrialComponents", {})
    .n("SageMakerClient", "ListTrialComponentsCommand")
    .f(void 0, void 0)
    .ser(se_ListTrialComponentsCommand)
    .de(de_ListTrialComponentsCommand)
    .build() {
}

class ListTrialsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListTrials", {})
    .n("SageMakerClient", "ListTrialsCommand")
    .f(void 0, void 0)
    .ser(se_ListTrialsCommand)
    .de(de_ListTrialsCommand)
    .build() {
}

class ListUltraServersByReservedCapacityCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListUltraServersByReservedCapacity", {})
    .n("SageMakerClient", "ListUltraServersByReservedCapacityCommand")
    .f(void 0, void 0)
    .ser(se_ListUltraServersByReservedCapacityCommand)
    .de(de_ListUltraServersByReservedCapacityCommand)
    .build() {
}

class ListUserProfilesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListUserProfiles", {})
    .n("SageMakerClient", "ListUserProfilesCommand")
    .f(void 0, void 0)
    .ser(se_ListUserProfilesCommand)
    .de(de_ListUserProfilesCommand)
    .build() {
}

class ListWorkforcesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListWorkforces", {})
    .n("SageMakerClient", "ListWorkforcesCommand")
    .f(void 0, void 0)
    .ser(se_ListWorkforcesCommand)
    .de(de_ListWorkforcesCommand)
    .build() {
}

class ListWorkteamsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "ListWorkteams", {})
    .n("SageMakerClient", "ListWorkteamsCommand")
    .f(void 0, void 0)
    .ser(se_ListWorkteamsCommand)
    .de(de_ListWorkteamsCommand)
    .build() {
}

class PutModelPackageGroupPolicyCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "PutModelPackageGroupPolicy", {})
    .n("SageMakerClient", "PutModelPackageGroupPolicyCommand")
    .f(void 0, void 0)
    .ser(se_PutModelPackageGroupPolicyCommand)
    .de(de_PutModelPackageGroupPolicyCommand)
    .build() {
}

class QueryLineageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "QueryLineage", {})
    .n("SageMakerClient", "QueryLineageCommand")
    .f(void 0, void 0)
    .ser(se_QueryLineageCommand)
    .de(de_QueryLineageCommand)
    .build() {
}

class RegisterDevicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "RegisterDevices", {})
    .n("SageMakerClient", "RegisterDevicesCommand")
    .f(void 0, void 0)
    .ser(se_RegisterDevicesCommand)
    .de(de_RegisterDevicesCommand)
    .build() {
}

class RenderUiTemplateCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "RenderUiTemplate", {})
    .n("SageMakerClient", "RenderUiTemplateCommand")
    .f(void 0, void 0)
    .ser(se_RenderUiTemplateCommand)
    .de(de_RenderUiTemplateCommand)
    .build() {
}

class RetryPipelineExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "RetryPipelineExecution", {})
    .n("SageMakerClient", "RetryPipelineExecutionCommand")
    .f(void 0, void 0)
    .ser(se_RetryPipelineExecutionCommand)
    .de(de_RetryPipelineExecutionCommand)
    .build() {
}

const UserProfileSortKey = {
    CreationTime: "CreationTime",
    LastModifiedTime: "LastModifiedTime",
};
const ListWorkforcesSortByOptions = {
    CreateDate: "CreateDate",
    Name: "Name",
};
const ListWorkteamsSortByOptions = {
    CreateDate: "CreateDate",
    Name: "Name",
};
const ModelVariantAction = {
    PROMOTE: "Promote",
    REMOVE: "Remove",
    RETAIN: "Retain",
};
const Relation = {
    EQUAL_TO: "EqualTo",
    GREATER_THAN_OR_EQUAL_TO: "GreaterThanOrEqualTo",
};
const SearchSortOrder = {
    ASCENDING: "Ascending",
    DESCENDING: "Descending",
};
const VariantPropertyType = {
    DataCaptureConfig: "DataCaptureConfig",
    DesiredInstanceCount: "DesiredInstanceCount",
    DesiredWeight: "DesiredWeight",
};
const ModelCardFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithyClient.SENSITIVE_STRING }),
});
const ModelPackageFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ModelCard && { ModelCard: ModelPackageModelCardFilterSensitiveLog(obj.ModelCard) }),
});
const SearchRecordFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.TrialComponent && { TrialComponent: obj.TrialComponent }),
    ...(obj.ModelPackage && { ModelPackage: ModelPackageFilterSensitiveLog(obj.ModelPackage) }),
    ...(obj.FeatureGroup && { FeatureGroup: obj.FeatureGroup }),
    ...(obj.ModelCard && { ModelCard: ModelCardFilterSensitiveLog(obj.ModelCard) }),
});
const SearchResponseFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Results && { Results: obj.Results.map((item) => SearchRecordFilterSensitiveLog(item)) }),
});
const UpdateModelCardRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.Content && { Content: smithyClient.SENSITIVE_STRING }),
});
const UpdateModelPackageInputFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.ModelCard && { ModelCard: ModelPackageModelCardFilterSensitiveLog(obj.ModelCard) }),
});
const UpdateWorkforceRequestFilterSensitiveLog = (obj) => ({
    ...obj,
    ...(obj.OidcConfig && { OidcConfig: OidcConfigFilterSensitiveLog(obj.OidcConfig) }),
});

class SearchCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "Search", {})
    .n("SageMakerClient", "SearchCommand")
    .f(void 0, SearchResponseFilterSensitiveLog)
    .ser(se_SearchCommand)
    .de(de_SearchCommand)
    .build() {
}

class SearchTrainingPlanOfferingsCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "SearchTrainingPlanOfferings", {})
    .n("SageMakerClient", "SearchTrainingPlanOfferingsCommand")
    .f(void 0, void 0)
    .ser(se_SearchTrainingPlanOfferingsCommand)
    .de(de_SearchTrainingPlanOfferingsCommand)
    .build() {
}

class SendPipelineExecutionStepFailureCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "SendPipelineExecutionStepFailure", {})
    .n("SageMakerClient", "SendPipelineExecutionStepFailureCommand")
    .f(void 0, void 0)
    .ser(se_SendPipelineExecutionStepFailureCommand)
    .de(de_SendPipelineExecutionStepFailureCommand)
    .build() {
}

class SendPipelineExecutionStepSuccessCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "SendPipelineExecutionStepSuccess", {})
    .n("SageMakerClient", "SendPipelineExecutionStepSuccessCommand")
    .f(void 0, void 0)
    .ser(se_SendPipelineExecutionStepSuccessCommand)
    .de(de_SendPipelineExecutionStepSuccessCommand)
    .build() {
}

class StartEdgeDeploymentStageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StartEdgeDeploymentStage", {})
    .n("SageMakerClient", "StartEdgeDeploymentStageCommand")
    .f(void 0, void 0)
    .ser(se_StartEdgeDeploymentStageCommand)
    .de(de_StartEdgeDeploymentStageCommand)
    .build() {
}

class StartInferenceExperimentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StartInferenceExperiment", {})
    .n("SageMakerClient", "StartInferenceExperimentCommand")
    .f(void 0, void 0)
    .ser(se_StartInferenceExperimentCommand)
    .de(de_StartInferenceExperimentCommand)
    .build() {
}

class StartMlflowTrackingServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StartMlflowTrackingServer", {})
    .n("SageMakerClient", "StartMlflowTrackingServerCommand")
    .f(void 0, void 0)
    .ser(se_StartMlflowTrackingServerCommand)
    .de(de_StartMlflowTrackingServerCommand)
    .build() {
}

class StartMonitoringScheduleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StartMonitoringSchedule", {})
    .n("SageMakerClient", "StartMonitoringScheduleCommand")
    .f(void 0, void 0)
    .ser(se_StartMonitoringScheduleCommand)
    .de(de_StartMonitoringScheduleCommand)
    .build() {
}

class StartNotebookInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StartNotebookInstance", {})
    .n("SageMakerClient", "StartNotebookInstanceCommand")
    .f(void 0, void 0)
    .ser(se_StartNotebookInstanceCommand)
    .de(de_StartNotebookInstanceCommand)
    .build() {
}

class StartPipelineExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StartPipelineExecution", {})
    .n("SageMakerClient", "StartPipelineExecutionCommand")
    .f(void 0, void 0)
    .ser(se_StartPipelineExecutionCommand)
    .de(de_StartPipelineExecutionCommand)
    .build() {
}

class StartSessionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StartSession", {})
    .n("SageMakerClient", "StartSessionCommand")
    .f(void 0, void 0)
    .ser(se_StartSessionCommand)
    .de(de_StartSessionCommand)
    .build() {
}

class StopAutoMLJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopAutoMLJob", {})
    .n("SageMakerClient", "StopAutoMLJobCommand")
    .f(void 0, void 0)
    .ser(se_StopAutoMLJobCommand)
    .de(de_StopAutoMLJobCommand)
    .build() {
}

class StopCompilationJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopCompilationJob", {})
    .n("SageMakerClient", "StopCompilationJobCommand")
    .f(void 0, void 0)
    .ser(se_StopCompilationJobCommand)
    .de(de_StopCompilationJobCommand)
    .build() {
}

class StopEdgeDeploymentStageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopEdgeDeploymentStage", {})
    .n("SageMakerClient", "StopEdgeDeploymentStageCommand")
    .f(void 0, void 0)
    .ser(se_StopEdgeDeploymentStageCommand)
    .de(de_StopEdgeDeploymentStageCommand)
    .build() {
}

class StopEdgePackagingJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopEdgePackagingJob", {})
    .n("SageMakerClient", "StopEdgePackagingJobCommand")
    .f(void 0, void 0)
    .ser(se_StopEdgePackagingJobCommand)
    .de(de_StopEdgePackagingJobCommand)
    .build() {
}

class StopHyperParameterTuningJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopHyperParameterTuningJob", {})
    .n("SageMakerClient", "StopHyperParameterTuningJobCommand")
    .f(void 0, void 0)
    .ser(se_StopHyperParameterTuningJobCommand)
    .de(de_StopHyperParameterTuningJobCommand)
    .build() {
}

class StopInferenceExperimentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopInferenceExperiment", {})
    .n("SageMakerClient", "StopInferenceExperimentCommand")
    .f(void 0, void 0)
    .ser(se_StopInferenceExperimentCommand)
    .de(de_StopInferenceExperimentCommand)
    .build() {
}

class StopInferenceRecommendationsJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopInferenceRecommendationsJob", {})
    .n("SageMakerClient", "StopInferenceRecommendationsJobCommand")
    .f(void 0, void 0)
    .ser(se_StopInferenceRecommendationsJobCommand)
    .de(de_StopInferenceRecommendationsJobCommand)
    .build() {
}

class StopLabelingJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopLabelingJob", {})
    .n("SageMakerClient", "StopLabelingJobCommand")
    .f(void 0, void 0)
    .ser(se_StopLabelingJobCommand)
    .de(de_StopLabelingJobCommand)
    .build() {
}

class StopMlflowTrackingServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopMlflowTrackingServer", {})
    .n("SageMakerClient", "StopMlflowTrackingServerCommand")
    .f(void 0, void 0)
    .ser(se_StopMlflowTrackingServerCommand)
    .de(de_StopMlflowTrackingServerCommand)
    .build() {
}

class StopMonitoringScheduleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopMonitoringSchedule", {})
    .n("SageMakerClient", "StopMonitoringScheduleCommand")
    .f(void 0, void 0)
    .ser(se_StopMonitoringScheduleCommand)
    .de(de_StopMonitoringScheduleCommand)
    .build() {
}

class StopNotebookInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopNotebookInstance", {})
    .n("SageMakerClient", "StopNotebookInstanceCommand")
    .f(void 0, void 0)
    .ser(se_StopNotebookInstanceCommand)
    .de(de_StopNotebookInstanceCommand)
    .build() {
}

class StopOptimizationJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopOptimizationJob", {})
    .n("SageMakerClient", "StopOptimizationJobCommand")
    .f(void 0, void 0)
    .ser(se_StopOptimizationJobCommand)
    .de(de_StopOptimizationJobCommand)
    .build() {
}

class StopPipelineExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopPipelineExecution", {})
    .n("SageMakerClient", "StopPipelineExecutionCommand")
    .f(void 0, void 0)
    .ser(se_StopPipelineExecutionCommand)
    .de(de_StopPipelineExecutionCommand)
    .build() {
}

class StopProcessingJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopProcessingJob", {})
    .n("SageMakerClient", "StopProcessingJobCommand")
    .f(void 0, void 0)
    .ser(se_StopProcessingJobCommand)
    .de(de_StopProcessingJobCommand)
    .build() {
}

class StopTrainingJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopTrainingJob", {})
    .n("SageMakerClient", "StopTrainingJobCommand")
    .f(void 0, void 0)
    .ser(se_StopTrainingJobCommand)
    .de(de_StopTrainingJobCommand)
    .build() {
}

class StopTransformJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "StopTransformJob", {})
    .n("SageMakerClient", "StopTransformJobCommand")
    .f(void 0, void 0)
    .ser(se_StopTransformJobCommand)
    .de(de_StopTransformJobCommand)
    .build() {
}

class UpdateActionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateAction", {})
    .n("SageMakerClient", "UpdateActionCommand")
    .f(void 0, void 0)
    .ser(se_UpdateActionCommand)
    .de(de_UpdateActionCommand)
    .build() {
}

class UpdateAppImageConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateAppImageConfig", {})
    .n("SageMakerClient", "UpdateAppImageConfigCommand")
    .f(void 0, void 0)
    .ser(se_UpdateAppImageConfigCommand)
    .de(de_UpdateAppImageConfigCommand)
    .build() {
}

class UpdateArtifactCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateArtifact", {})
    .n("SageMakerClient", "UpdateArtifactCommand")
    .f(void 0, void 0)
    .ser(se_UpdateArtifactCommand)
    .de(de_UpdateArtifactCommand)
    .build() {
}

class UpdateClusterCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateCluster", {})
    .n("SageMakerClient", "UpdateClusterCommand")
    .f(void 0, void 0)
    .ser(se_UpdateClusterCommand)
    .de(de_UpdateClusterCommand)
    .build() {
}

class UpdateClusterSchedulerConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateClusterSchedulerConfig", {})
    .n("SageMakerClient", "UpdateClusterSchedulerConfigCommand")
    .f(void 0, void 0)
    .ser(se_UpdateClusterSchedulerConfigCommand)
    .de(de_UpdateClusterSchedulerConfigCommand)
    .build() {
}

class UpdateClusterSoftwareCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateClusterSoftware", {})
    .n("SageMakerClient", "UpdateClusterSoftwareCommand")
    .f(void 0, void 0)
    .ser(se_UpdateClusterSoftwareCommand)
    .de(de_UpdateClusterSoftwareCommand)
    .build() {
}

class UpdateCodeRepositoryCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateCodeRepository", {})
    .n("SageMakerClient", "UpdateCodeRepositoryCommand")
    .f(void 0, void 0)
    .ser(se_UpdateCodeRepositoryCommand)
    .de(de_UpdateCodeRepositoryCommand)
    .build() {
}

class UpdateComputeQuotaCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateComputeQuota", {})
    .n("SageMakerClient", "UpdateComputeQuotaCommand")
    .f(void 0, void 0)
    .ser(se_UpdateComputeQuotaCommand)
    .de(de_UpdateComputeQuotaCommand)
    .build() {
}

class UpdateContextCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateContext", {})
    .n("SageMakerClient", "UpdateContextCommand")
    .f(void 0, void 0)
    .ser(se_UpdateContextCommand)
    .de(de_UpdateContextCommand)
    .build() {
}

class UpdateDeviceFleetCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateDeviceFleet", {})
    .n("SageMakerClient", "UpdateDeviceFleetCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDeviceFleetCommand)
    .de(de_UpdateDeviceFleetCommand)
    .build() {
}

class UpdateDevicesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateDevices", {})
    .n("SageMakerClient", "UpdateDevicesCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDevicesCommand)
    .de(de_UpdateDevicesCommand)
    .build() {
}

class UpdateDomainCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateDomain", {})
    .n("SageMakerClient", "UpdateDomainCommand")
    .f(void 0, void 0)
    .ser(se_UpdateDomainCommand)
    .de(de_UpdateDomainCommand)
    .build() {
}

class UpdateEndpointCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateEndpoint", {})
    .n("SageMakerClient", "UpdateEndpointCommand")
    .f(void 0, void 0)
    .ser(se_UpdateEndpointCommand)
    .de(de_UpdateEndpointCommand)
    .build() {
}

class UpdateEndpointWeightsAndCapacitiesCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateEndpointWeightsAndCapacities", {})
    .n("SageMakerClient", "UpdateEndpointWeightsAndCapacitiesCommand")
    .f(void 0, void 0)
    .ser(se_UpdateEndpointWeightsAndCapacitiesCommand)
    .de(de_UpdateEndpointWeightsAndCapacitiesCommand)
    .build() {
}

class UpdateExperimentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateExperiment", {})
    .n("SageMakerClient", "UpdateExperimentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateExperimentCommand)
    .de(de_UpdateExperimentCommand)
    .build() {
}

class UpdateFeatureGroupCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateFeatureGroup", {})
    .n("SageMakerClient", "UpdateFeatureGroupCommand")
    .f(void 0, void 0)
    .ser(se_UpdateFeatureGroupCommand)
    .de(de_UpdateFeatureGroupCommand)
    .build() {
}

class UpdateFeatureMetadataCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateFeatureMetadata", {})
    .n("SageMakerClient", "UpdateFeatureMetadataCommand")
    .f(void 0, void 0)
    .ser(se_UpdateFeatureMetadataCommand)
    .de(de_UpdateFeatureMetadataCommand)
    .build() {
}

class UpdateHubCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateHub", {})
    .n("SageMakerClient", "UpdateHubCommand")
    .f(void 0, void 0)
    .ser(se_UpdateHubCommand)
    .de(de_UpdateHubCommand)
    .build() {
}

class UpdateHubContentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateHubContent", {})
    .n("SageMakerClient", "UpdateHubContentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateHubContentCommand)
    .de(de_UpdateHubContentCommand)
    .build() {
}

class UpdateHubContentReferenceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateHubContentReference", {})
    .n("SageMakerClient", "UpdateHubContentReferenceCommand")
    .f(void 0, void 0)
    .ser(se_UpdateHubContentReferenceCommand)
    .de(de_UpdateHubContentReferenceCommand)
    .build() {
}

class UpdateImageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateImage", {})
    .n("SageMakerClient", "UpdateImageCommand")
    .f(void 0, void 0)
    .ser(se_UpdateImageCommand)
    .de(de_UpdateImageCommand)
    .build() {
}

class UpdateImageVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateImageVersion", {})
    .n("SageMakerClient", "UpdateImageVersionCommand")
    .f(void 0, void 0)
    .ser(se_UpdateImageVersionCommand)
    .de(de_UpdateImageVersionCommand)
    .build() {
}

class UpdateInferenceComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateInferenceComponent", {})
    .n("SageMakerClient", "UpdateInferenceComponentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateInferenceComponentCommand)
    .de(de_UpdateInferenceComponentCommand)
    .build() {
}

class UpdateInferenceComponentRuntimeConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateInferenceComponentRuntimeConfig", {})
    .n("SageMakerClient", "UpdateInferenceComponentRuntimeConfigCommand")
    .f(void 0, void 0)
    .ser(se_UpdateInferenceComponentRuntimeConfigCommand)
    .de(de_UpdateInferenceComponentRuntimeConfigCommand)
    .build() {
}

class UpdateInferenceExperimentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateInferenceExperiment", {})
    .n("SageMakerClient", "UpdateInferenceExperimentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateInferenceExperimentCommand)
    .de(de_UpdateInferenceExperimentCommand)
    .build() {
}

class UpdateMlflowTrackingServerCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateMlflowTrackingServer", {})
    .n("SageMakerClient", "UpdateMlflowTrackingServerCommand")
    .f(void 0, void 0)
    .ser(se_UpdateMlflowTrackingServerCommand)
    .de(de_UpdateMlflowTrackingServerCommand)
    .build() {
}

class UpdateModelCardCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateModelCard", {})
    .n("SageMakerClient", "UpdateModelCardCommand")
    .f(UpdateModelCardRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateModelCardCommand)
    .de(de_UpdateModelCardCommand)
    .build() {
}

class UpdateModelPackageCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateModelPackage", {})
    .n("SageMakerClient", "UpdateModelPackageCommand")
    .f(UpdateModelPackageInputFilterSensitiveLog, void 0)
    .ser(se_UpdateModelPackageCommand)
    .de(de_UpdateModelPackageCommand)
    .build() {
}

class UpdateMonitoringAlertCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateMonitoringAlert", {})
    .n("SageMakerClient", "UpdateMonitoringAlertCommand")
    .f(void 0, void 0)
    .ser(se_UpdateMonitoringAlertCommand)
    .de(de_UpdateMonitoringAlertCommand)
    .build() {
}

class UpdateMonitoringScheduleCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateMonitoringSchedule", {})
    .n("SageMakerClient", "UpdateMonitoringScheduleCommand")
    .f(void 0, void 0)
    .ser(se_UpdateMonitoringScheduleCommand)
    .de(de_UpdateMonitoringScheduleCommand)
    .build() {
}

class UpdateNotebookInstanceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateNotebookInstance", {})
    .n("SageMakerClient", "UpdateNotebookInstanceCommand")
    .f(void 0, void 0)
    .ser(se_UpdateNotebookInstanceCommand)
    .de(de_UpdateNotebookInstanceCommand)
    .build() {
}

class UpdateNotebookInstanceLifecycleConfigCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateNotebookInstanceLifecycleConfig", {})
    .n("SageMakerClient", "UpdateNotebookInstanceLifecycleConfigCommand")
    .f(void 0, void 0)
    .ser(se_UpdateNotebookInstanceLifecycleConfigCommand)
    .de(de_UpdateNotebookInstanceLifecycleConfigCommand)
    .build() {
}

class UpdatePartnerAppCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdatePartnerApp", {})
    .n("SageMakerClient", "UpdatePartnerAppCommand")
    .f(void 0, void 0)
    .ser(se_UpdatePartnerAppCommand)
    .de(de_UpdatePartnerAppCommand)
    .build() {
}

class UpdatePipelineCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdatePipeline", {})
    .n("SageMakerClient", "UpdatePipelineCommand")
    .f(void 0, void 0)
    .ser(se_UpdatePipelineCommand)
    .de(de_UpdatePipelineCommand)
    .build() {
}

class UpdatePipelineExecutionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdatePipelineExecution", {})
    .n("SageMakerClient", "UpdatePipelineExecutionCommand")
    .f(void 0, void 0)
    .ser(se_UpdatePipelineExecutionCommand)
    .de(de_UpdatePipelineExecutionCommand)
    .build() {
}

class UpdatePipelineVersionCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdatePipelineVersion", {})
    .n("SageMakerClient", "UpdatePipelineVersionCommand")
    .f(void 0, void 0)
    .ser(se_UpdatePipelineVersionCommand)
    .de(de_UpdatePipelineVersionCommand)
    .build() {
}

class UpdateProjectCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateProject", {})
    .n("SageMakerClient", "UpdateProjectCommand")
    .f(void 0, void 0)
    .ser(se_UpdateProjectCommand)
    .de(de_UpdateProjectCommand)
    .build() {
}

class UpdateSpaceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateSpace", {})
    .n("SageMakerClient", "UpdateSpaceCommand")
    .f(void 0, void 0)
    .ser(se_UpdateSpaceCommand)
    .de(de_UpdateSpaceCommand)
    .build() {
}

class UpdateTrainingJobCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateTrainingJob", {})
    .n("SageMakerClient", "UpdateTrainingJobCommand")
    .f(void 0, void 0)
    .ser(se_UpdateTrainingJobCommand)
    .de(de_UpdateTrainingJobCommand)
    .build() {
}

class UpdateTrialCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateTrial", {})
    .n("SageMakerClient", "UpdateTrialCommand")
    .f(void 0, void 0)
    .ser(se_UpdateTrialCommand)
    .de(de_UpdateTrialCommand)
    .build() {
}

class UpdateTrialComponentCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateTrialComponent", {})
    .n("SageMakerClient", "UpdateTrialComponentCommand")
    .f(void 0, void 0)
    .ser(se_UpdateTrialComponentCommand)
    .de(de_UpdateTrialComponentCommand)
    .build() {
}

class UpdateUserProfileCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateUserProfile", {})
    .n("SageMakerClient", "UpdateUserProfileCommand")
    .f(void 0, void 0)
    .ser(se_UpdateUserProfileCommand)
    .de(de_UpdateUserProfileCommand)
    .build() {
}

class UpdateWorkforceCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateWorkforce", {})
    .n("SageMakerClient", "UpdateWorkforceCommand")
    .f(UpdateWorkforceRequestFilterSensitiveLog, void 0)
    .ser(se_UpdateWorkforceCommand)
    .de(de_UpdateWorkforceCommand)
    .build() {
}

class UpdateWorkteamCommand extends smithyClient.Command
    .classBuilder()
    .ep(commonParams)
    .m(function (Command, cs, config, o) {
    return [
        middlewareSerde.getSerdePlugin(config, this.serialize, this.deserialize),
        middlewareEndpoint.getEndpointPlugin(config, Command.getEndpointParameterInstructions()),
    ];
})
    .s("SageMaker", "UpdateWorkteam", {})
    .n("SageMakerClient", "UpdateWorkteamCommand")
    .f(void 0, void 0)
    .ser(se_UpdateWorkteamCommand)
    .de(de_UpdateWorkteamCommand)
    .build() {
}

const commands = {
    AddAssociationCommand,
    AddTagsCommand,
    AssociateTrialComponentCommand,
    AttachClusterNodeVolumeCommand,
    BatchAddClusterNodesCommand,
    BatchDeleteClusterNodesCommand,
    BatchDescribeModelPackageCommand,
    CreateActionCommand,
    CreateAlgorithmCommand,
    CreateAppCommand,
    CreateAppImageConfigCommand,
    CreateArtifactCommand,
    CreateAutoMLJobCommand,
    CreateAutoMLJobV2Command,
    CreateClusterCommand,
    CreateClusterSchedulerConfigCommand,
    CreateCodeRepositoryCommand,
    CreateCompilationJobCommand,
    CreateComputeQuotaCommand,
    CreateContextCommand,
    CreateDataQualityJobDefinitionCommand,
    CreateDeviceFleetCommand,
    CreateDomainCommand,
    CreateEdgeDeploymentPlanCommand,
    CreateEdgeDeploymentStageCommand,
    CreateEdgePackagingJobCommand,
    CreateEndpointCommand,
    CreateEndpointConfigCommand,
    CreateExperimentCommand,
    CreateFeatureGroupCommand,
    CreateFlowDefinitionCommand,
    CreateHubCommand,
    CreateHubContentPresignedUrlsCommand,
    CreateHubContentReferenceCommand,
    CreateHumanTaskUiCommand,
    CreateHyperParameterTuningJobCommand,
    CreateImageCommand,
    CreateImageVersionCommand,
    CreateInferenceComponentCommand,
    CreateInferenceExperimentCommand,
    CreateInferenceRecommendationsJobCommand,
    CreateLabelingJobCommand,
    CreateMlflowTrackingServerCommand,
    CreateModelCommand,
    CreateModelBiasJobDefinitionCommand,
    CreateModelCardCommand,
    CreateModelCardExportJobCommand,
    CreateModelExplainabilityJobDefinitionCommand,
    CreateModelPackageCommand,
    CreateModelPackageGroupCommand,
    CreateModelQualityJobDefinitionCommand,
    CreateMonitoringScheduleCommand,
    CreateNotebookInstanceCommand,
    CreateNotebookInstanceLifecycleConfigCommand,
    CreateOptimizationJobCommand,
    CreatePartnerAppCommand,
    CreatePartnerAppPresignedUrlCommand,
    CreatePipelineCommand,
    CreatePresignedDomainUrlCommand,
    CreatePresignedMlflowTrackingServerUrlCommand,
    CreatePresignedNotebookInstanceUrlCommand,
    CreateProcessingJobCommand,
    CreateProjectCommand,
    CreateSpaceCommand,
    CreateStudioLifecycleConfigCommand,
    CreateTrainingJobCommand,
    CreateTrainingPlanCommand,
    CreateTransformJobCommand,
    CreateTrialCommand,
    CreateTrialComponentCommand,
    CreateUserProfileCommand,
    CreateWorkforceCommand,
    CreateWorkteamCommand,
    DeleteActionCommand,
    DeleteAlgorithmCommand,
    DeleteAppCommand,
    DeleteAppImageConfigCommand,
    DeleteArtifactCommand,
    DeleteAssociationCommand,
    DeleteClusterCommand,
    DeleteClusterSchedulerConfigCommand,
    DeleteCodeRepositoryCommand,
    DeleteCompilationJobCommand,
    DeleteComputeQuotaCommand,
    DeleteContextCommand,
    DeleteDataQualityJobDefinitionCommand,
    DeleteDeviceFleetCommand,
    DeleteDomainCommand,
    DeleteEdgeDeploymentPlanCommand,
    DeleteEdgeDeploymentStageCommand,
    DeleteEndpointCommand,
    DeleteEndpointConfigCommand,
    DeleteExperimentCommand,
    DeleteFeatureGroupCommand,
    DeleteFlowDefinitionCommand,
    DeleteHubCommand,
    DeleteHubContentCommand,
    DeleteHubContentReferenceCommand,
    DeleteHumanTaskUiCommand,
    DeleteHyperParameterTuningJobCommand,
    DeleteImageCommand,
    DeleteImageVersionCommand,
    DeleteInferenceComponentCommand,
    DeleteInferenceExperimentCommand,
    DeleteMlflowTrackingServerCommand,
    DeleteModelCommand,
    DeleteModelBiasJobDefinitionCommand,
    DeleteModelCardCommand,
    DeleteModelExplainabilityJobDefinitionCommand,
    DeleteModelPackageCommand,
    DeleteModelPackageGroupCommand,
    DeleteModelPackageGroupPolicyCommand,
    DeleteModelQualityJobDefinitionCommand,
    DeleteMonitoringScheduleCommand,
    DeleteNotebookInstanceCommand,
    DeleteNotebookInstanceLifecycleConfigCommand,
    DeleteOptimizationJobCommand,
    DeletePartnerAppCommand,
    DeletePipelineCommand,
    DeleteProjectCommand,
    DeleteSpaceCommand,
    DeleteStudioLifecycleConfigCommand,
    DeleteTagsCommand,
    DeleteTrialCommand,
    DeleteTrialComponentCommand,
    DeleteUserProfileCommand,
    DeleteWorkforceCommand,
    DeleteWorkteamCommand,
    DeregisterDevicesCommand,
    DescribeActionCommand,
    DescribeAlgorithmCommand,
    DescribeAppCommand,
    DescribeAppImageConfigCommand,
    DescribeArtifactCommand,
    DescribeAutoMLJobCommand,
    DescribeAutoMLJobV2Command,
    DescribeClusterCommand,
    DescribeClusterEventCommand,
    DescribeClusterNodeCommand,
    DescribeClusterSchedulerConfigCommand,
    DescribeCodeRepositoryCommand,
    DescribeCompilationJobCommand,
    DescribeComputeQuotaCommand,
    DescribeContextCommand,
    DescribeDataQualityJobDefinitionCommand,
    DescribeDeviceCommand,
    DescribeDeviceFleetCommand,
    DescribeDomainCommand,
    DescribeEdgeDeploymentPlanCommand,
    DescribeEdgePackagingJobCommand,
    DescribeEndpointCommand,
    DescribeEndpointConfigCommand,
    DescribeExperimentCommand,
    DescribeFeatureGroupCommand,
    DescribeFeatureMetadataCommand,
    DescribeFlowDefinitionCommand,
    DescribeHubCommand,
    DescribeHubContentCommand,
    DescribeHumanTaskUiCommand,
    DescribeHyperParameterTuningJobCommand,
    DescribeImageCommand,
    DescribeImageVersionCommand,
    DescribeInferenceComponentCommand,
    DescribeInferenceExperimentCommand,
    DescribeInferenceRecommendationsJobCommand,
    DescribeLabelingJobCommand,
    DescribeLineageGroupCommand,
    DescribeMlflowTrackingServerCommand,
    DescribeModelCommand,
    DescribeModelBiasJobDefinitionCommand,
    DescribeModelCardCommand,
    DescribeModelCardExportJobCommand,
    DescribeModelExplainabilityJobDefinitionCommand,
    DescribeModelPackageCommand,
    DescribeModelPackageGroupCommand,
    DescribeModelQualityJobDefinitionCommand,
    DescribeMonitoringScheduleCommand,
    DescribeNotebookInstanceCommand,
    DescribeNotebookInstanceLifecycleConfigCommand,
    DescribeOptimizationJobCommand,
    DescribePartnerAppCommand,
    DescribePipelineCommand,
    DescribePipelineDefinitionForExecutionCommand,
    DescribePipelineExecutionCommand,
    DescribeProcessingJobCommand,
    DescribeProjectCommand,
    DescribeReservedCapacityCommand,
    DescribeSpaceCommand,
    DescribeStudioLifecycleConfigCommand,
    DescribeSubscribedWorkteamCommand,
    DescribeTrainingJobCommand,
    DescribeTrainingPlanCommand,
    DescribeTransformJobCommand,
    DescribeTrialCommand,
    DescribeTrialComponentCommand,
    DescribeUserProfileCommand,
    DescribeWorkforceCommand,
    DescribeWorkteamCommand,
    DetachClusterNodeVolumeCommand,
    DisableSagemakerServicecatalogPortfolioCommand,
    DisassociateTrialComponentCommand,
    EnableSagemakerServicecatalogPortfolioCommand,
    GetDeviceFleetReportCommand,
    GetLineageGroupPolicyCommand,
    GetModelPackageGroupPolicyCommand,
    GetSagemakerServicecatalogPortfolioStatusCommand,
    GetScalingConfigurationRecommendationCommand,
    GetSearchSuggestionsCommand,
    ImportHubContentCommand,
    ListActionsCommand,
    ListAlgorithmsCommand,
    ListAliasesCommand,
    ListAppImageConfigsCommand,
    ListAppsCommand,
    ListArtifactsCommand,
    ListAssociationsCommand,
    ListAutoMLJobsCommand,
    ListCandidatesForAutoMLJobCommand,
    ListClusterEventsCommand,
    ListClusterNodesCommand,
    ListClustersCommand,
    ListClusterSchedulerConfigsCommand,
    ListCodeRepositoriesCommand,
    ListCompilationJobsCommand,
    ListComputeQuotasCommand,
    ListContextsCommand,
    ListDataQualityJobDefinitionsCommand,
    ListDeviceFleetsCommand,
    ListDevicesCommand,
    ListDomainsCommand,
    ListEdgeDeploymentPlansCommand,
    ListEdgePackagingJobsCommand,
    ListEndpointConfigsCommand,
    ListEndpointsCommand,
    ListExperimentsCommand,
    ListFeatureGroupsCommand,
    ListFlowDefinitionsCommand,
    ListHubContentsCommand,
    ListHubContentVersionsCommand,
    ListHubsCommand,
    ListHumanTaskUisCommand,
    ListHyperParameterTuningJobsCommand,
    ListImagesCommand,
    ListImageVersionsCommand,
    ListInferenceComponentsCommand,
    ListInferenceExperimentsCommand,
    ListInferenceRecommendationsJobsCommand,
    ListInferenceRecommendationsJobStepsCommand,
    ListLabelingJobsCommand,
    ListLabelingJobsForWorkteamCommand,
    ListLineageGroupsCommand,
    ListMlflowTrackingServersCommand,
    ListModelBiasJobDefinitionsCommand,
    ListModelCardExportJobsCommand,
    ListModelCardsCommand,
    ListModelCardVersionsCommand,
    ListModelExplainabilityJobDefinitionsCommand,
    ListModelMetadataCommand,
    ListModelPackageGroupsCommand,
    ListModelPackagesCommand,
    ListModelQualityJobDefinitionsCommand,
    ListModelsCommand,
    ListMonitoringAlertHistoryCommand,
    ListMonitoringAlertsCommand,
    ListMonitoringExecutionsCommand,
    ListMonitoringSchedulesCommand,
    ListNotebookInstanceLifecycleConfigsCommand,
    ListNotebookInstancesCommand,
    ListOptimizationJobsCommand,
    ListPartnerAppsCommand,
    ListPipelineExecutionsCommand,
    ListPipelineExecutionStepsCommand,
    ListPipelineParametersForExecutionCommand,
    ListPipelinesCommand,
    ListPipelineVersionsCommand,
    ListProcessingJobsCommand,
    ListProjectsCommand,
    ListResourceCatalogsCommand,
    ListSpacesCommand,
    ListStageDevicesCommand,
    ListStudioLifecycleConfigsCommand,
    ListSubscribedWorkteamsCommand,
    ListTagsCommand,
    ListTrainingJobsCommand,
    ListTrainingJobsForHyperParameterTuningJobCommand,
    ListTrainingPlansCommand,
    ListTransformJobsCommand,
    ListTrialComponentsCommand,
    ListTrialsCommand,
    ListUltraServersByReservedCapacityCommand,
    ListUserProfilesCommand,
    ListWorkforcesCommand,
    ListWorkteamsCommand,
    PutModelPackageGroupPolicyCommand,
    QueryLineageCommand,
    RegisterDevicesCommand,
    RenderUiTemplateCommand,
    RetryPipelineExecutionCommand,
    SearchCommand,
    SearchTrainingPlanOfferingsCommand,
    SendPipelineExecutionStepFailureCommand,
    SendPipelineExecutionStepSuccessCommand,
    StartEdgeDeploymentStageCommand,
    StartInferenceExperimentCommand,
    StartMlflowTrackingServerCommand,
    StartMonitoringScheduleCommand,
    StartNotebookInstanceCommand,
    StartPipelineExecutionCommand,
    StartSessionCommand,
    StopAutoMLJobCommand,
    StopCompilationJobCommand,
    StopEdgeDeploymentStageCommand,
    StopEdgePackagingJobCommand,
    StopHyperParameterTuningJobCommand,
    StopInferenceExperimentCommand,
    StopInferenceRecommendationsJobCommand,
    StopLabelingJobCommand,
    StopMlflowTrackingServerCommand,
    StopMonitoringScheduleCommand,
    StopNotebookInstanceCommand,
    StopOptimizationJobCommand,
    StopPipelineExecutionCommand,
    StopProcessingJobCommand,
    StopTrainingJobCommand,
    StopTransformJobCommand,
    UpdateActionCommand,
    UpdateAppImageConfigCommand,
    UpdateArtifactCommand,
    UpdateClusterCommand,
    UpdateClusterSchedulerConfigCommand,
    UpdateClusterSoftwareCommand,
    UpdateCodeRepositoryCommand,
    UpdateComputeQuotaCommand,
    UpdateContextCommand,
    UpdateDeviceFleetCommand,
    UpdateDevicesCommand,
    UpdateDomainCommand,
    UpdateEndpointCommand,
    UpdateEndpointWeightsAndCapacitiesCommand,
    UpdateExperimentCommand,
    UpdateFeatureGroupCommand,
    UpdateFeatureMetadataCommand,
    UpdateHubCommand,
    UpdateHubContentCommand,
    UpdateHubContentReferenceCommand,
    UpdateImageCommand,
    UpdateImageVersionCommand,
    UpdateInferenceComponentCommand,
    UpdateInferenceComponentRuntimeConfigCommand,
    UpdateInferenceExperimentCommand,
    UpdateMlflowTrackingServerCommand,
    UpdateModelCardCommand,
    UpdateModelPackageCommand,
    UpdateMonitoringAlertCommand,
    UpdateMonitoringScheduleCommand,
    UpdateNotebookInstanceCommand,
    UpdateNotebookInstanceLifecycleConfigCommand,
    UpdatePartnerAppCommand,
    UpdatePipelineCommand,
    UpdatePipelineExecutionCommand,
    UpdatePipelineVersionCommand,
    UpdateProjectCommand,
    UpdateSpaceCommand,
    UpdateTrainingJobCommand,
    UpdateTrialCommand,
    UpdateTrialComponentCommand,
    UpdateUserProfileCommand,
    UpdateWorkforceCommand,
    UpdateWorkteamCommand,
};
class SageMaker extends SageMakerClient {
}
smithyClient.createAggregatedClient(commands, SageMaker);

const paginateCreateHubContentPresignedUrls = core.createPaginator(SageMakerClient, CreateHubContentPresignedUrlsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListActions = core.createPaginator(SageMakerClient, ListActionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListAlgorithms = core.createPaginator(SageMakerClient, ListAlgorithmsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListAliases = core.createPaginator(SageMakerClient, ListAliasesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListAppImageConfigs = core.createPaginator(SageMakerClient, ListAppImageConfigsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListApps = core.createPaginator(SageMakerClient, ListAppsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListArtifacts = core.createPaginator(SageMakerClient, ListArtifactsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListAssociations = core.createPaginator(SageMakerClient, ListAssociationsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListAutoMLJobs = core.createPaginator(SageMakerClient, ListAutoMLJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListCandidatesForAutoMLJob = core.createPaginator(SageMakerClient, ListCandidatesForAutoMLJobCommand, "NextToken", "NextToken", "MaxResults");

const paginateListClusterEvents = core.createPaginator(SageMakerClient, ListClusterEventsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListClusterNodes = core.createPaginator(SageMakerClient, ListClusterNodesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListClusterSchedulerConfigs = core.createPaginator(SageMakerClient, ListClusterSchedulerConfigsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListClusters = core.createPaginator(SageMakerClient, ListClustersCommand, "NextToken", "NextToken", "MaxResults");

const paginateListCodeRepositories = core.createPaginator(SageMakerClient, ListCodeRepositoriesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListCompilationJobs = core.createPaginator(SageMakerClient, ListCompilationJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListComputeQuotas = core.createPaginator(SageMakerClient, ListComputeQuotasCommand, "NextToken", "NextToken", "MaxResults");

const paginateListContexts = core.createPaginator(SageMakerClient, ListContextsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListDataQualityJobDefinitions = core.createPaginator(SageMakerClient, ListDataQualityJobDefinitionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListDeviceFleets = core.createPaginator(SageMakerClient, ListDeviceFleetsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListDevices = core.createPaginator(SageMakerClient, ListDevicesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListDomains = core.createPaginator(SageMakerClient, ListDomainsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListEdgeDeploymentPlans = core.createPaginator(SageMakerClient, ListEdgeDeploymentPlansCommand, "NextToken", "NextToken", "MaxResults");

const paginateListEdgePackagingJobs = core.createPaginator(SageMakerClient, ListEdgePackagingJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListEndpointConfigs = core.createPaginator(SageMakerClient, ListEndpointConfigsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListEndpoints = core.createPaginator(SageMakerClient, ListEndpointsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListExperiments = core.createPaginator(SageMakerClient, ListExperimentsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListFeatureGroups = core.createPaginator(SageMakerClient, ListFeatureGroupsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListFlowDefinitions = core.createPaginator(SageMakerClient, ListFlowDefinitionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListHumanTaskUis = core.createPaginator(SageMakerClient, ListHumanTaskUisCommand, "NextToken", "NextToken", "MaxResults");

const paginateListHyperParameterTuningJobs = core.createPaginator(SageMakerClient, ListHyperParameterTuningJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListImageVersions = core.createPaginator(SageMakerClient, ListImageVersionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListImages = core.createPaginator(SageMakerClient, ListImagesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListInferenceComponents = core.createPaginator(SageMakerClient, ListInferenceComponentsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListInferenceExperiments = core.createPaginator(SageMakerClient, ListInferenceExperimentsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListInferenceRecommendationsJobSteps = core.createPaginator(SageMakerClient, ListInferenceRecommendationsJobStepsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListInferenceRecommendationsJobs = core.createPaginator(SageMakerClient, ListInferenceRecommendationsJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListLabelingJobsForWorkteam = core.createPaginator(SageMakerClient, ListLabelingJobsForWorkteamCommand, "NextToken", "NextToken", "MaxResults");

const paginateListLabelingJobs = core.createPaginator(SageMakerClient, ListLabelingJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListLineageGroups = core.createPaginator(SageMakerClient, ListLineageGroupsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListMlflowTrackingServers = core.createPaginator(SageMakerClient, ListMlflowTrackingServersCommand, "NextToken", "NextToken", "MaxResults");

const paginateListModelBiasJobDefinitions = core.createPaginator(SageMakerClient, ListModelBiasJobDefinitionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListModelCardExportJobs = core.createPaginator(SageMakerClient, ListModelCardExportJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListModelCardVersions = core.createPaginator(SageMakerClient, ListModelCardVersionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListModelCards = core.createPaginator(SageMakerClient, ListModelCardsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListModelExplainabilityJobDefinitions = core.createPaginator(SageMakerClient, ListModelExplainabilityJobDefinitionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListModelMetadata = core.createPaginator(SageMakerClient, ListModelMetadataCommand, "NextToken", "NextToken", "MaxResults");

const paginateListModelPackageGroups = core.createPaginator(SageMakerClient, ListModelPackageGroupsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListModelPackages = core.createPaginator(SageMakerClient, ListModelPackagesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListModelQualityJobDefinitions = core.createPaginator(SageMakerClient, ListModelQualityJobDefinitionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListModels = core.createPaginator(SageMakerClient, ListModelsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListMonitoringAlertHistory = core.createPaginator(SageMakerClient, ListMonitoringAlertHistoryCommand, "NextToken", "NextToken", "MaxResults");

const paginateListMonitoringAlerts = core.createPaginator(SageMakerClient, ListMonitoringAlertsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListMonitoringExecutions = core.createPaginator(SageMakerClient, ListMonitoringExecutionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListMonitoringSchedules = core.createPaginator(SageMakerClient, ListMonitoringSchedulesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListNotebookInstanceLifecycleConfigs = core.createPaginator(SageMakerClient, ListNotebookInstanceLifecycleConfigsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListNotebookInstances = core.createPaginator(SageMakerClient, ListNotebookInstancesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListOptimizationJobs = core.createPaginator(SageMakerClient, ListOptimizationJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListPartnerApps = core.createPaginator(SageMakerClient, ListPartnerAppsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListPipelineExecutionSteps = core.createPaginator(SageMakerClient, ListPipelineExecutionStepsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListPipelineExecutions = core.createPaginator(SageMakerClient, ListPipelineExecutionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListPipelineParametersForExecution = core.createPaginator(SageMakerClient, ListPipelineParametersForExecutionCommand, "NextToken", "NextToken", "MaxResults");

const paginateListPipelineVersions = core.createPaginator(SageMakerClient, ListPipelineVersionsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListPipelines = core.createPaginator(SageMakerClient, ListPipelinesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListProcessingJobs = core.createPaginator(SageMakerClient, ListProcessingJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListProjects = core.createPaginator(SageMakerClient, ListProjectsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListResourceCatalogs = core.createPaginator(SageMakerClient, ListResourceCatalogsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListSpaces = core.createPaginator(SageMakerClient, ListSpacesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListStageDevices = core.createPaginator(SageMakerClient, ListStageDevicesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListStudioLifecycleConfigs = core.createPaginator(SageMakerClient, ListStudioLifecycleConfigsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListSubscribedWorkteams = core.createPaginator(SageMakerClient, ListSubscribedWorkteamsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListTags = core.createPaginator(SageMakerClient, ListTagsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListTrainingJobsForHyperParameterTuningJob = core.createPaginator(SageMakerClient, ListTrainingJobsForHyperParameterTuningJobCommand, "NextToken", "NextToken", "MaxResults");

const paginateListTrainingJobs = core.createPaginator(SageMakerClient, ListTrainingJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListTrainingPlans = core.createPaginator(SageMakerClient, ListTrainingPlansCommand, "NextToken", "NextToken", "MaxResults");

const paginateListTransformJobs = core.createPaginator(SageMakerClient, ListTransformJobsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListTrialComponents = core.createPaginator(SageMakerClient, ListTrialComponentsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListTrials = core.createPaginator(SageMakerClient, ListTrialsCommand, "NextToken", "NextToken", "MaxResults");

const paginateListUltraServersByReservedCapacity = core.createPaginator(SageMakerClient, ListUltraServersByReservedCapacityCommand, "NextToken", "NextToken", "MaxResults");

const paginateListUserProfiles = core.createPaginator(SageMakerClient, ListUserProfilesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListWorkforces = core.createPaginator(SageMakerClient, ListWorkforcesCommand, "NextToken", "NextToken", "MaxResults");

const paginateListWorkteams = core.createPaginator(SageMakerClient, ListWorkteamsCommand, "NextToken", "NextToken", "MaxResults");

const paginateQueryLineage = core.createPaginator(SageMakerClient, QueryLineageCommand, "NextToken", "NextToken", "MaxResults");

const paginateSearch = core.createPaginator(SageMakerClient, SearchCommand, "NextToken", "NextToken", "MaxResults");

const checkState$c = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeEndpointCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.EndpointStatus;
            };
            if (returnComparator() === "Failed") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationException") {
            return { state: utilWaiter.WaiterState.SUCCESS, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForEndpointDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 1800 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$c);
};
const waitUntilEndpointDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 1800 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$c);
    return utilWaiter.checkExceptions(result);
};

const checkState$b = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeEndpointCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.EndpointStatus;
            };
            if (returnComparator() === "InService") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.EndpointStatus;
            };
            if (returnComparator() === "Failed") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationException") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForEndpointInService = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 3600 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$b);
};
const waitUntilEndpointInService = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 3600 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$b);
    return utilWaiter.checkExceptions(result);
};

const checkState$a = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeImageCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.ImageStatus;
            };
            if (returnComparator() === "CREATED") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.ImageStatus;
            };
            if (returnComparator() === "CREATE_FAILED") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationException") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForImageCreated = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$a);
};
const waitUntilImageCreated = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$a);
    return utilWaiter.checkExceptions(result);
};

const checkState$9 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeImageCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.ImageStatus;
            };
            if (returnComparator() === "DELETE_FAILED") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
            return { state: utilWaiter.WaiterState.SUCCESS, reason };
        }
        if (exception.name && exception.name == "ValidationException") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForImageDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$9);
};
const waitUntilImageDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$9);
    return utilWaiter.checkExceptions(result);
};

const checkState$8 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeImageCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.ImageStatus;
            };
            if (returnComparator() === "CREATED") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.ImageStatus;
            };
            if (returnComparator() === "UPDATE_FAILED") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationException") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForImageUpdated = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$8);
};
const waitUntilImageUpdated = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$8);
    return utilWaiter.checkExceptions(result);
};

const checkState$7 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeImageVersionCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.ImageVersionStatus;
            };
            if (returnComparator() === "CREATED") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.ImageVersionStatus;
            };
            if (returnComparator() === "CREATE_FAILED") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationException") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForImageVersionCreated = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$7);
};
const waitUntilImageVersionCreated = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$7);
    return utilWaiter.checkExceptions(result);
};

const checkState$6 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeImageVersionCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.ImageVersionStatus;
            };
            if (returnComparator() === "DELETE_FAILED") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ResourceNotFoundException") {
            return { state: utilWaiter.WaiterState.SUCCESS, reason };
        }
        if (exception.name && exception.name == "ValidationException") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForImageVersionDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$6);
};
const waitUntilImageVersionDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$6);
    return utilWaiter.checkExceptions(result);
};

const checkState$5 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeNotebookInstanceCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.NotebookInstanceStatus;
            };
            if (returnComparator() === "Failed") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationException") {
            return { state: utilWaiter.WaiterState.SUCCESS, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForNotebookInstanceDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 1800 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$5);
};
const waitUntilNotebookInstanceDeleted = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 1800 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$5);
    return utilWaiter.checkExceptions(result);
};

const checkState$4 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeNotebookInstanceCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.NotebookInstanceStatus;
            };
            if (returnComparator() === "InService") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.NotebookInstanceStatus;
            };
            if (returnComparator() === "Failed") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForNotebookInstanceInService = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 1800 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$4);
};
const waitUntilNotebookInstanceInService = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 1800 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$4);
    return utilWaiter.checkExceptions(result);
};

const checkState$3 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeNotebookInstanceCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.NotebookInstanceStatus;
            };
            if (returnComparator() === "Stopped") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.NotebookInstanceStatus;
            };
            if (returnComparator() === "Failed") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForNotebookInstanceStopped = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 1800 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$3);
};
const waitUntilNotebookInstanceStopped = async (params, input) => {
    const serviceDefaults = { minDelay: 30, maxDelay: 1800 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$3);
    return utilWaiter.checkExceptions(result);
};

const checkState$2 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeProcessingJobCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.ProcessingJobStatus;
            };
            if (returnComparator() === "Completed") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.ProcessingJobStatus;
            };
            if (returnComparator() === "Stopped") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.ProcessingJobStatus;
            };
            if (returnComparator() === "Failed") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationException") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForProcessingJobCompletedOrStopped = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$2);
};
const waitUntilProcessingJobCompletedOrStopped = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$2);
    return utilWaiter.checkExceptions(result);
};

const checkState$1 = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeTrainingJobCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.TrainingJobStatus;
            };
            if (returnComparator() === "Completed") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.TrainingJobStatus;
            };
            if (returnComparator() === "Stopped") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.TrainingJobStatus;
            };
            if (returnComparator() === "Failed") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationException") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForTrainingJobCompletedOrStopped = async (params, input) => {
    const serviceDefaults = { minDelay: 120, maxDelay: 21600 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
};
const waitUntilTrainingJobCompletedOrStopped = async (params, input) => {
    const serviceDefaults = { minDelay: 120, maxDelay: 21600 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState$1);
    return utilWaiter.checkExceptions(result);
};

const checkState = async (client, input) => {
    let reason;
    try {
        const result = await client.send(new DescribeTransformJobCommand(input));
        reason = result;
        try {
            const returnComparator = () => {
                return result.TransformJobStatus;
            };
            if (returnComparator() === "Completed") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.TransformJobStatus;
            };
            if (returnComparator() === "Stopped") {
                return { state: utilWaiter.WaiterState.SUCCESS, reason };
            }
        }
        catch (e) { }
        try {
            const returnComparator = () => {
                return result.TransformJobStatus;
            };
            if (returnComparator() === "Failed") {
                return { state: utilWaiter.WaiterState.FAILURE, reason };
            }
        }
        catch (e) { }
    }
    catch (exception) {
        reason = exception;
        if (exception.name && exception.name == "ValidationException") {
            return { state: utilWaiter.WaiterState.FAILURE, reason };
        }
    }
    return { state: utilWaiter.WaiterState.RETRY, reason };
};
const waitForTransformJobCompletedOrStopped = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    return utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
};
const waitUntilTransformJobCompletedOrStopped = async (params, input) => {
    const serviceDefaults = { minDelay: 60, maxDelay: 3600 };
    const result = await utilWaiter.createWaiter({ ...serviceDefaults, ...params }, input, checkState);
    return utilWaiter.checkExceptions(result);
};

const HubContentSortBy = {
    CREATION_TIME: "CreationTime",
    HUB_CONTENT_NAME: "HubContentName",
    HUB_CONTENT_STATUS: "HubContentStatus",
};
const HubSortBy = {
    ACCOUNT_ID_OWNER: "AccountIdOwner",
    CREATION_TIME: "CreationTime",
    HUB_NAME: "HubName",
    HUB_STATUS: "HubStatus",
};
const HyperParameterTuningJobSortByOptions = {
    CreationTime: "CreationTime",
    Name: "Name",
    Status: "Status",
};
const ImageSortBy = {
    CREATION_TIME: "CREATION_TIME",
    IMAGE_NAME: "IMAGE_NAME",
    LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME",
};
const ImageSortOrder = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
const ImageVersionSortBy = {
    CREATION_TIME: "CREATION_TIME",
    LAST_MODIFIED_TIME: "LAST_MODIFIED_TIME",
    VERSION: "VERSION",
};
const ImageVersionSortOrder = {
    ASCENDING: "ASCENDING",
    DESCENDING: "DESCENDING",
};
const InferenceComponentSortKey = {
    CreationTime: "CreationTime",
    Name: "Name",
    Status: "Status",
};
const InferenceExperimentStopDesiredState = {
    CANCELLED: "Cancelled",
    COMPLETED: "Completed",
};
const RecommendationStepType = {
    BENCHMARK: "BENCHMARK",
};
const LineageType = {
    ACTION: "Action",
    ARTIFACT: "Artifact",
    CONTEXT: "Context",
    TRIAL_COMPONENT: "TrialComponent",
};
const SortActionsBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
};
const SortOrder = {
    ASCENDING: "Ascending",
    DESCENDING: "Descending",
};
const SortArtifactsBy = {
    CREATION_TIME: "CreationTime",
};
const SortAssociationsBy = {
    CREATION_TIME: "CreationTime",
    DESTINATION_ARN: "DestinationArn",
    DESTINATION_TYPE: "DestinationType",
    SOURCE_ARN: "SourceArn",
    SOURCE_TYPE: "SourceType",
};
const SortClusterSchedulerConfigBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
    STATUS: "Status",
};
const ListCompilationJobsSortBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
    STATUS: "Status",
};
const SortQuotaBy = {
    CLUSTER_ARN: "ClusterArn",
    CREATION_TIME: "CreationTime",
    NAME: "Name",
    STATUS: "Status",
};
const SortContextsBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
};
const MonitoringJobDefinitionSortKey = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
};
const ListDeviceFleetsSortBy = {
    CreationTime: "CREATION_TIME",
    LastModifiedTime: "LAST_MODIFIED_TIME",
    Name: "NAME",
};
const ListEdgeDeploymentPlansSortBy = {
    CreationTime: "CREATION_TIME",
    DeviceFleetName: "DEVICE_FLEET_NAME",
    LastModifiedTime: "LAST_MODIFIED_TIME",
    Name: "NAME",
};
const ListEdgePackagingJobsSortBy = {
    CreationTime: "CREATION_TIME",
    EdgePackagingJobStatus: "STATUS",
    LastModifiedTime: "LAST_MODIFIED_TIME",
    ModelName: "MODEL_NAME",
    Name: "NAME",
};
const OrderKey = {
    Ascending: "Ascending",
    Descending: "Descending",
};
const SortExperimentsBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
};
const SortInferenceExperimentsBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
    STATUS: "Status",
};
const ListInferenceRecommendationsJobsSortBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
    STATUS: "Status",
};
const SortBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
    STATUS: "Status",
};
const ListLabelingJobsForWorkteamSortByOptions = {
    CREATION_TIME: "CreationTime",
};
const SortLineageGroupsBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
};
const SortTrackingServerBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
    STATUS: "Status",
};
const ModelCardExportJobSortBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
    STATUS: "Status",
};
const ModelCardExportJobSortOrder = {
    ASCENDING: "Ascending",
    DESCENDING: "Descending",
};
const ModelCardSortBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
};
const ModelCardSortOrder = {
    ASCENDING: "Ascending",
    DESCENDING: "Descending",
};
const ModelCardVersionSortBy = {
    VERSION: "Version",
};
const ModelMetadataFilterType = {
    DOMAIN: "Domain",
    FRAMEWORK: "Framework",
    FRAMEWORKVERSION: "FrameworkVersion",
    TASK: "Task",
};
const ModelPackageGroupSortBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
};
const ModelPackageType = {
    BOTH: "Both",
    UNVERSIONED: "Unversioned",
    VERSIONED: "Versioned",
};
const ModelPackageSortBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
};
const ModelSortKey = {
    CreationTime: "CreationTime",
    Name: "Name",
};
const MonitoringAlertHistorySortKey = {
    CreationTime: "CreationTime",
    Status: "Status",
};
const MonitoringAlertStatus = {
    IN_ALERT: "InAlert",
    OK: "OK",
};
const MonitoringExecutionSortKey = {
    CREATION_TIME: "CreationTime",
    SCHEDULED_TIME: "ScheduledTime",
    STATUS: "Status",
};
const MonitoringScheduleSortKey = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
    STATUS: "Status",
};
const NotebookInstanceLifecycleConfigSortKey = {
    CREATION_TIME: "CreationTime",
    LAST_MODIFIED_TIME: "LastModifiedTime",
    NAME: "Name",
};
const NotebookInstanceLifecycleConfigSortOrder = {
    ASCENDING: "Ascending",
    DESCENDING: "Descending",
};
const NotebookInstanceSortKey = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
    STATUS: "Status",
};
const NotebookInstanceSortOrder = {
    ASCENDING: "Ascending",
    DESCENDING: "Descending",
};
const ListOptimizationJobsSortBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
    STATUS: "Status",
};
const SortPipelineExecutionsBy = {
    CREATION_TIME: "CreationTime",
    PIPELINE_EXECUTION_ARN: "PipelineExecutionArn",
};
const StepStatus = {
    EXECUTING: "Executing",
    FAILED: "Failed",
    STARTING: "Starting",
    STOPPED: "Stopped",
    STOPPING: "Stopping",
    SUCCEEDED: "Succeeded",
};
const SortPipelinesBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
};
const ProjectSortBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
};
const ProjectSortOrder = {
    ASCENDING: "Ascending",
    DESCENDING: "Descending",
};
const ResourceCatalogSortBy = {
    CREATION_TIME: "CreationTime",
};
const ResourceCatalogSortOrder = {
    ASCENDING: "Ascending",
    DESCENDING: "Descending",
};
const SpaceSortKey = {
    CreationTime: "CreationTime",
    LastModifiedTime: "LastModifiedTime",
};
const StudioLifecycleConfigSortKey = {
    CreationTime: "CreationTime",
    LastModifiedTime: "LastModifiedTime",
    Name: "Name",
};
const TrainingJobSortByOptions = {
    CreationTime: "CreationTime",
    FinalObjectiveMetricValue: "FinalObjectiveMetricValue",
    Name: "Name",
    Status: "Status",
};
const TrainingPlanFilterName = {
    STATUS: "Status",
};
const TrainingPlanSortBy = {
    NAME: "TrainingPlanName",
    START_TIME: "StartTime",
    STATUS: "Status",
};
const TrainingPlanSortOrder = {
    ASCENDING: "Ascending",
    DESCENDING: "Descending",
};
const SortTrialComponentsBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
};
const SortTrialsBy = {
    CREATION_TIME: "CreationTime",
    NAME: "Name",
};
const UltraServerHealthStatus = {
    IMPAIRED: "Impaired",
    INSUFFICIENT_DATA: "Insufficient-Data",
    OK: "OK",
};

Object.defineProperty(exports, "$Command", {
    enumerable: true,
    get: function () { return smithyClient.Command; }
});
Object.defineProperty(exports, "__Client", {
    enumerable: true,
    get: function () { return smithyClient.Client; }
});
exports.ActionStatus = ActionStatus;
exports.ActivationState = ActivationState;
exports.AddAssociationCommand = AddAssociationCommand;
exports.AddTagsCommand = AddTagsCommand;
exports.AdditionalS3DataSourceDataType = AdditionalS3DataSourceDataType;
exports.AggregationTransformationValue = AggregationTransformationValue;
exports.AlgorithmSortBy = AlgorithmSortBy;
exports.AlgorithmStatus = AlgorithmStatus;
exports.AppImageConfigSortKey = AppImageConfigSortKey;
exports.AppInstanceType = AppInstanceType;
exports.AppNetworkAccessType = AppNetworkAccessType;
exports.AppSecurityGroupManagement = AppSecurityGroupManagement;
exports.AppSortKey = AppSortKey;
exports.AppStatus = AppStatus;
exports.AppType = AppType;
exports.ArtifactSourceIdType = ArtifactSourceIdType;
exports.AssemblyType = AssemblyType;
exports.AssociateTrialComponentCommand = AssociateTrialComponentCommand;
exports.AssociationEdgeType = AssociationEdgeType;
exports.AsyncNotificationTopicTypes = AsyncNotificationTopicTypes;
exports.AthenaResultCompressionType = AthenaResultCompressionType;
exports.AthenaResultFormat = AthenaResultFormat;
exports.AttachClusterNodeVolumeCommand = AttachClusterNodeVolumeCommand;
exports.AuthMode = AuthMode;
exports.AutoMLAlgorithm = AutoMLAlgorithm;
exports.AutoMLChannelType = AutoMLChannelType;
exports.AutoMLJobObjectiveType = AutoMLJobObjectiveType;
exports.AutoMLJobSecondaryStatus = AutoMLJobSecondaryStatus;
exports.AutoMLJobStatus = AutoMLJobStatus;
exports.AutoMLMetricEnum = AutoMLMetricEnum;
exports.AutoMLMetricExtendedEnum = AutoMLMetricExtendedEnum;
exports.AutoMLMode = AutoMLMode;
exports.AutoMLProblemTypeConfigName = AutoMLProblemTypeConfigName;
exports.AutoMLProcessingUnit = AutoMLProcessingUnit;
exports.AutoMLS3DataType = AutoMLS3DataType;
exports.AutoMLSortBy = AutoMLSortBy;
exports.AutoMLSortOrder = AutoMLSortOrder;
exports.AutoMountHomeEFS = AutoMountHomeEFS;
exports.AutotuneMode = AutotuneMode;
exports.AwsManagedHumanLoopRequestSource = AwsManagedHumanLoopRequestSource;
exports.BatchAddClusterNodesCommand = BatchAddClusterNodesCommand;
exports.BatchAddClusterNodesErrorCode = BatchAddClusterNodesErrorCode;
exports.BatchDeleteClusterNodesCommand = BatchDeleteClusterNodesCommand;
exports.BatchDeleteClusterNodesErrorCode = BatchDeleteClusterNodesErrorCode;
exports.BatchDescribeModelPackageCommand = BatchDescribeModelPackageCommand;
exports.BatchStrategy = BatchStrategy;
exports.BooleanOperator = BooleanOperator;
exports.CandidateSortBy = CandidateSortBy;
exports.CandidateStatus = CandidateStatus;
exports.CandidateStepType = CandidateStepType;
exports.CapacityReservationPreference = CapacityReservationPreference;
exports.CapacityReservationType = CapacityReservationType;
exports.CapacitySizeType = CapacitySizeType;
exports.CaptureMode = CaptureMode;
exports.CaptureStatus = CaptureStatus;
exports.ClarifyFeatureType = ClarifyFeatureType;
exports.ClarifyTextGranularity = ClarifyTextGranularity;
exports.ClarifyTextLanguage = ClarifyTextLanguage;
exports.ClusterAutoScalerType = ClusterAutoScalerType;
exports.ClusterAutoScalingMode = ClusterAutoScalingMode;
exports.ClusterAutoScalingStatus = ClusterAutoScalingStatus;
exports.ClusterConfigMode = ClusterConfigMode;
exports.ClusterEventResourceType = ClusterEventResourceType;
exports.ClusterInstanceStatus = ClusterInstanceStatus;
exports.ClusterInstanceType = ClusterInstanceType;
exports.ClusterNodeProvisioningMode = ClusterNodeProvisioningMode;
exports.ClusterNodeRecovery = ClusterNodeRecovery;
exports.ClusterSortBy = ClusterSortBy;
exports.ClusterStatus = ClusterStatus;
exports.CodeRepositorySortBy = CodeRepositorySortBy;
exports.CodeRepositorySortOrder = CodeRepositorySortOrder;
exports.CollectionType = CollectionType;
exports.CompilationJobStatus = CompilationJobStatus;
exports.CompleteOnConvergence = CompleteOnConvergence;
exports.CompressionType = CompressionType;
exports.ConditionOutcome = ConditionOutcome;
exports.ConflictException = ConflictException;
exports.ContainerMode = ContainerMode;
exports.ContentClassifier = ContentClassifier;
exports.CreateActionCommand = CreateActionCommand;
exports.CreateAlgorithmCommand = CreateAlgorithmCommand;
exports.CreateAppCommand = CreateAppCommand;
exports.CreateAppImageConfigCommand = CreateAppImageConfigCommand;
exports.CreateArtifactCommand = CreateArtifactCommand;
exports.CreateAutoMLJobCommand = CreateAutoMLJobCommand;
exports.CreateAutoMLJobV2Command = CreateAutoMLJobV2Command;
exports.CreateClusterCommand = CreateClusterCommand;
exports.CreateClusterSchedulerConfigCommand = CreateClusterSchedulerConfigCommand;
exports.CreateCodeRepositoryCommand = CreateCodeRepositoryCommand;
exports.CreateCompilationJobCommand = CreateCompilationJobCommand;
exports.CreateComputeQuotaCommand = CreateComputeQuotaCommand;
exports.CreateContextCommand = CreateContextCommand;
exports.CreateDataQualityJobDefinitionCommand = CreateDataQualityJobDefinitionCommand;
exports.CreateDeviceFleetCommand = CreateDeviceFleetCommand;
exports.CreateDomainCommand = CreateDomainCommand;
exports.CreateEdgeDeploymentPlanCommand = CreateEdgeDeploymentPlanCommand;
exports.CreateEdgeDeploymentStageCommand = CreateEdgeDeploymentStageCommand;
exports.CreateEdgePackagingJobCommand = CreateEdgePackagingJobCommand;
exports.CreateEndpointCommand = CreateEndpointCommand;
exports.CreateEndpointConfigCommand = CreateEndpointConfigCommand;
exports.CreateExperimentCommand = CreateExperimentCommand;
exports.CreateFeatureGroupCommand = CreateFeatureGroupCommand;
exports.CreateFlowDefinitionCommand = CreateFlowDefinitionCommand;
exports.CreateHubCommand = CreateHubCommand;
exports.CreateHubContentPresignedUrlsCommand = CreateHubContentPresignedUrlsCommand;
exports.CreateHubContentReferenceCommand = CreateHubContentReferenceCommand;
exports.CreateHumanTaskUiCommand = CreateHumanTaskUiCommand;
exports.CreateHyperParameterTuningJobCommand = CreateHyperParameterTuningJobCommand;
exports.CreateImageCommand = CreateImageCommand;
exports.CreateImageVersionCommand = CreateImageVersionCommand;
exports.CreateInferenceComponentCommand = CreateInferenceComponentCommand;
exports.CreateInferenceExperimentCommand = CreateInferenceExperimentCommand;
exports.CreateInferenceRecommendationsJobCommand = CreateInferenceRecommendationsJobCommand;
exports.CreateLabelingJobCommand = CreateLabelingJobCommand;
exports.CreateMlflowTrackingServerCommand = CreateMlflowTrackingServerCommand;
exports.CreateModelBiasJobDefinitionCommand = CreateModelBiasJobDefinitionCommand;
exports.CreateModelCardCommand = CreateModelCardCommand;
exports.CreateModelCardExportJobCommand = CreateModelCardExportJobCommand;
exports.CreateModelCardRequestFilterSensitiveLog = CreateModelCardRequestFilterSensitiveLog;
exports.CreateModelCommand = CreateModelCommand;
exports.CreateModelExplainabilityJobDefinitionCommand = CreateModelExplainabilityJobDefinitionCommand;
exports.CreateModelPackageCommand = CreateModelPackageCommand;
exports.CreateModelPackageGroupCommand = CreateModelPackageGroupCommand;
exports.CreateModelPackageInputFilterSensitiveLog = CreateModelPackageInputFilterSensitiveLog;
exports.CreateModelQualityJobDefinitionCommand = CreateModelQualityJobDefinitionCommand;
exports.CreateMonitoringScheduleCommand = CreateMonitoringScheduleCommand;
exports.CreateNotebookInstanceCommand = CreateNotebookInstanceCommand;
exports.CreateNotebookInstanceLifecycleConfigCommand = CreateNotebookInstanceLifecycleConfigCommand;
exports.CreateOptimizationJobCommand = CreateOptimizationJobCommand;
exports.CreatePartnerAppCommand = CreatePartnerAppCommand;
exports.CreatePartnerAppPresignedUrlCommand = CreatePartnerAppPresignedUrlCommand;
exports.CreatePipelineCommand = CreatePipelineCommand;
exports.CreatePresignedDomainUrlCommand = CreatePresignedDomainUrlCommand;
exports.CreatePresignedMlflowTrackingServerUrlCommand = CreatePresignedMlflowTrackingServerUrlCommand;
exports.CreatePresignedNotebookInstanceUrlCommand = CreatePresignedNotebookInstanceUrlCommand;
exports.CreateProcessingJobCommand = CreateProcessingJobCommand;
exports.CreateProjectCommand = CreateProjectCommand;
exports.CreateSpaceCommand = CreateSpaceCommand;
exports.CreateStudioLifecycleConfigCommand = CreateStudioLifecycleConfigCommand;
exports.CreateTrainingJobCommand = CreateTrainingJobCommand;
exports.CreateTrainingPlanCommand = CreateTrainingPlanCommand;
exports.CreateTransformJobCommand = CreateTransformJobCommand;
exports.CreateTrialCommand = CreateTrialCommand;
exports.CreateTrialComponentCommand = CreateTrialComponentCommand;
exports.CreateUserProfileCommand = CreateUserProfileCommand;
exports.CreateWorkforceCommand = CreateWorkforceCommand;
exports.CreateWorkforceRequestFilterSensitiveLog = CreateWorkforceRequestFilterSensitiveLog;
exports.CreateWorkteamCommand = CreateWorkteamCommand;
exports.CrossAccountFilterOption = CrossAccountFilterOption;
exports.DataDistributionType = DataDistributionType;
exports.DataSourceName = DataSourceName;
exports.DeepHealthCheckType = DeepHealthCheckType;
exports.DeleteActionCommand = DeleteActionCommand;
exports.DeleteAlgorithmCommand = DeleteAlgorithmCommand;
exports.DeleteAppCommand = DeleteAppCommand;
exports.DeleteAppImageConfigCommand = DeleteAppImageConfigCommand;
exports.DeleteArtifactCommand = DeleteArtifactCommand;
exports.DeleteAssociationCommand = DeleteAssociationCommand;
exports.DeleteClusterCommand = DeleteClusterCommand;
exports.DeleteClusterSchedulerConfigCommand = DeleteClusterSchedulerConfigCommand;
exports.DeleteCodeRepositoryCommand = DeleteCodeRepositoryCommand;
exports.DeleteCompilationJobCommand = DeleteCompilationJobCommand;
exports.DeleteComputeQuotaCommand = DeleteComputeQuotaCommand;
exports.DeleteContextCommand = DeleteContextCommand;
exports.DeleteDataQualityJobDefinitionCommand = DeleteDataQualityJobDefinitionCommand;
exports.DeleteDeviceFleetCommand = DeleteDeviceFleetCommand;
exports.DeleteDomainCommand = DeleteDomainCommand;
exports.DeleteEdgeDeploymentPlanCommand = DeleteEdgeDeploymentPlanCommand;
exports.DeleteEdgeDeploymentStageCommand = DeleteEdgeDeploymentStageCommand;
exports.DeleteEndpointCommand = DeleteEndpointCommand;
exports.DeleteEndpointConfigCommand = DeleteEndpointConfigCommand;
exports.DeleteExperimentCommand = DeleteExperimentCommand;
exports.DeleteFeatureGroupCommand = DeleteFeatureGroupCommand;
exports.DeleteFlowDefinitionCommand = DeleteFlowDefinitionCommand;
exports.DeleteHubCommand = DeleteHubCommand;
exports.DeleteHubContentCommand = DeleteHubContentCommand;
exports.DeleteHubContentReferenceCommand = DeleteHubContentReferenceCommand;
exports.DeleteHumanTaskUiCommand = DeleteHumanTaskUiCommand;
exports.DeleteHyperParameterTuningJobCommand = DeleteHyperParameterTuningJobCommand;
exports.DeleteImageCommand = DeleteImageCommand;
exports.DeleteImageVersionCommand = DeleteImageVersionCommand;
exports.DeleteInferenceComponentCommand = DeleteInferenceComponentCommand;
exports.DeleteInferenceExperimentCommand = DeleteInferenceExperimentCommand;
exports.DeleteMlflowTrackingServerCommand = DeleteMlflowTrackingServerCommand;
exports.DeleteModelBiasJobDefinitionCommand = DeleteModelBiasJobDefinitionCommand;
exports.DeleteModelCardCommand = DeleteModelCardCommand;
exports.DeleteModelCommand = DeleteModelCommand;
exports.DeleteModelExplainabilityJobDefinitionCommand = DeleteModelExplainabilityJobDefinitionCommand;
exports.DeleteModelPackageCommand = DeleteModelPackageCommand;
exports.DeleteModelPackageGroupCommand = DeleteModelPackageGroupCommand;
exports.DeleteModelPackageGroupPolicyCommand = DeleteModelPackageGroupPolicyCommand;
exports.DeleteModelQualityJobDefinitionCommand = DeleteModelQualityJobDefinitionCommand;
exports.DeleteMonitoringScheduleCommand = DeleteMonitoringScheduleCommand;
exports.DeleteNotebookInstanceCommand = DeleteNotebookInstanceCommand;
exports.DeleteNotebookInstanceLifecycleConfigCommand = DeleteNotebookInstanceLifecycleConfigCommand;
exports.DeleteOptimizationJobCommand = DeleteOptimizationJobCommand;
exports.DeletePartnerAppCommand = DeletePartnerAppCommand;
exports.DeletePipelineCommand = DeletePipelineCommand;
exports.DeleteProjectCommand = DeleteProjectCommand;
exports.DeleteSpaceCommand = DeleteSpaceCommand;
exports.DeleteStudioLifecycleConfigCommand = DeleteStudioLifecycleConfigCommand;
exports.DeleteTagsCommand = DeleteTagsCommand;
exports.DeleteTrialCommand = DeleteTrialCommand;
exports.DeleteTrialComponentCommand = DeleteTrialComponentCommand;
exports.DeleteUserProfileCommand = DeleteUserProfileCommand;
exports.DeleteWorkforceCommand = DeleteWorkforceCommand;
exports.DeleteWorkteamCommand = DeleteWorkteamCommand;
exports.DeregisterDevicesCommand = DeregisterDevicesCommand;
exports.DescribeActionCommand = DescribeActionCommand;
exports.DescribeAlgorithmCommand = DescribeAlgorithmCommand;
exports.DescribeAppCommand = DescribeAppCommand;
exports.DescribeAppImageConfigCommand = DescribeAppImageConfigCommand;
exports.DescribeArtifactCommand = DescribeArtifactCommand;
exports.DescribeAutoMLJobCommand = DescribeAutoMLJobCommand;
exports.DescribeAutoMLJobV2Command = DescribeAutoMLJobV2Command;
exports.DescribeClusterCommand = DescribeClusterCommand;
exports.DescribeClusterEventCommand = DescribeClusterEventCommand;
exports.DescribeClusterNodeCommand = DescribeClusterNodeCommand;
exports.DescribeClusterSchedulerConfigCommand = DescribeClusterSchedulerConfigCommand;
exports.DescribeCodeRepositoryCommand = DescribeCodeRepositoryCommand;
exports.DescribeCompilationJobCommand = DescribeCompilationJobCommand;
exports.DescribeComputeQuotaCommand = DescribeComputeQuotaCommand;
exports.DescribeContextCommand = DescribeContextCommand;
exports.DescribeDataQualityJobDefinitionCommand = DescribeDataQualityJobDefinitionCommand;
exports.DescribeDeviceCommand = DescribeDeviceCommand;
exports.DescribeDeviceFleetCommand = DescribeDeviceFleetCommand;
exports.DescribeDomainCommand = DescribeDomainCommand;
exports.DescribeEdgeDeploymentPlanCommand = DescribeEdgeDeploymentPlanCommand;
exports.DescribeEdgePackagingJobCommand = DescribeEdgePackagingJobCommand;
exports.DescribeEndpointCommand = DescribeEndpointCommand;
exports.DescribeEndpointConfigCommand = DescribeEndpointConfigCommand;
exports.DescribeExperimentCommand = DescribeExperimentCommand;
exports.DescribeFeatureGroupCommand = DescribeFeatureGroupCommand;
exports.DescribeFeatureMetadataCommand = DescribeFeatureMetadataCommand;
exports.DescribeFlowDefinitionCommand = DescribeFlowDefinitionCommand;
exports.DescribeHubCommand = DescribeHubCommand;
exports.DescribeHubContentCommand = DescribeHubContentCommand;
exports.DescribeHumanTaskUiCommand = DescribeHumanTaskUiCommand;
exports.DescribeHyperParameterTuningJobCommand = DescribeHyperParameterTuningJobCommand;
exports.DescribeImageCommand = DescribeImageCommand;
exports.DescribeImageVersionCommand = DescribeImageVersionCommand;
exports.DescribeInferenceComponentCommand = DescribeInferenceComponentCommand;
exports.DescribeInferenceExperimentCommand = DescribeInferenceExperimentCommand;
exports.DescribeInferenceRecommendationsJobCommand = DescribeInferenceRecommendationsJobCommand;
exports.DescribeLabelingJobCommand = DescribeLabelingJobCommand;
exports.DescribeLineageGroupCommand = DescribeLineageGroupCommand;
exports.DescribeMlflowTrackingServerCommand = DescribeMlflowTrackingServerCommand;
exports.DescribeModelBiasJobDefinitionCommand = DescribeModelBiasJobDefinitionCommand;
exports.DescribeModelCardCommand = DescribeModelCardCommand;
exports.DescribeModelCardExportJobCommand = DescribeModelCardExportJobCommand;
exports.DescribeModelCardResponseFilterSensitiveLog = DescribeModelCardResponseFilterSensitiveLog;
exports.DescribeModelCommand = DescribeModelCommand;
exports.DescribeModelExplainabilityJobDefinitionCommand = DescribeModelExplainabilityJobDefinitionCommand;
exports.DescribeModelPackageCommand = DescribeModelPackageCommand;
exports.DescribeModelPackageGroupCommand = DescribeModelPackageGroupCommand;
exports.DescribeModelPackageOutputFilterSensitiveLog = DescribeModelPackageOutputFilterSensitiveLog;
exports.DescribeModelQualityJobDefinitionCommand = DescribeModelQualityJobDefinitionCommand;
exports.DescribeMonitoringScheduleCommand = DescribeMonitoringScheduleCommand;
exports.DescribeNotebookInstanceCommand = DescribeNotebookInstanceCommand;
exports.DescribeNotebookInstanceLifecycleConfigCommand = DescribeNotebookInstanceLifecycleConfigCommand;
exports.DescribeOptimizationJobCommand = DescribeOptimizationJobCommand;
exports.DescribePartnerAppCommand = DescribePartnerAppCommand;
exports.DescribePipelineCommand = DescribePipelineCommand;
exports.DescribePipelineDefinitionForExecutionCommand = DescribePipelineDefinitionForExecutionCommand;
exports.DescribePipelineExecutionCommand = DescribePipelineExecutionCommand;
exports.DescribeProcessingJobCommand = DescribeProcessingJobCommand;
exports.DescribeProjectCommand = DescribeProjectCommand;
exports.DescribeReservedCapacityCommand = DescribeReservedCapacityCommand;
exports.DescribeSpaceCommand = DescribeSpaceCommand;
exports.DescribeStudioLifecycleConfigCommand = DescribeStudioLifecycleConfigCommand;
exports.DescribeSubscribedWorkteamCommand = DescribeSubscribedWorkteamCommand;
exports.DescribeTrainingJobCommand = DescribeTrainingJobCommand;
exports.DescribeTrainingPlanCommand = DescribeTrainingPlanCommand;
exports.DescribeTransformJobCommand = DescribeTransformJobCommand;
exports.DescribeTrialCommand = DescribeTrialCommand;
exports.DescribeTrialComponentCommand = DescribeTrialComponentCommand;
exports.DescribeUserProfileCommand = DescribeUserProfileCommand;
exports.DescribeWorkforceCommand = DescribeWorkforceCommand;
exports.DescribeWorkteamCommand = DescribeWorkteamCommand;
exports.DetachClusterNodeVolumeCommand = DetachClusterNodeVolumeCommand;
exports.DetailedAlgorithmStatus = DetailedAlgorithmStatus;
exports.DetailedModelPackageStatus = DetailedModelPackageStatus;
exports.DeviceDeploymentStatus = DeviceDeploymentStatus;
exports.DeviceSubsetType = DeviceSubsetType;
exports.DirectInternetAccess = DirectInternetAccess;
exports.Direction = Direction;
exports.DisableSagemakerServicecatalogPortfolioCommand = DisableSagemakerServicecatalogPortfolioCommand;
exports.DisassociateTrialComponentCommand = DisassociateTrialComponentCommand;
exports.DomainStatus = DomainStatus;
exports.EdgePackagingJobStatus = EdgePackagingJobStatus;
exports.EdgePresetDeploymentStatus = EdgePresetDeploymentStatus;
exports.EdgePresetDeploymentType = EdgePresetDeploymentType;
exports.EnableSagemakerServicecatalogPortfolioCommand = EnableSagemakerServicecatalogPortfolioCommand;
exports.EnabledOrDisabled = EnabledOrDisabled;
exports.EndpointConfigSortKey = EndpointConfigSortKey;
exports.EndpointSortKey = EndpointSortKey;
exports.EndpointStatus = EndpointStatus;
exports.EventSortBy = EventSortBy;
exports.ExecutionRoleIdentityConfig = ExecutionRoleIdentityConfig;
exports.ExecutionStatus = ExecutionStatus;
exports.FailureHandlingPolicy = FailureHandlingPolicy;
exports.FairShare = FairShare;
exports.FeatureGroupSortBy = FeatureGroupSortBy;
exports.FeatureGroupSortOrder = FeatureGroupSortOrder;
exports.FeatureGroupStatus = FeatureGroupStatus;
exports.FeatureStatus = FeatureStatus;
exports.FeatureType = FeatureType;
exports.FileSystemAccessMode = FileSystemAccessMode;
exports.FileSystemType = FileSystemType;
exports.FillingType = FillingType;
exports.FlatInvocations = FlatInvocations;
exports.FlowDefinitionStatus = FlowDefinitionStatus;
exports.Framework = Framework;
exports.GetDeviceFleetReportCommand = GetDeviceFleetReportCommand;
exports.GetLineageGroupPolicyCommand = GetLineageGroupPolicyCommand;
exports.GetModelPackageGroupPolicyCommand = GetModelPackageGroupPolicyCommand;
exports.GetSagemakerServicecatalogPortfolioStatusCommand = GetSagemakerServicecatalogPortfolioStatusCommand;
exports.GetScalingConfigurationRecommendationCommand = GetScalingConfigurationRecommendationCommand;
exports.GetSearchSuggestionsCommand = GetSearchSuggestionsCommand;
exports.HubContentSortBy = HubContentSortBy;
exports.HubContentStatus = HubContentStatus;
exports.HubContentSupportStatus = HubContentSupportStatus;
exports.HubContentType = HubContentType;
exports.HubSortBy = HubSortBy;
exports.HubStatus = HubStatus;
exports.HumanTaskUiStatus = HumanTaskUiStatus;
exports.HyperParameterScalingType = HyperParameterScalingType;
exports.HyperParameterTuningAllocationStrategy = HyperParameterTuningAllocationStrategy;
exports.HyperParameterTuningJobObjectiveType = HyperParameterTuningJobObjectiveType;
exports.HyperParameterTuningJobSortByOptions = HyperParameterTuningJobSortByOptions;
exports.HyperParameterTuningJobStatus = HyperParameterTuningJobStatus;
exports.HyperParameterTuningJobStrategyType = HyperParameterTuningJobStrategyType;
exports.HyperParameterTuningJobWarmStartType = HyperParameterTuningJobWarmStartType;
exports.IPAddressType = IPAddressType;
exports.ImageSortBy = ImageSortBy;
exports.ImageSortOrder = ImageSortOrder;
exports.ImageStatus = ImageStatus;
exports.ImageVersionSortBy = ImageVersionSortBy;
exports.ImageVersionSortOrder = ImageVersionSortOrder;
exports.ImageVersionStatus = ImageVersionStatus;
exports.ImportHubContentCommand = ImportHubContentCommand;
exports.InferenceComponentCapacitySizeType = InferenceComponentCapacitySizeType;
exports.InferenceComponentSortKey = InferenceComponentSortKey;
exports.InferenceComponentStatus = InferenceComponentStatus;
exports.InferenceExecutionMode = InferenceExecutionMode;
exports.InferenceExperimentStatus = InferenceExperimentStatus;
exports.InferenceExperimentStopDesiredState = InferenceExperimentStopDesiredState;
exports.InferenceExperimentType = InferenceExperimentType;
exports.InputMode = InputMode;
exports.InstanceGroupStatus = InstanceGroupStatus;
exports.IsTrackingServerActive = IsTrackingServerActive;
exports.JobType = JobType;
exports.JoinSource = JoinSource;
exports.LabelingJobStatus = LabelingJobStatus;
exports.LastUpdateStatusValue = LastUpdateStatusValue;
exports.LifecycleManagement = LifecycleManagement;
exports.LineageType = LineageType;
exports.ListActionsCommand = ListActionsCommand;
exports.ListAlgorithmsCommand = ListAlgorithmsCommand;
exports.ListAliasesCommand = ListAliasesCommand;
exports.ListAppImageConfigsCommand = ListAppImageConfigsCommand;
exports.ListAppsCommand = ListAppsCommand;
exports.ListArtifactsCommand = ListArtifactsCommand;
exports.ListAssociationsCommand = ListAssociationsCommand;
exports.ListAutoMLJobsCommand = ListAutoMLJobsCommand;
exports.ListCandidatesForAutoMLJobCommand = ListCandidatesForAutoMLJobCommand;
exports.ListClusterEventsCommand = ListClusterEventsCommand;
exports.ListClusterNodesCommand = ListClusterNodesCommand;
exports.ListClusterSchedulerConfigsCommand = ListClusterSchedulerConfigsCommand;
exports.ListClustersCommand = ListClustersCommand;
exports.ListCodeRepositoriesCommand = ListCodeRepositoriesCommand;
exports.ListCompilationJobsCommand = ListCompilationJobsCommand;
exports.ListCompilationJobsSortBy = ListCompilationJobsSortBy;
exports.ListComputeQuotasCommand = ListComputeQuotasCommand;
exports.ListContextsCommand = ListContextsCommand;
exports.ListDataQualityJobDefinitionsCommand = ListDataQualityJobDefinitionsCommand;
exports.ListDeviceFleetsCommand = ListDeviceFleetsCommand;
exports.ListDeviceFleetsSortBy = ListDeviceFleetsSortBy;
exports.ListDevicesCommand = ListDevicesCommand;
exports.ListDomainsCommand = ListDomainsCommand;
exports.ListEdgeDeploymentPlansCommand = ListEdgeDeploymentPlansCommand;
exports.ListEdgeDeploymentPlansSortBy = ListEdgeDeploymentPlansSortBy;
exports.ListEdgePackagingJobsCommand = ListEdgePackagingJobsCommand;
exports.ListEdgePackagingJobsSortBy = ListEdgePackagingJobsSortBy;
exports.ListEndpointConfigsCommand = ListEndpointConfigsCommand;
exports.ListEndpointsCommand = ListEndpointsCommand;
exports.ListExperimentsCommand = ListExperimentsCommand;
exports.ListFeatureGroupsCommand = ListFeatureGroupsCommand;
exports.ListFlowDefinitionsCommand = ListFlowDefinitionsCommand;
exports.ListHubContentVersionsCommand = ListHubContentVersionsCommand;
exports.ListHubContentsCommand = ListHubContentsCommand;
exports.ListHubsCommand = ListHubsCommand;
exports.ListHumanTaskUisCommand = ListHumanTaskUisCommand;
exports.ListHyperParameterTuningJobsCommand = ListHyperParameterTuningJobsCommand;
exports.ListImageVersionsCommand = ListImageVersionsCommand;
exports.ListImagesCommand = ListImagesCommand;
exports.ListInferenceComponentsCommand = ListInferenceComponentsCommand;
exports.ListInferenceExperimentsCommand = ListInferenceExperimentsCommand;
exports.ListInferenceRecommendationsJobStepsCommand = ListInferenceRecommendationsJobStepsCommand;
exports.ListInferenceRecommendationsJobsCommand = ListInferenceRecommendationsJobsCommand;
exports.ListInferenceRecommendationsJobsSortBy = ListInferenceRecommendationsJobsSortBy;
exports.ListLabelingJobsCommand = ListLabelingJobsCommand;
exports.ListLabelingJobsForWorkteamCommand = ListLabelingJobsForWorkteamCommand;
exports.ListLabelingJobsForWorkteamSortByOptions = ListLabelingJobsForWorkteamSortByOptions;
exports.ListLineageGroupsCommand = ListLineageGroupsCommand;
exports.ListMlflowTrackingServersCommand = ListMlflowTrackingServersCommand;
exports.ListModelBiasJobDefinitionsCommand = ListModelBiasJobDefinitionsCommand;
exports.ListModelCardExportJobsCommand = ListModelCardExportJobsCommand;
exports.ListModelCardVersionsCommand = ListModelCardVersionsCommand;
exports.ListModelCardsCommand = ListModelCardsCommand;
exports.ListModelExplainabilityJobDefinitionsCommand = ListModelExplainabilityJobDefinitionsCommand;
exports.ListModelMetadataCommand = ListModelMetadataCommand;
exports.ListModelPackageGroupsCommand = ListModelPackageGroupsCommand;
exports.ListModelPackagesCommand = ListModelPackagesCommand;
exports.ListModelQualityJobDefinitionsCommand = ListModelQualityJobDefinitionsCommand;
exports.ListModelsCommand = ListModelsCommand;
exports.ListMonitoringAlertHistoryCommand = ListMonitoringAlertHistoryCommand;
exports.ListMonitoringAlertsCommand = ListMonitoringAlertsCommand;
exports.ListMonitoringExecutionsCommand = ListMonitoringExecutionsCommand;
exports.ListMonitoringSchedulesCommand = ListMonitoringSchedulesCommand;
exports.ListNotebookInstanceLifecycleConfigsCommand = ListNotebookInstanceLifecycleConfigsCommand;
exports.ListNotebookInstancesCommand = ListNotebookInstancesCommand;
exports.ListOptimizationJobsCommand = ListOptimizationJobsCommand;
exports.ListOptimizationJobsSortBy = ListOptimizationJobsSortBy;
exports.ListPartnerAppsCommand = ListPartnerAppsCommand;
exports.ListPipelineExecutionStepsCommand = ListPipelineExecutionStepsCommand;
exports.ListPipelineExecutionsCommand = ListPipelineExecutionsCommand;
exports.ListPipelineParametersForExecutionCommand = ListPipelineParametersForExecutionCommand;
exports.ListPipelineVersionsCommand = ListPipelineVersionsCommand;
exports.ListPipelinesCommand = ListPipelinesCommand;
exports.ListProcessingJobsCommand = ListProcessingJobsCommand;
exports.ListProjectsCommand = ListProjectsCommand;
exports.ListResourceCatalogsCommand = ListResourceCatalogsCommand;
exports.ListSpacesCommand = ListSpacesCommand;
exports.ListStageDevicesCommand = ListStageDevicesCommand;
exports.ListStudioLifecycleConfigsCommand = ListStudioLifecycleConfigsCommand;
exports.ListSubscribedWorkteamsCommand = ListSubscribedWorkteamsCommand;
exports.ListTagsCommand = ListTagsCommand;
exports.ListTrainingJobsCommand = ListTrainingJobsCommand;
exports.ListTrainingJobsForHyperParameterTuningJobCommand = ListTrainingJobsForHyperParameterTuningJobCommand;
exports.ListTrainingPlansCommand = ListTrainingPlansCommand;
exports.ListTransformJobsCommand = ListTransformJobsCommand;
exports.ListTrialComponentsCommand = ListTrialComponentsCommand;
exports.ListTrialsCommand = ListTrialsCommand;
exports.ListUltraServersByReservedCapacityCommand = ListUltraServersByReservedCapacityCommand;
exports.ListUserProfilesCommand = ListUserProfilesCommand;
exports.ListWorkforcesCommand = ListWorkforcesCommand;
exports.ListWorkforcesSortByOptions = ListWorkforcesSortByOptions;
exports.ListWorkteamsCommand = ListWorkteamsCommand;
exports.ListWorkteamsSortByOptions = ListWorkteamsSortByOptions;
exports.ManagedInstanceScalingStatus = ManagedInstanceScalingStatus;
exports.MetricSetSource = MetricSetSource;
exports.MlTools = MlTools;
exports.ModelApprovalStatus = ModelApprovalStatus;
exports.ModelCacheSetting = ModelCacheSetting;
exports.ModelCardExportJobSortBy = ModelCardExportJobSortBy;
exports.ModelCardExportJobSortOrder = ModelCardExportJobSortOrder;
exports.ModelCardExportJobStatus = ModelCardExportJobStatus;
exports.ModelCardFilterSensitiveLog = ModelCardFilterSensitiveLog;
exports.ModelCardProcessingStatus = ModelCardProcessingStatus;
exports.ModelCardSortBy = ModelCardSortBy;
exports.ModelCardSortOrder = ModelCardSortOrder;
exports.ModelCardStatus = ModelCardStatus;
exports.ModelCardVersionSortBy = ModelCardVersionSortBy;
exports.ModelCompressionType = ModelCompressionType;
exports.ModelInfrastructureType = ModelInfrastructureType;
exports.ModelMetadataFilterType = ModelMetadataFilterType;
exports.ModelPackageFilterSensitiveLog = ModelPackageFilterSensitiveLog;
exports.ModelPackageGroupSortBy = ModelPackageGroupSortBy;
exports.ModelPackageGroupStatus = ModelPackageGroupStatus;
exports.ModelPackageModelCardFilterSensitiveLog = ModelPackageModelCardFilterSensitiveLog;
exports.ModelPackageSortBy = ModelPackageSortBy;
exports.ModelPackageStatus = ModelPackageStatus;
exports.ModelPackageType = ModelPackageType;
exports.ModelSortKey = ModelSortKey;
exports.ModelVariantAction = ModelVariantAction;
exports.ModelVariantStatus = ModelVariantStatus;
exports.MonitoringAlertHistorySortKey = MonitoringAlertHistorySortKey;
exports.MonitoringAlertStatus = MonitoringAlertStatus;
exports.MonitoringExecutionSortKey = MonitoringExecutionSortKey;
exports.MonitoringJobDefinitionSortKey = MonitoringJobDefinitionSortKey;
exports.MonitoringProblemType = MonitoringProblemType;
exports.MonitoringScheduleSortKey = MonitoringScheduleSortKey;
exports.MonitoringType = MonitoringType;
exports.NodeUnavailabilityType = NodeUnavailabilityType;
exports.NotebookInstanceAcceleratorType = NotebookInstanceAcceleratorType;
exports.NotebookInstanceLifecycleConfigSortKey = NotebookInstanceLifecycleConfigSortKey;
exports.NotebookInstanceLifecycleConfigSortOrder = NotebookInstanceLifecycleConfigSortOrder;
exports.NotebookInstanceSortKey = NotebookInstanceSortKey;
exports.NotebookInstanceSortOrder = NotebookInstanceSortOrder;
exports.NotebookInstanceStatus = NotebookInstanceStatus;
exports.NotebookOutputOption = NotebookOutputOption;
exports.ObjectiveStatus = ObjectiveStatus;
exports.OfflineStoreStatusValue = OfflineStoreStatusValue;
exports.OidcConfigFilterSensitiveLog = OidcConfigFilterSensitiveLog;
exports.Operator = Operator;
exports.OptimizationJobDeploymentInstanceType = OptimizationJobDeploymentInstanceType;
exports.OptimizationJobStatus = OptimizationJobStatus;
exports.OrderKey = OrderKey;
exports.OutputCompressionType = OutputCompressionType;
exports.ParameterType = ParameterType;
exports.PartnerAppAuthType = PartnerAppAuthType;
exports.PartnerAppStatus = PartnerAppStatus;
exports.PartnerAppType = PartnerAppType;
exports.PipelineExecutionStatus = PipelineExecutionStatus;
exports.PipelineStatus = PipelineStatus;
exports.PreemptTeamTasks = PreemptTeamTasks;
exports.ProblemType = ProblemType;
exports.ProcessingInstanceType = ProcessingInstanceType;
exports.ProcessingJobStatus = ProcessingJobStatus;
exports.ProcessingS3CompressionType = ProcessingS3CompressionType;
exports.ProcessingS3DataDistributionType = ProcessingS3DataDistributionType;
exports.ProcessingS3DataType = ProcessingS3DataType;
exports.ProcessingS3InputMode = ProcessingS3InputMode;
exports.ProcessingS3UploadMode = ProcessingS3UploadMode;
exports.Processor = Processor;
exports.ProductionVariantAcceleratorType = ProductionVariantAcceleratorType;
exports.ProductionVariantInferenceAmiVersion = ProductionVariantInferenceAmiVersion;
exports.ProductionVariantInstanceType = ProductionVariantInstanceType;
exports.ProfilingStatus = ProfilingStatus;
exports.ProjectSortBy = ProjectSortBy;
exports.ProjectSortOrder = ProjectSortOrder;
exports.ProjectStatus = ProjectStatus;
exports.PutModelPackageGroupPolicyCommand = PutModelPackageGroupPolicyCommand;
exports.QueryLineageCommand = QueryLineageCommand;
exports.RStudioServerProAccessStatus = RStudioServerProAccessStatus;
exports.RStudioServerProUserGroup = RStudioServerProUserGroup;
exports.RecommendationJobStatus = RecommendationJobStatus;
exports.RecommendationJobSupportedEndpointType = RecommendationJobSupportedEndpointType;
exports.RecommendationJobType = RecommendationJobType;
exports.RecommendationStatus = RecommendationStatus;
exports.RecommendationStepType = RecommendationStepType;
exports.RecordWrapper = RecordWrapper;
exports.RedshiftResultCompressionType = RedshiftResultCompressionType;
exports.RedshiftResultFormat = RedshiftResultFormat;
exports.RegisterDevicesCommand = RegisterDevicesCommand;
exports.Relation = Relation;
exports.RenderUiTemplateCommand = RenderUiTemplateCommand;
exports.RepositoryAccessMode = RepositoryAccessMode;
exports.ReservedCapacityInstanceType = ReservedCapacityInstanceType;
exports.ReservedCapacityStatus = ReservedCapacityStatus;
exports.ReservedCapacityType = ReservedCapacityType;
exports.ResourceCatalogSortBy = ResourceCatalogSortBy;
exports.ResourceCatalogSortOrder = ResourceCatalogSortOrder;
exports.ResourceInUse = ResourceInUse;
exports.ResourceLimitExceeded = ResourceLimitExceeded;
exports.ResourceNotFound = ResourceNotFound;
exports.ResourceSharingStrategy = ResourceSharingStrategy;
exports.ResourceType = ResourceType;
exports.RetentionType = RetentionType;
exports.RetryPipelineExecutionCommand = RetryPipelineExecutionCommand;
exports.RootAccess = RootAccess;
exports.RoutingStrategy = RoutingStrategy;
exports.RuleEvaluationStatus = RuleEvaluationStatus;
exports.S3DataDistribution = S3DataDistribution;
exports.S3DataType = S3DataType;
exports.S3ModelDataType = S3ModelDataType;
exports.SageMaker = SageMaker;
exports.SageMakerClient = SageMakerClient;
exports.SageMakerImageName = SageMakerImageName;
exports.SageMakerResourceName = SageMakerResourceName;
exports.SageMakerServiceException = SageMakerServiceException;
exports.SagemakerServicecatalogStatus = SagemakerServicecatalogStatus;
exports.ScheduleStatus = ScheduleStatus;
exports.SchedulerResourceStatus = SchedulerResourceStatus;
exports.SearchCommand = SearchCommand;
exports.SearchRecordFilterSensitiveLog = SearchRecordFilterSensitiveLog;
exports.SearchResponseFilterSensitiveLog = SearchResponseFilterSensitiveLog;
exports.SearchSortOrder = SearchSortOrder;
exports.SearchTrainingPlanOfferingsCommand = SearchTrainingPlanOfferingsCommand;
exports.SecondaryStatus = SecondaryStatus;
exports.SendPipelineExecutionStepFailureCommand = SendPipelineExecutionStepFailureCommand;
exports.SendPipelineExecutionStepSuccessCommand = SendPipelineExecutionStepSuccessCommand;
exports.SharingType = SharingType;
exports.SkipModelValidation = SkipModelValidation;
exports.SortActionsBy = SortActionsBy;
exports.SortArtifactsBy = SortArtifactsBy;
exports.SortAssociationsBy = SortAssociationsBy;
exports.SortBy = SortBy;
exports.SortClusterSchedulerConfigBy = SortClusterSchedulerConfigBy;
exports.SortContextsBy = SortContextsBy;
exports.SortExperimentsBy = SortExperimentsBy;
exports.SortInferenceExperimentsBy = SortInferenceExperimentsBy;
exports.SortLineageGroupsBy = SortLineageGroupsBy;
exports.SortOrder = SortOrder;
exports.SortPipelineExecutionsBy = SortPipelineExecutionsBy;
exports.SortPipelinesBy = SortPipelinesBy;
exports.SortQuotaBy = SortQuotaBy;
exports.SortTrackingServerBy = SortTrackingServerBy;
exports.SortTrialComponentsBy = SortTrialComponentsBy;
exports.SortTrialsBy = SortTrialsBy;
exports.SpaceSortKey = SpaceSortKey;
exports.SpaceStatus = SpaceStatus;
exports.SplitType = SplitType;
exports.StageStatus = StageStatus;
exports.StartEdgeDeploymentStageCommand = StartEdgeDeploymentStageCommand;
exports.StartInferenceExperimentCommand = StartInferenceExperimentCommand;
exports.StartMlflowTrackingServerCommand = StartMlflowTrackingServerCommand;
exports.StartMonitoringScheduleCommand = StartMonitoringScheduleCommand;
exports.StartNotebookInstanceCommand = StartNotebookInstanceCommand;
exports.StartPipelineExecutionCommand = StartPipelineExecutionCommand;
exports.StartSessionCommand = StartSessionCommand;
exports.Statistic = Statistic;
exports.StepStatus = StepStatus;
exports.StopAutoMLJobCommand = StopAutoMLJobCommand;
exports.StopCompilationJobCommand = StopCompilationJobCommand;
exports.StopEdgeDeploymentStageCommand = StopEdgeDeploymentStageCommand;
exports.StopEdgePackagingJobCommand = StopEdgePackagingJobCommand;
exports.StopHyperParameterTuningJobCommand = StopHyperParameterTuningJobCommand;
exports.StopInferenceExperimentCommand = StopInferenceExperimentCommand;
exports.StopInferenceRecommendationsJobCommand = StopInferenceRecommendationsJobCommand;
exports.StopLabelingJobCommand = StopLabelingJobCommand;
exports.StopMlflowTrackingServerCommand = StopMlflowTrackingServerCommand;
exports.StopMonitoringScheduleCommand = StopMonitoringScheduleCommand;
exports.StopNotebookInstanceCommand = StopNotebookInstanceCommand;
exports.StopOptimizationJobCommand = StopOptimizationJobCommand;
exports.StopPipelineExecutionCommand = StopPipelineExecutionCommand;
exports.StopProcessingJobCommand = StopProcessingJobCommand;
exports.StopTrainingJobCommand = StopTrainingJobCommand;
exports.StopTransformJobCommand = StopTransformJobCommand;
exports.StorageType = StorageType;
exports.StudioLifecycleConfigAppType = StudioLifecycleConfigAppType;
exports.StudioLifecycleConfigSortKey = StudioLifecycleConfigSortKey;
exports.StudioWebPortal = StudioWebPortal;
exports.TableFormat = TableFormat;
exports.TagPropagation = TagPropagation;
exports.TargetDevice = TargetDevice;
exports.TargetPlatformAccelerator = TargetPlatformAccelerator;
exports.TargetPlatformArch = TargetPlatformArch;
exports.TargetPlatformOs = TargetPlatformOs;
exports.ThroughputMode = ThroughputMode;
exports.TrackingServerMaintenanceStatus = TrackingServerMaintenanceStatus;
exports.TrackingServerSize = TrackingServerSize;
exports.TrackingServerStatus = TrackingServerStatus;
exports.TrafficRoutingConfigType = TrafficRoutingConfigType;
exports.TrafficType = TrafficType;
exports.TrainingInputMode = TrainingInputMode;
exports.TrainingInstanceType = TrainingInstanceType;
exports.TrainingJobEarlyStoppingType = TrainingJobEarlyStoppingType;
exports.TrainingJobSortByOptions = TrainingJobSortByOptions;
exports.TrainingJobStatus = TrainingJobStatus;
exports.TrainingPlanFilterName = TrainingPlanFilterName;
exports.TrainingPlanSortBy = TrainingPlanSortBy;
exports.TrainingPlanSortOrder = TrainingPlanSortOrder;
exports.TrainingPlanStatus = TrainingPlanStatus;
exports.TrainingRepositoryAccessMode = TrainingRepositoryAccessMode;
exports.TransformInstanceType = TransformInstanceType;
exports.TransformJobStatus = TransformJobStatus;
exports.TrialComponentPrimaryStatus = TrialComponentPrimaryStatus;
exports.TtlDurationUnit = TtlDurationUnit;
exports.UltraServerHealthStatus = UltraServerHealthStatus;
exports.UpdateActionCommand = UpdateActionCommand;
exports.UpdateAppImageConfigCommand = UpdateAppImageConfigCommand;
exports.UpdateArtifactCommand = UpdateArtifactCommand;
exports.UpdateClusterCommand = UpdateClusterCommand;
exports.UpdateClusterSchedulerConfigCommand = UpdateClusterSchedulerConfigCommand;
exports.UpdateClusterSoftwareCommand = UpdateClusterSoftwareCommand;
exports.UpdateCodeRepositoryCommand = UpdateCodeRepositoryCommand;
exports.UpdateComputeQuotaCommand = UpdateComputeQuotaCommand;
exports.UpdateContextCommand = UpdateContextCommand;
exports.UpdateDeviceFleetCommand = UpdateDeviceFleetCommand;
exports.UpdateDevicesCommand = UpdateDevicesCommand;
exports.UpdateDomainCommand = UpdateDomainCommand;
exports.UpdateEndpointCommand = UpdateEndpointCommand;
exports.UpdateEndpointWeightsAndCapacitiesCommand = UpdateEndpointWeightsAndCapacitiesCommand;
exports.UpdateExperimentCommand = UpdateExperimentCommand;
exports.UpdateFeatureGroupCommand = UpdateFeatureGroupCommand;
exports.UpdateFeatureMetadataCommand = UpdateFeatureMetadataCommand;
exports.UpdateHubCommand = UpdateHubCommand;
exports.UpdateHubContentCommand = UpdateHubContentCommand;
exports.UpdateHubContentReferenceCommand = UpdateHubContentReferenceCommand;
exports.UpdateImageCommand = UpdateImageCommand;
exports.UpdateImageVersionCommand = UpdateImageVersionCommand;
exports.UpdateInferenceComponentCommand = UpdateInferenceComponentCommand;
exports.UpdateInferenceComponentRuntimeConfigCommand = UpdateInferenceComponentRuntimeConfigCommand;
exports.UpdateInferenceExperimentCommand = UpdateInferenceExperimentCommand;
exports.UpdateMlflowTrackingServerCommand = UpdateMlflowTrackingServerCommand;
exports.UpdateModelCardCommand = UpdateModelCardCommand;
exports.UpdateModelCardRequestFilterSensitiveLog = UpdateModelCardRequestFilterSensitiveLog;
exports.UpdateModelPackageCommand = UpdateModelPackageCommand;
exports.UpdateModelPackageInputFilterSensitiveLog = UpdateModelPackageInputFilterSensitiveLog;
exports.UpdateMonitoringAlertCommand = UpdateMonitoringAlertCommand;
exports.UpdateMonitoringScheduleCommand = UpdateMonitoringScheduleCommand;
exports.UpdateNotebookInstanceCommand = UpdateNotebookInstanceCommand;
exports.UpdateNotebookInstanceLifecycleConfigCommand = UpdateNotebookInstanceLifecycleConfigCommand;
exports.UpdatePartnerAppCommand = UpdatePartnerAppCommand;
exports.UpdatePipelineCommand = UpdatePipelineCommand;
exports.UpdatePipelineExecutionCommand = UpdatePipelineExecutionCommand;
exports.UpdatePipelineVersionCommand = UpdatePipelineVersionCommand;
exports.UpdateProjectCommand = UpdateProjectCommand;
exports.UpdateSpaceCommand = UpdateSpaceCommand;
exports.UpdateTrainingJobCommand = UpdateTrainingJobCommand;
exports.UpdateTrialCommand = UpdateTrialCommand;
exports.UpdateTrialComponentCommand = UpdateTrialComponentCommand;
exports.UpdateUserProfileCommand = UpdateUserProfileCommand;
exports.UpdateWorkforceCommand = UpdateWorkforceCommand;
exports.UpdateWorkforceRequestFilterSensitiveLog = UpdateWorkforceRequestFilterSensitiveLog;
exports.UpdateWorkteamCommand = UpdateWorkteamCommand;
exports.UserProfileSortKey = UserProfileSortKey;
exports.UserProfileStatus = UserProfileStatus;
exports.VariantPropertyType = VariantPropertyType;
exports.VariantStatus = VariantStatus;
exports.VendorGuidance = VendorGuidance;
exports.VolumeAttachmentStatus = VolumeAttachmentStatus;
exports.WarmPoolResourceStatus = WarmPoolResourceStatus;
exports.WorkforceIpAddressType = WorkforceIpAddressType;
exports.WorkforceStatus = WorkforceStatus;
exports._InstanceType = _InstanceType;
exports.paginateCreateHubContentPresignedUrls = paginateCreateHubContentPresignedUrls;
exports.paginateListActions = paginateListActions;
exports.paginateListAlgorithms = paginateListAlgorithms;
exports.paginateListAliases = paginateListAliases;
exports.paginateListAppImageConfigs = paginateListAppImageConfigs;
exports.paginateListApps = paginateListApps;
exports.paginateListArtifacts = paginateListArtifacts;
exports.paginateListAssociations = paginateListAssociations;
exports.paginateListAutoMLJobs = paginateListAutoMLJobs;
exports.paginateListCandidatesForAutoMLJob = paginateListCandidatesForAutoMLJob;
exports.paginateListClusterEvents = paginateListClusterEvents;
exports.paginateListClusterNodes = paginateListClusterNodes;
exports.paginateListClusterSchedulerConfigs = paginateListClusterSchedulerConfigs;
exports.paginateListClusters = paginateListClusters;
exports.paginateListCodeRepositories = paginateListCodeRepositories;
exports.paginateListCompilationJobs = paginateListCompilationJobs;
exports.paginateListComputeQuotas = paginateListComputeQuotas;
exports.paginateListContexts = paginateListContexts;
exports.paginateListDataQualityJobDefinitions = paginateListDataQualityJobDefinitions;
exports.paginateListDeviceFleets = paginateListDeviceFleets;
exports.paginateListDevices = paginateListDevices;
exports.paginateListDomains = paginateListDomains;
exports.paginateListEdgeDeploymentPlans = paginateListEdgeDeploymentPlans;
exports.paginateListEdgePackagingJobs = paginateListEdgePackagingJobs;
exports.paginateListEndpointConfigs = paginateListEndpointConfigs;
exports.paginateListEndpoints = paginateListEndpoints;
exports.paginateListExperiments = paginateListExperiments;
exports.paginateListFeatureGroups = paginateListFeatureGroups;
exports.paginateListFlowDefinitions = paginateListFlowDefinitions;
exports.paginateListHumanTaskUis = paginateListHumanTaskUis;
exports.paginateListHyperParameterTuningJobs = paginateListHyperParameterTuningJobs;
exports.paginateListImageVersions = paginateListImageVersions;
exports.paginateListImages = paginateListImages;
exports.paginateListInferenceComponents = paginateListInferenceComponents;
exports.paginateListInferenceExperiments = paginateListInferenceExperiments;
exports.paginateListInferenceRecommendationsJobSteps = paginateListInferenceRecommendationsJobSteps;
exports.paginateListInferenceRecommendationsJobs = paginateListInferenceRecommendationsJobs;
exports.paginateListLabelingJobs = paginateListLabelingJobs;
exports.paginateListLabelingJobsForWorkteam = paginateListLabelingJobsForWorkteam;
exports.paginateListLineageGroups = paginateListLineageGroups;
exports.paginateListMlflowTrackingServers = paginateListMlflowTrackingServers;
exports.paginateListModelBiasJobDefinitions = paginateListModelBiasJobDefinitions;
exports.paginateListModelCardExportJobs = paginateListModelCardExportJobs;
exports.paginateListModelCardVersions = paginateListModelCardVersions;
exports.paginateListModelCards = paginateListModelCards;
exports.paginateListModelExplainabilityJobDefinitions = paginateListModelExplainabilityJobDefinitions;
exports.paginateListModelMetadata = paginateListModelMetadata;
exports.paginateListModelPackageGroups = paginateListModelPackageGroups;
exports.paginateListModelPackages = paginateListModelPackages;
exports.paginateListModelQualityJobDefinitions = paginateListModelQualityJobDefinitions;
exports.paginateListModels = paginateListModels;
exports.paginateListMonitoringAlertHistory = paginateListMonitoringAlertHistory;
exports.paginateListMonitoringAlerts = paginateListMonitoringAlerts;
exports.paginateListMonitoringExecutions = paginateListMonitoringExecutions;
exports.paginateListMonitoringSchedules = paginateListMonitoringSchedules;
exports.paginateListNotebookInstanceLifecycleConfigs = paginateListNotebookInstanceLifecycleConfigs;
exports.paginateListNotebookInstances = paginateListNotebookInstances;
exports.paginateListOptimizationJobs = paginateListOptimizationJobs;
exports.paginateListPartnerApps = paginateListPartnerApps;
exports.paginateListPipelineExecutionSteps = paginateListPipelineExecutionSteps;
exports.paginateListPipelineExecutions = paginateListPipelineExecutions;
exports.paginateListPipelineParametersForExecution = paginateListPipelineParametersForExecution;
exports.paginateListPipelineVersions = paginateListPipelineVersions;
exports.paginateListPipelines = paginateListPipelines;
exports.paginateListProcessingJobs = paginateListProcessingJobs;
exports.paginateListProjects = paginateListProjects;
exports.paginateListResourceCatalogs = paginateListResourceCatalogs;
exports.paginateListSpaces = paginateListSpaces;
exports.paginateListStageDevices = paginateListStageDevices;
exports.paginateListStudioLifecycleConfigs = paginateListStudioLifecycleConfigs;
exports.paginateListSubscribedWorkteams = paginateListSubscribedWorkteams;
exports.paginateListTags = paginateListTags;
exports.paginateListTrainingJobs = paginateListTrainingJobs;
exports.paginateListTrainingJobsForHyperParameterTuningJob = paginateListTrainingJobsForHyperParameterTuningJob;
exports.paginateListTrainingPlans = paginateListTrainingPlans;
exports.paginateListTransformJobs = paginateListTransformJobs;
exports.paginateListTrialComponents = paginateListTrialComponents;
exports.paginateListTrials = paginateListTrials;
exports.paginateListUltraServersByReservedCapacity = paginateListUltraServersByReservedCapacity;
exports.paginateListUserProfiles = paginateListUserProfiles;
exports.paginateListWorkforces = paginateListWorkforces;
exports.paginateListWorkteams = paginateListWorkteams;
exports.paginateQueryLineage = paginateQueryLineage;
exports.paginateSearch = paginateSearch;
exports.waitForEndpointDeleted = waitForEndpointDeleted;
exports.waitForEndpointInService = waitForEndpointInService;
exports.waitForImageCreated = waitForImageCreated;
exports.waitForImageDeleted = waitForImageDeleted;
exports.waitForImageUpdated = waitForImageUpdated;
exports.waitForImageVersionCreated = waitForImageVersionCreated;
exports.waitForImageVersionDeleted = waitForImageVersionDeleted;
exports.waitForNotebookInstanceDeleted = waitForNotebookInstanceDeleted;
exports.waitForNotebookInstanceInService = waitForNotebookInstanceInService;
exports.waitForNotebookInstanceStopped = waitForNotebookInstanceStopped;
exports.waitForProcessingJobCompletedOrStopped = waitForProcessingJobCompletedOrStopped;
exports.waitForTrainingJobCompletedOrStopped = waitForTrainingJobCompletedOrStopped;
exports.waitForTransformJobCompletedOrStopped = waitForTransformJobCompletedOrStopped;
exports.waitUntilEndpointDeleted = waitUntilEndpointDeleted;
exports.waitUntilEndpointInService = waitUntilEndpointInService;
exports.waitUntilImageCreated = waitUntilImageCreated;
exports.waitUntilImageDeleted = waitUntilImageDeleted;
exports.waitUntilImageUpdated = waitUntilImageUpdated;
exports.waitUntilImageVersionCreated = waitUntilImageVersionCreated;
exports.waitUntilImageVersionDeleted = waitUntilImageVersionDeleted;
exports.waitUntilNotebookInstanceDeleted = waitUntilNotebookInstanceDeleted;
exports.waitUntilNotebookInstanceInService = waitUntilNotebookInstanceInService;
exports.waitUntilNotebookInstanceStopped = waitUntilNotebookInstanceStopped;
exports.waitUntilProcessingJobCompletedOrStopped = waitUntilProcessingJobCompletedOrStopped;
exports.waitUntilTrainingJobCompletedOrStopped = waitUntilTrainingJobCompletedOrStopped;
exports.waitUntilTransformJobCompletedOrStopped = waitUntilTransformJobCompletedOrStopped;
